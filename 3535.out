cscope 15 /home/hejunying/hi3535 -q 0000011799 0000951661
	@HiApp/HiApp.c

1 
	~"HiAµ.h
"

3 
	#WIDTH
 1280

	)

4 
	#HEIGHT
 720

	)

5 
	#GRAPHICS_LAYER_G0
 0

	)

6 
	#FBIOGET_VSCREENINFO
 0x4600

	)

8 
	shiPTHREAD_HIFB_SAMPLE


10 
HI_S32
 
	mfd
;

11 
HI_S32
 
	mœyî
;

12 
HI_S32
 
	m˘ækey
;

13 }
	tPTHREAD_HIFB_SAMPLE_INFO
;

15 
fb_bôfõld
 
	gs_a32
 = {24,8,0};

16 
fb_bôfõld
 
	gs_r32
 = {16,8,0};

17 
fb_bôfõld
 
	gs_g32
 = {8,8,0};

18 
fb_bôfõld
 
	gs_b32
 = {0,8,0};

21 
HI_VOID
 *
	$SAMPLE_HIFB_REFRESH
(*
¨g
)

23 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

24 
HIFB_LAYER_INFO_S
 
°LayîInfo
 = {0};

25 
HI_BOOL
 
bShow
;

26 
HIFB_POINT_S
 
°Poöt
 = {0};

27 
fb_v¨_s¸ìnöfo
 
°V¨Info
;

28 
HI_CHAR
 
fûe
[12] = "/dev/fb0";

29 
HI_U32
 
maxW
;

30 
HI_U32
 
maxH
;

31 
HIFB_COLORKEY_S
 
°Cﬁ‹Key
;

32 
PTHREAD_HIFB_SAMPLE_INFO
 
p°Info
;

33 
p°Info
.
œyî
 = 0;

34 
p°Info
.
fd
 = -1;

35 
p°Info
.
˘ækey
 = 1;

37 
p°Info
.
œyî
)

39 
GRAPHICS_LAYER_G0
:

40 
	`°r˝y
(
fûe
, "/dev/fb0");

43 
	`°r˝y
(
fûe
, "/dev/fb0");

48 
p°Info
.
fd
 = 
	`›í
(
fûe
, 
O_RDWR
, 0);

49 if(
p°Info
.
fd
 < 0)

51 
	`SAMPLE_PRT
("›í %†Áûed!\n",
fûe
);

52  
HI_NULL
;

55 
°Cﬁ‹Key
.
bKeyE«bÀ
 = 
HI_TRUE
;

56 
°Cﬁ‹Key
.
u32Key
 = 0x0;

57 i‡(
	`io˘l
(
p°Info
.
fd
, 
FBIOPUT_COLORKEY_HIFB
, &
°Cﬁ‹Key
) < 0)

59 
	`SAMPLE_PRT
("FBIOPUT_COLORKEY_HIFB!\n");

60 
	`˛o£
(
p°Info
.
fd
);

61  
HI_NULL
;

63 
s32Rë
 = 
	`io˘l
(
p°Info
.
fd
, 
FBIOGET_VSCREENINFO
, &
°V¨Info
);

64 if(
s32Rë
 < 0)

66 
	`SAMPLE_PRT
("GET_VSCREENINFO failed!\n");

67 
	`˛o£
(
p°Info
.
fd
);

68  
HI_NULL
;

71 i‡(
	`io˘l
(
p°Info
.
fd
, 
FBIOPUT_SCREEN_ORIGIN_HIFB
, &
°Poöt
) < 0)

73 
	`SAMPLE_PRT
("set screen original showÖosition failed!\n");

74 
	`˛o£
(
p°Info
.
fd
);

75  
HI_NULL
;

78 
maxW
 = 
WIDTH
;

79 
maxH
 = 
HEIGHT
;

81 
°V¨Info
.
å™•

s_a32
;

82 
°V¨Info
.
ªd
 = 
s_r32
;

83 
°V¨Info
.
gªí
 = 
s_g32
;

84 
°V¨Info
.
blue
 = 
s_b32
;

85 
°V¨Info
.
bôs_≥r_pixñ
 = 32;

86 
°V¨Info
.
a˘iv©e
 = 
FB_ACTIVATE_NOW
;

87 
°V¨Info
.
xªs
 = stV¨Info.
xªs_vútuÆ
 = 
maxW
;

88 
°V¨Info
.
yªs
 = stV¨Info.
yªs_vútuÆ
 = 
maxH
;

89 
s32Rë
 = 
	`io˘l
(
p°Info
.
fd
, 
FBIOPUT_VSCREENINFO
, &
°V¨Info
);

90 if(
s32Rë
 < 0)

92 
	`SAMPLE_PRT
("PUT_VSCREENINFO failed!\n");

93 
	`˛o£
(
p°Info
.
fd
);

94  
HI_NULL
;

96 
p°Info
.
˘ækey
)

100 
°LayîInfo
.
BufMode
 = 
HIFB_LAYER_BUF_ONE
;

101 
°LayîInfo
.
u32Mask
 = 
HIFB_LAYERMASK_BUFMODE
;

107 
°LayîInfo
.
BufMode
 = 
HIFB_LAYER_BUF_DOUBLE
;

108 
°LayîInfo
.
u32Mask
 = 
HIFB_LAYERMASK_BUFMODE
;

114 
°LayîInfo
.
BufMode
 = 
HIFB_LAYER_BUF_NONE
;

115 
°LayîInfo
.
u32Mask
 = 
HIFB_LAYERMASK_BUFMODE
;

118 
s32Rë
 = 
	`io˘l
(
p°Info
.
fd
, 
FBIOPUT_LAYER_INFO
, &
°LayîInfo
);

119 if(
s32Rë
 < 0)

121 
	`SAMPLE_PRT
("PUT_LAYER_INFO failed!\n");

122 
	`˛o£
(
p°Info
.
fd
);

123  
HI_NULL
;

125 
bShow
 = 
HI_TRUE
;

126 i‡(
	`io˘l
(
p°Info
.
fd
, 
FBIOPUT_SHOW_HIFB
, &
bShow
) < 0)

128 
	`SAMPLE_PRT
("FBIOPUT_SHOW_HIFB failed!\n");

129 
	`˛o£
(
p°Info
.
fd
);

130  
HI_NULL
;

134 
	`¶ìp
(10);

136  
HI_NULL
;

137 
	}
}

139 
	$HisiFømBuf„r
()

141 
±hªad_t
 
phifb0
 = -1;

142 
	`±hªad_¸óã
(&
phifb0
, 0, 
SAMPLE_HIFB_REFRESH
, 
NULL
);

144 
	}
}

	@HiApp/HiApp.h

2 #i‚de‡
__HI_APP_H__


3 
	#__HI_APP_H__


	)

5 #ifde‡
__˝lu•lus


9 
	~<°dio.h
>

10 
	~<±hªad.h
>

11 
	~<uni°d.h
>

12 
	~<mem‹y.h
>

13 
	~<°dlib.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~"hifb.h
"

17 
	~"ßm∂e_comm.h
"

18 
	~"hi_tde_ty≥.h
"

21 
HisiFømBuf„r
();

23 #ifde‡
__˝lu•lus


	@HiSDK/common/loadbmp.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<°rög.h
>

5 
	~"lﬂdbmp.h
"

7 
OSD_COMP_INFO
 
	gs_OSDCompInfo
[
OSD_COLOR_FMT_BUTT
] = {{0, 4, 4, 4},

16 
ölöe
 
HI_U16
 
	$OSD_MAKECOLOR_U16
(
HI_U8
 
r
, HI_U8 
g
, HI_U8 
b
, 
OSD_COMP_INFO
 
compöfo
)

18 
HI_U8
 
r1
, 
g1
, 
b1
;

19 
HI_U16
 
pixñ
 = 0;

20 
HI_U32
 
tmp
 = 15;

22 
r1
 = 
g1
 = 
b1
 = 0;

23 
r1
 = 
r
 >> (8 - 
compöfo
.
æí
);

24 
g1
 = 
g
 >> (8 - 
compöfo
.
gÀn
);

25 
b1
 = 
b
 >> (8 - 
compöfo
.
bÀn
);

26 
compöfo
.
Æí
)

28 
pixñ
 |(1 << 
tmp
);

29 
tmp
 --;

30 
compöfo
.
Æí
--;

33 
pixñ
 |(
r1
 | (
g1
 << 
compöfo
.
bÀn
Ë| (
b1
 << (compöfo.bÀ¿+ compöfo.
gÀn
)));

34  
pixñ
;

35 
	}
}

37 
HI_S32
 
	$GëBmpInfo
(c⁄° *
fûíame
, 
OSD_BITMAPFILEHEADER
 *
pBmpFûeHódî


38 ,
OSD_BITMAPINFO
 *
pBmpInfo
)

40 
FILE
 *
pFûe
;

42 
HI_U16
 
bfTy≥
;

44 if(
NULL
 =
fûíame
)

46 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

50 if–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

52 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

56 ()
	`‰ód
(&
bfTy≥
, 1, (bfTy≥), 
pFûe
);

57 if(
bfTy≥
 != 0x4d42)

59 
	`¥ötf
("not bitmap file\n");

60 
	`f˛o£
(
pFûe
);

64 ()
	`‰ód
(
pBmpFûeHódî
, 1, (
OSD_BITMAPFILEHEADER
), 
pFûe
);

65 ()
	`‰ód
(
pBmpInfo
, 1, (
OSD_BITMAPINFO
), 
pFûe
);

66 
	`f˛o£
(
pFûe
);

69 
	}
}

71 
	$LﬂdBMP
(c⁄° *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
)

73 
FILE
 *
pFûe
;

74 
HI_U16
 
i
,
j
;

76 
HI_U32
 
w
,
h
;

77 
HI_U16
 
Bµ
;

78 
HI_U16
 
d°Bµ
;

80 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

81 
OSD_BITMAPINFO
 
bmpInfo
;

83 
HI_U8
 *
pOrigBMPBuf
;

84 
HI_U8
 *
pRGBBuf
;

85 
HI_U32
 
°ride
;

87 if(
NULL
 =
fûíame
)

89 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

93 if(
	`GëBmpInfo
(
fûíame
,&
bmpFûeHódî
,&
bmpInfo
)<0)

98 
Bµ
 = 
bmpInfo
.
bmiHódî
.
biBôCou¡
/8;

99 if(
Bµ
 < 2)

102 
	`¥ötf
("bitmap formatÇot supported!\n");

106 if(
bmpInfo
.
bmiHódî
.
biCom¥essi⁄
 != 0)

108 
	`¥ötf
("not support compressed bitmap file!\n");

112 if(
bmpInfo
.
bmiHódî
.
biHeight
 < 0)

114 
	`¥ötf
("bmpInfo.bmiHeader.biHeight < 0\n");

118 if–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

120 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

124 
pVideoLogo
->
width
 = (
HI_U16
)
bmpInfo
.
bmiHódî
.
biWidth
;

125 
pVideoLogo
->
height
 = (
HI_U16
)((
bmpInfo
.
bmiHódî
.
biHeight
>0)?bmpInfo.bmiHeader.biHeight:(-bmpInfo.bmiHeader.biHeight));

126 
w
 = 
pVideoLogo
->
width
;

127 
h
 = 
pVideoLogo
->
height
;

129 
°ride
 = 
w
*
Bµ
;

131 if(
°ride
%4)

133 
°ride
 = stride&&0xfffc + 4;

137 
pOrigBMPBuf
 = (
HI_U8
 *)
	`mÆloc
(
h
*
°ride
);

138 if(
NULL
 =
pOrigBMPBuf
)

140 
	`¥ötf
("notÉnough memoryÅo malloc!\n");

141 
	`f˛o£
(
pFûe
);

145 
pRGBBuf
 = 
pVideoLogo
->
pRGBBuf„r
;

147 
	`f£ek
(
pFûe
, 
bmpFûeHódî
.
bfOffBôs
, 0);

148 if(
	`‰ód
(
pOrigBMPBuf
, 1, 
h
*
°ride
, 
pFûe
) != (h*stride) )

150 
	`¥ötf
("‰ódÉº‹!löe:%d\n",
__LINE__
);

151 
	`≥º‹
("fread:");

154 if(
Bµ
 > 2)

156 
d°Bµ
 = 4;

160 
d°Bµ
 = 2;

163 if(0 =
pVideoLogo
->
°ride
)

165 
pVideoLogo
->
°ride
 =ÖVideoLogo->
width
 * 
d°Bµ
;

168 
i
=0; i<
h
; i++)

170 
j
=0; j<
w
; j++)

172 
	`mem˝y
(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*
d°Bµ
, 
pOrigBMPBuf
 + ((
h
-1)-i)*°ride+j*
Bµ
, Bpp);

174 if(
d°Bµ
 == 4)

177 *(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*
d°Bµ
 + 3) = 0x80;

183 
	`‰ì
(
pOrigBMPBuf
);

184 
pOrigBMPBuf
 = 
NULL
;

186 
	`f˛o£
(
pFûe
);

188 
	}
}

190 
	$LﬂdBMPEx
(c⁄° *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

192 
FILE
 *
pFûe
;

193 
HI_U16
 
i
,
j
;

195 
HI_U32
 
w
,
h
;

196 
HI_U16
 
Bµ
;

198 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

199 
OSD_BITMAPINFO
 
bmpInfo
;

201 
HI_U8
 *
pOrigBMPBuf
;

202 
HI_U8
 *
pRGBBuf
;

203 
HI_U32
 
°ride
;

204 
HI_U8
 
r
, 
g
, 
b
;

205 
HI_U8
 *
pSèπ
;

206 
HI_U16
 *
pD°
;

208 if(
NULL
 =
fûíame
)

210 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

214 if(
	`GëBmpInfo
(
fûíame
,&
bmpFûeHódî
,&
bmpInfo
)<0)

219 
Bµ
 = 
bmpInfo
.
bmiHódî
.
biBôCou¡
/8;

220 if(
Bµ
 < 2)

223 
	`¥ötf
("bitmap formatÇot supported!\n");

227 if(
bmpInfo
.
bmiHódî
.
biCom¥essi⁄
 != 0)

229 
	`¥ötf
("not support compressed bitmap file!\n");

233 if(
bmpInfo
.
bmiHódî
.
biHeight
 < 0)

235 
	`¥ötf
("bmpInfo.bmiHeader.biHeight < 0\n");

239 if–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

241 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

245 
pVideoLogo
->
width
 = (
HI_U16
)
bmpInfo
.
bmiHódî
.
biWidth
;

246 
pVideoLogo
->
height
 = (
HI_U16
)((
bmpInfo
.
bmiHódî
.
biHeight
>0)?bmpInfo.bmiHeader.biHeight:(-bmpInfo.bmiHeader.biHeight));

247 
w
 = 
pVideoLogo
->
width
;

248 
h
 = 
pVideoLogo
->
height
;

250 
°ride
 = 
w
*
Bµ
;

252 if(
°ride
%4)

254 
°ride
 = (stride&0xfffc) + 4;

259 
pOrigBMPBuf
 = (
HI_U8
 *)
	`mÆloc
(
h
*
°ride
);

260 if(
NULL
 =
pOrigBMPBuf
)

262 
	`¥ötf
("notÉnough memoryÅo malloc!\n");

263 
	`f˛o£
(
pFûe
);

267 
pRGBBuf
 = 
pVideoLogo
->
pRGBBuf„r
;

269 
	`f£ek
(
pFûe
, 
bmpFûeHódî
.
bfOffBôs
, 0);

270 if(
	`‰ód
(
pOrigBMPBuf
, 1, 
h
*
°ride
, 
pFûe
) != (h*stride) )

272 
	`¥ötf
("‰ód (%d*%dÎº‹!löe:%d\n",
h
,
°ride
,
__LINE__
);

273 
	`≥º‹
("fread:");

276 if(
íFmt
 >
OSD_COLOR_FMT_RGB888
)

278 
pVideoLogo
->
°ride
 =ÖVideoLogo->
width
 * 4;

282 
pVideoLogo
->
°ride
 =ÖVideoLogo->
width
 * 2;

285 
i
=0; i<
h
; i++)

287 
j
=0; j<
w
; j++)

289 if(
Bµ
 == 3)

291 
íFmt
)

293 
OSD_COLOR_FMT_RGB444
:

294 
OSD_COLOR_FMT_RGB555
:

295 
OSD_COLOR_FMT_RGB565
:

296 
OSD_COLOR_FMT_RGB1555
:

297 
OSD_COLOR_FMT_RGB4444
:

299 
pSèπ
 = 
pOrigBMPBuf
 + ((
h
-1)-
i
)*
°ride
+
j
*
Bµ
;

300 
pD°
 = (
HI_U16
*)(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*2);

301 
r
 = *(
pSèπ
);

302 
g
 = *(
pSèπ
 + 1);

303 
b
 = *(
pSèπ
 + 2);

304 *
pD°
 = 
	`OSD_MAKECOLOR_U16
(
r
, 
g
, 
b
, 
s_OSDCompInfo
[
íFmt
]);

307 
OSD_COLOR_FMT_RGB888
:

308 
OSD_COLOR_FMT_RGB8888
:

309 
	`mem˝y
(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*4, 
pOrigBMPBuf
 + ((
h
-1)-i)*°ride+j*
Bµ
, Bpp);

310 *(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*4 + 3) = 0xff;

314 
	`¥ötf
("fûe(%s),Üöe(%d),Çÿsuch f‹m©!\n", 
__FILE__
, 
__LINE__
);

318 if((
Bµ
 == 2)||(Bpp == 4))

320 
	`mem˝y
(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*
Bµ
, 
pOrigBMPBuf
 + ((
h
-1)-i)*stride+j*Bpp, Bpp);

327 
	`‰ì
(
pOrigBMPBuf
);

328 
pOrigBMPBuf
 = 
NULL
;

330 
	`f˛o£
(
pFûe
);

332 
	}
}

335 
	$LﬂdBMPC™vas
(c⁄° *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

337 
FILE
 *
pFûe
;

338 
HI_U16
 
i
,
j
;

340 
HI_U32
 
w
,
h
;

341 
HI_U16
 
Bµ
;

343 
OSD_BITMAPFILEHEADER
 
bmpFûeHódî
;

344 
OSD_BITMAPINFO
 
bmpInfo
;

346 
HI_U8
 *
pOrigBMPBuf
;

347 
HI_U8
 *
pRGBBuf
;

348 
HI_U32
 
°ride
;

349 
HI_U8
 
r
, 
g
, 
b
;

350 
HI_U8
 *
pSèπ
;

351 
HI_U16
 *
pD°
;

353 if(
NULL
 =
fûíame
)

355 
	`¥ötf
("OSD_LoadBMP: filename=NULL\n");

359 if(
	`GëBmpInfo
(
fûíame
,&
bmpFûeHódî
,&
bmpInfo
)<0)

364 
Bµ
 = 
bmpInfo
.
bmiHódî
.
biBôCou¡
/8;

365 if(
Bµ
 < 2)

368 
	`¥ötf
("bitmap formatÇot supported!\n");

372 if(
bmpInfo
.
bmiHódî
.
biCom¥essi⁄
 != 0)

374 
	`¥ötf
("not support compressed bitmap file!\n");

378 if(
bmpInfo
.
bmiHódî
.
biHeight
 < 0)

380 
	`¥ötf
("bmpInfo.bmiHeader.biHeight < 0\n");

384 if–(
pFûe
 = 
	`f›í
((*)
fûíame
, "rb")Ë=
NULL
)

386 
	`¥ötf
("O≥¿fûêÁûd:%s!\n", 
fûíame
);

390 
w
 = (
HI_U16
)
bmpInfo
.
bmiHódî
.
biWidth
;

391 
h
 = (
HI_U16
)((
bmpInfo
.
bmiHódî
.
biHeight
>0)?bmpInfo.bmiHeader.biHeight:(-bmpInfo.bmiHeader.biHeight));

393 
°ride
 = 
w
*
Bµ
;

396 if(
°ride
%4)

398 
°ride
 = (stride&0xfffc) + 4;

403 
pOrigBMPBuf
 = (
HI_U8
 *)
	`mÆloc
(
h
*
°ride
);

404 if(
NULL
 =
pOrigBMPBuf
)

406 
	`¥ötf
("notÉnough memoryÅo malloc!\n");

407 
	`f˛o£
(
pFûe
);

411 
pRGBBuf
 = 
pVideoLogo
->
pRGBBuf„r
;

413 if(
°ride
 > 
pVideoLogo
->stride)

415 
	`¥ötf
("Bôm≠'†°ride(%dËi†biggîÅh™ c™vas'†°ide(%d). Lﬂd bôm≠Éº‹!\n", 
°ride
, 
pVideoLogo
->stride);

419 if(
h
 > 
pVideoLogo
->
height
)

421 
	`¥ötf
("Bôm≠'†height(%dËi†biggîÅh™ c™vas'†height(%d). Lﬂd bôm≠Éº‹!\n", 
h
, 
pVideoLogo
->
height
);

425 if(
w
 > 
pVideoLogo
->
width
)

427 
	`¥ötf
("Bôm≠'†width(%dËi†biggîÅh™ c™vas'†width(%d). Lﬂd bôm≠Éº‹!\n", 
w
, 
pVideoLogo
->
width
);

431 
	`f£ek
(
pFûe
, 
bmpFûeHódî
.
bfOffBôs
, 0);

432 if(
	`‰ód
(
pOrigBMPBuf
, 1, 
h
*
°ride
, 
pFûe
) != (h*stride) )

434 
	`¥ötf
("‰ód (%d*%dÎº‹!löe:%d\n",
h
,
°ride
,
__LINE__
);

435 
	`≥º‹
("fread:");

438 
i
=0; i<
h
; i++)

440 
j
=0; j<
w
; j++)

442 if(
Bµ
 == 3)

444 
íFmt
)

446 
OSD_COLOR_FMT_RGB444
:

447 
OSD_COLOR_FMT_RGB555
:

448 
OSD_COLOR_FMT_RGB565
:

449 
OSD_COLOR_FMT_RGB1555
:

450 
OSD_COLOR_FMT_RGB4444
:

452 
pSèπ
 = 
pOrigBMPBuf
 + ((
h
-1)-
i
)*
°ride
 + 
j
*
Bµ
;

453 
pD°
 = (
HI_U16
*)(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*2);

454 
r
 = *(
pSèπ
);

455 
g
 = *(
pSèπ
 + 1);

456 
b
 = *(
pSèπ
 + 2);

459 *
pD°
 = 
	`OSD_MAKECOLOR_U16
(
r
, 
g
, 
b
, 
s_OSDCompInfo
[
íFmt
]);

463 
OSD_COLOR_FMT_RGB888
:

464 
OSD_COLOR_FMT_RGB8888
:

465 
	`mem˝y
(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*4, 
pOrigBMPBuf
 + ((
h
-1)-i)*°ride+j*
Bµ
, Bpp);

466 *(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*4 + 3) = 0xff;

470 
	`¥ötf
("fûe(%s),Üöe(%d),Çÿsuch f‹m©!\n", 
__FILE__
, 
__LINE__
);

474 if((
Bµ
 == 2)||(Bpp == 4))

476 
	`mem˝y
(
pRGBBuf
 + 
i
*
pVideoLogo
->
°ride
 + 
j
*
Bµ
, 
pOrigBMPBuf
 + ((
h
-1)-i)*stride+j*Bpp, Bpp);

483 
	`‰ì
(
pOrigBMPBuf
);

484 
pOrigBMPBuf
 = 
NULL
;

486 
	`f˛o£
(
pFûe
);

488 
	}
}

490 * 
	$GëExtName
(* 
fûíame
)

492 *
¥ë
 = 
NULL
;

493 
HI_U32
 
‚Lí
;

495 if(
NULL
 =
fûíame
)

497 
	`¥ötf
("filename can't beÇull!");

498  
NULL
;

501 
‚Lí
 = 
	`°æí
(
fûíame
);

502 
‚Lí
)

504 
¥ë
 = 
fûíame
 + 
‚Lí
;

505 if(*
¥ë
 == '.')

506  (
¥ë
+1);

508 
‚Lí
--;

511  
¥ë
;

512 
	}
}

515 
	$LﬂdImage
(c⁄° *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
)

517 * 
ext
 = 
	`GëExtName
((*)
fûíame
);

519 if(
	`°rcmp
(
ext
, "bmp") == 0)

521 if(0 !
	`LﬂdBMP
(
fûíame
, 
pVideoLogo
))

523 
	`¥ötf
("OSD_LoadBMPÉrror!\n");

529 
	`¥ötf
("not supported image file!\n");

534 
	}
}

536 
	$LﬂdImageEx
(c⁄° *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

538 * 
ext
 = 
	`GëExtName
((*)
fûíame
);

540 if(
	`°rcmp
(
ext
, "bmp") == 0)

542 if(0 !
	`LﬂdBMPEx
(
fûíame
, 
pVideoLogo
, 
íFmt
))

544 
	`¥ötf
("OSD_LoadBMPÉrror!\n");

550 
	`¥ötf
("not supported image file!\n");

555 
	}
}

558 
	$LﬂdC™vasEx
(c⁄° *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
, 
OSD_COLOR_FMT_E
 
íFmt
)

560 * 
ext
 = 
	`GëExtName
((*)
fûíame
);

562 if(
	`°rcmp
(
ext
, "bmp") == 0)

564 if(0 !
	`LﬂdBMPC™vas
(
fûíame
, 
pVideoLogo
, 
íFmt
))

566 
	`¥ötf
("OSD_LoadBMPÉrror!\n");

572 
	`¥ötf
("not supported image file!\n");

577 
	}
}

580 
HI_S32
 
	$LﬂdBôM≠2SurÁ˚
(c⁄° 
HI_CHAR
 *
pszFûeName
, c⁄° 
OSD_SURFACE_S
 *
p°SurÁ˚
, 
HI_U8
 *
pu8Vút
)

582 
OSD_LOGO_T
 
°Logo
;

583 
°Logo
.
°ride
 = 
p°SurÁ˚
->
u16Såide
;

584 
°Logo
.
pRGBBuf„r
 = 
pu8Vút
;

586  
	`LﬂdImage
(
pszFûeName
, &
°Logo
);

587 
	}
}

589 
HI_S32
 
	$Cª©eSurÁ˚ByBôM≠
(c⁄° 
HI_CHAR
 *
pszFûeName
, 
OSD_SURFACE_S
 *
p°SurÁ˚
, 
HI_U8
 *
pu8Vút
)

591 
OSD_LOGO_T
 
°Logo
;

592 
°Logo
.
pRGBBuf„r
 = 
pu8Vút
;

593 if(
	`LﬂdImageEx
(
pszFûeName
, &
°Logo
, 
p°SurÁ˚
->
íCﬁ‹Fmt
) < 0)

595 
	`¥ötf
("load bmpÉrror!\n");

599 
p°SurÁ˚
->
u16Height
 = 
°Logo
.
height
;

600 
p°SurÁ˚
->
u16Width
 = 
°Logo
.
width
;

601 
p°SurÁ˚
->
u16Såide
 = 
°Logo
.
°ride
;

604 
	}
}

607 
HI_S32
 
	$Cª©eSurÁ˚ByC™vas
(c⁄° 
HI_CHAR
 *
pszFûeName
, 
OSD_SURFACE_S
 *
p°SurÁ˚
, 
HI_U8
 *
pu8Vút
, 
HI_U32
 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32Såide
)

609 
OSD_LOGO_T
 
°Logo
;

610 
°Logo
.
pRGBBuf„r
 = 
pu8Vút
;

611 
°Logo
.
width
 = 
u32Width
;

612 
°Logo
.
height
 = 
u32Height
;

613 
°Logo
.
°ride
 = 
u32Såide
;

614 if(
	`LﬂdC™vasEx
(
pszFûeName
, &
°Logo
, 
p°SurÁ˚
->
íCﬁ‹Fmt
) < 0)

616 
	`¥ötf
("load bmpÉrror!\n");

620 
p°SurÁ˚
->
u16Height
 = 
u32Height
;

621 
p°SurÁ˚
->
u16Width
 = 
u32Width
;

622 
p°SurÁ˚
->
u16Såide
 = 
u32Såide
;

625 
	}
}

	@HiSDK/common/loadbmp.h

1 #i‚de‡ 
__LOAD_BMP_H__


2 
	#__LOAD_BMP_H__


	)

4 
	~"hi_ty≥.h
"

6 #ifde‡
__˝lu•lus


7 #i‡
__˝lu•lus


14 
	ehiOSD_COLOR_FMT_E


16 
OSD_COLOR_FMT_RGB444
 = 0,

17 
OSD_COLOR_FMT_RGB4444
 = 1,

18 
OSD_COLOR_FMT_RGB555
 = 2,

19 
OSD_COLOR_FMT_RGB565
 = 3,

20 
OSD_COLOR_FMT_RGB1555
 = 4,

21 
OSD_COLOR_FMT_RGB888
 = 6,

22 
OSD_COLOR_FMT_RGB8888
 = 7,

23 
OSD_COLOR_FMT_BUTT


24 }
	tOSD_COLOR_FMT_E
;

26 
	shiOSD_RGB_S


28 
HI_U8
 
u8B
;

29 
HI_U8
 
u8G
;

30 
HI_U8
 
u8R
;

31 
HI_U8
 
u8Re£rved
;

32 }
	tOSD_RGB_S
;

34 
	shiOSD_SURFACE_S


36 
OSD_COLOR_FMT_E
 
íCﬁ‹Fmt
;

37 
HI_U8
 *
pu8PhyAddr
;

38 
HI_U16
 
u16Height
;

39 
HI_U16
 
u16Width
;

40 
HI_U16
 
u16Såide
;

41 
HI_U16
 
u16Re£rved
;

42 }
	tOSD_SURFACE_S
;

44 
	sèg_OSD_Logo


46 
HI_U32
 
width
;

47 
HI_U32
 
height
;

48 
HI_U32
 
°ride
;

49 
HI_U8
 * 
pRGBBuf„r
;

50 }
	tOSD_LOGO_T
;

52 
	sèg_OSD_BITMAPINFOHEADER
{

53 
HI_U16
 
biSize
;

54 
HI_U32
 
biWidth
;

55 
HI_S32
 
biHeight
;

56 
HI_U16
 
biPœ√s
;

57 
HI_U16
 
biBôCou¡
;

58 
HI_U32
 
biCom¥essi⁄
;

59 
HI_U32
 
biSizeImage
;

60 
HI_U32
 
biXPñsPîMëî
;

61 
HI_U32
 
biYPñsPîMëî
;

62 
HI_U32
 
biCÃU£d
;

63 
HI_U32
 
biCÃImp‹è¡
;

64 } 
	tOSD_BITMAPINFOHEADER
;

66 
	sèg_OSD_BITMAPFILEHEADER
 {

67 
HI_U32
 
bfSize
;

68 
HI_U16
 
bfRe£rved1
;

69 
HI_U16
 
bfRe£rved2
;

70 
HI_U32
 
bfOffBôs
;

71 } 
	tOSD_BITMAPFILEHEADER
;

73 
	sèg_OSD_RGBQUAD
 {

74 
HI_U8
 
rgbBlue
;

75 
HI_U8
 
rgbGªí
;

76 
HI_U8
 
rgbRed
;

77 
HI_U8
 
rgbRe£rved
;

78 } 
	tOSD_RGBQUAD
;

80 
	sèg_OSD_BITMAPINFO
 {

81 
OSD_BITMAPINFOHEADER
 
bmiHódî
;

82 
OSD_RGBQUAD
 
bmiCﬁ‹s
[1];

83 } 
	tOSD_BITMAPINFO
;

85 
	shiOSD_COMPONENT_INFO_S
{

87 
Æí
;

88 
æí
;

89 
gÀn
;

90 
bÀn
;

91 }
	tOSD_COMP_INFO
;

93 
HI_S32
 
LﬂdImage
(c⁄° 
HI_CHAR
 *
fûíame
, 
OSD_LOGO_T
 *
pVideoLogo
);

94 
HI_S32
 
LﬂdBôM≠2SurÁ˚
(c⁄° 
HI_CHAR
 *
pszFûeName
, c⁄° 
OSD_SURFACE_S
 *
p°SurÁ˚
, 
HI_U8
 *
pu8Vút
);

95 
HI_S32
 
Cª©eSurÁ˚ByBôM≠
(c⁄° 
HI_CHAR
 *
pszFûeName
, 
OSD_SURFACE_S
 *
p°SurÁ˚
, 
HI_U8
 *
pu8Vút
);

96 
HI_S32
 
Cª©eSurÁ˚ByC™vas
(c⁄° 
HI_CHAR
 *
pszFûeName
, 
OSD_SURFACE_S
 *
p°SurÁ˚
, 
HI_U8
 *
pu8Vút
, 
HI_U32
 
u32Width
, HI_U32 
u32Height
, HI_U32 
u32Såide
);

97 
HI_S32
 
GëBmpInfo
(c⁄° 
HI_CHAR
 *
fûíame
, 
OSD_BITMAPFILEHEADER
 *
pBmpFûeHódî
,
OSD_BITMAPINFO
 *
pBmpInfo
);

100 #ifde‡
__˝lu•lus


101 #i‡
__˝lu•lus


	@HiSDK/common/sample_comm.h

9 #i‚de‡
__SAMPLE_COMM_H__


10 
	#__SAMPLE_COMM_H__


	)

12 
	~"hi_comm⁄.h
"

13 
	~"hi_comm_sys.h
"

14 
	~"hi_comm_vb.h
"

15 
	~"hi_comm_vi.h
"

16 
	~"hi_comm_vo.h
"

17 
	~"hi_comm_víc.h
"

18 
	~"hi_comm_vpss.h
"

19 
	~"hi_comm_vdec.h
"

20 
	~"hi_comm_vda.h
"

21 
	~"hi_comm_ªgi⁄.h
"

22 
	~"hi_comm_adec.h
"

23 
	~"hi_comm_´nc.h
"

24 
	~"hi_comm_ai.h
"

25 
	~"hi_comm_ao.h
"

26 
	~"hi_comm_aio.h
"

27 
	~"hi_comm_hdmi.h
"

28 
	~"hi_deföes.h
"

30 
	~"mpi_sys.h
"

31 
	~"mpi_vb.h
"

32 
	~"mpi_vi.h
"

33 
	~"mpi_vo.h
"

34 
	~"mpi_víc.h
"

35 
	~"mpi_vpss.h
"

36 
	~"mpi_vdec.h
"

37 
	~"mpi_vda.h
"

38 
	~"mpi_ªgi⁄.h
"

39 
	~"mpi_adec.h
"

40 
	~"mpi_´nc.h
"

41 
	~"mpi_ai.h
"

42 
	~"mpi_ao.h
"

43 
	~"mpi_hdmi.h
"

45 
	~"év320aic31.h
"

46 
	~"lﬂdbmp.h
"

49 #ifde‡
__˝lu•lus


50 #i‡
__˝lu•lus


58 
	#CHECK_CHN_RET
(
ex¥ess
,
Chn
,
«me
)\

60 
HI_S32
 
Rë
;\

61 
Rë
 = 
ex¥ess
;\

62 i‡(
HI_SUCCESS
 !
Rë
)\

64 
	`¥ötf
("\033[0;31m%†ch¿%d faûedáà%s: LINE: %d wôh %#x!\033[0;39m\n", 
«me
, 
Chn
, 
__FUNCTION__
, 
__LINE__
, 
Rë
);\

65 
	`fÊush
(
°dout
);\

66  
Rë
;\

68 }0)

	)

70 
	#CHECK_RET
(
ex¥ess
,
«me
)\

72 
HI_S32
 
Rë
;\

73 
Rë
 = 
ex¥ess
;\

74 i‡(
HI_SUCCESS
 !
Rë
)\

76 
	`¥ötf
("\033[0;31m%†Áûedáà%s: LINE: %d wôh %#x!\033[0;39m\n", 
«me
, 
__FUNCTION__
, 
__LINE__
, 
Rë
);\

77  
Rë
;\

79 }0)

	)

82 
	#SAMPLE_PIXEL_FORMAT
 
PIXEL_FORMAT_YUV_SEMIPLANAR_420


	)

84 
	#TW2865_FILE
 "/dev/tw2865dev"

	)

85 
	#TW2960_FILE
 "/dev/tw2960dev"

	)

86 
	#TLV320_FILE
 "/dev/év320aic31"

	)

88 
	#SAMPLE_VO_DEV_DHD0
 0

	)

89 
	#SAMPLE_VO_DEV_DHD1
 1

	)

90 
	#SAMPLE_VO_DEV_DSD0
 2

	)

91 
	#SAMPLE_VO_DEV_DSD1
 -1

	)

93 
	#SAMPLE_VO_LAYER_VHD0
 0

	)

94 
	#SAMPLE_VO_LAYER_VHD1
 1

	)

95 
	#SAMPLE_VO_LAYER_VSD0
 3

	)

96 
	#SAMPLE_VO_LAYER_VPIP
 2

	)

98 
	#SAMPLE_VO_WBC_BASE
 0

	)

99 
	#SAMPLE_VO_LAYER_PRIORITY_BASE
 0

	)

100 
	#SAMPLE_VO_LAYER_PRIORITY_PIP
 1

	)

101 
	#GRAPHICS_LAYER_HC0
 3

	)

103 
	#SAMPLE_AUDIO_PTNUMPERFRM
 320

	)

104 
	#SAMPLE_AUDIO_HDMI_AO_DEV
 1

	)

105 
	#SAMPLE_AUDIO_AI_DEV
 0

	)

106 
	#SAMPLE_AUDIO_AO_DEV
 0

	)

108 
	#SAMPLE_CIF_H264_PATH
 "CIF.h264"

	)

109 
	#SAMPLE_1080P_H264_PATH
 "1080P.h264"

	)

110 
	#SAMPLE_1080P_MPEG4_PATH
 "../comm⁄/1080P.m≥g4"

	)

111 
	#SAMPLE_FIELD_H264_PATH
 "../comm⁄/D1_fõld.h264"

	)

112 
	#SAMPLE_1080P_JPEG_PATH
 "../comm⁄/1080P.jpg"

	)

115 
	#ALIGN_UP
(
x
, 
a
Ë((x+a-1)&(~◊-1)))

	)

116 
	#ALIGN_BACK
(
x
, 
a
Ë(◊Ë* (((xË/ (a))))

	)

118 
	#SAMPLE_SYS_ALIGN_WIDTH
 16

	)

119 
	#VO_BKGRD_BLUE
 0x0000FF

	)

120 
	#VO_BKGRD_BLACK
 0x000000

	)

122 
	#HD_WIDTH
 1920

	)

123 
	#HD_HEIGHT
 1080

	)

125 
	#D1_WIDTH
 720

	)

126 
	#D1_HEIGHT
 576

	)

128 
	#SAMPLE_PRT
(
fmt
...) \

130 
	`¥ötf
("[%s]-%d: ", 
__FUNCTION__
, 
__LINE__
);\

131 
	`¥ötf
(
fmt
);\

132 }0)

	)

135 
	eßm∂e_vo_mode_e


137 
VO_MODE_1MUX
 = 0,

138 
VO_MODE_4MUX
 = 1,

139 
VO_MODE_9MUX
 = 2,

140 
VO_MODE_16MUX
 = 3,

141 
VO_MODE_25MUX
 = 4,

142 
VO_MODE_36MUX
 = 5,

143 
VO_MODE_64MUX
 = 6,

144 
VO_MODE_BUTT


145 }
	tSAMPLE_VO_MODE_E
;

147 
	shißm∂e_MEMBUF_S


149 
VB_BLK
 
hBlock
;

150 
VB_POOL
 
hPoﬁ
;

151 
HI_U32
 
u32PoﬁId
;

153 
HI_U32
 
u32PhyAddr
;

154 
HI_U8
 *
pVúAddr
;

155 
HI_S32
 
s32Mdev
;

156 } 
	tSAMPLE_MEMBUF_S
;

158 
	eßm∂e_rc_e


160 
SAMPLE_RC_CBR
 = 0,

161 
SAMPLE_RC_VBR
,

162 
SAMPLE_RC_FIXQP


163 }
	tSAMPLE_RC_E
;

165 
	eßm∂e_rgn_ch™ge_ty≥_e


167 
RGN_CHANGE_TYPE_FGALPHA
 = 0,

168 
RGN_CHANGE_TYPE_BGALPHA
,

169 
RGN_CHANGE_TYPE_LAYER


170 }
	tSAMPLE_RGN_CHANGE_TYPE_EN
;

172 
	sßm∂e_vo_∑øm_s


174 
VO_DEV
 
VoDev
;

175 
HI_CHAR
 
acMmzName
[20];

176 
HI_U32
 
u32WndNum
;

177 
SAMPLE_VO_MODE_E
 
íVoMode
;

178 
VO_PUB_ATTR_S
 
°VoPubAâr
;

179 
HI_BOOL
 
bVpssBöd
;

180 }
	tSAMPLE_VO_PARAM_S
;

182 
	sßm∂e_víc_gë°ªam_s


184 
HI_BOOL
 
bThªadSèπ
;

185 
HI_S32
 
s32C¡
;

186 }
	tSAMPLE_VENC_GETSTREAM_PARA_S
;

190 
HIFB_LAYER_0
 = 0x0,

191 
HIFB_LAYER_1
,

192 
HIFB_LAYER_2
,

193 
HIFB_LAYER_CURSOR_0
,

194 
HIFB_LAYER_ID_BUTT


195 } 
	tHIFB_LAYER_ID_E
;

197 
	ehiVdecThªadCålSig«l_E


199 
VDEC_CTRL_START
,

200 
VDEC_CTRL_PAUSE
,

201 
VDEC_CTRL_STOP
,

202 }
	tVdecThªadCålSig«l_E
;

204 
	shiVdecThªadP¨am


206 
HI_S32
 
s32ChnId
;

207 
PAYLOAD_TYPE_E
 
íTy≥
;

208 
HI_CHAR
 
cFûeName
[100];

209 
HI_S32
 
s32SåómMode
;

210 
HI_S32
 
s32MûliSec
;

211 
HI_S32
 
s32MöBufSize
;

212 
HI_S32
 
s32I¡îvÆTime
;

213 
VdecThªadCålSig«l_E
 
eCålSöÆ
;

214 
HI_U64
 
u64PtsInô
;

215 
HI_U64
 
u64PtsIn¸ó£
;

216 
HI_BOOL
 
bLo›Síd
;

217 }
	tVdecThªadP¨am
;

224 
HI_S32
 
SAMPLE_COMM_SYS_GëPicSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
SIZE_S
 *
p°Size
);

225 
HI_U32
 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
PIXEL_FORMAT_E
 
íPixFmt
, HI_U32 
u32AlignWidth
);

226 
HI_S32
 
SAMPLE_COMM_SYS_MemC⁄fig
(
HI_VOID
);

227 
HI_VOID
 
SAMPLE_COMM_SYS_Exô
();

228 
HI_S32
 
SAMPLE_COMM_SYS_Inô
(
VB_CONF_S
 *
p°VbC⁄f
);

229 
HI_S32
 
SAMPLE_COMM_SYS_Paylﬂd2FûePo°fix
(
PAYLOAD_TYPE_E
 
íPaylﬂd
, 
HI_CHAR
* 
szFûePo°fix
);

231 
HI_VOID
 
SAMPLE_COMM_VDEC_Sysc⁄f
(
VB_CONF_S
 *
p°VbC⁄f
, 
SIZE_S
 *
p°Size
);

232 
HI_VOID
 
SAMPLE_COMM_VDEC_ModCommPoﬁC⁄f
(
VB_CONF_S
 *
p°ModVbC⁄f
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
SIZE_S
 *
p°Size
);

233 
HI_S32
 
SAMPLE_COMM_VDEC_InôModCommVb
(
VB_CONF_S
 *
p°ModVbC⁄f
);

234 
HI_VOID
 
SAMPLE_COMM_VDEC_ChnAâr
(
HI_S32
 
s32ChnNum
, 
VDEC_CHN_ATTR_S
 *
p°VdecChnAâr
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
SIZE_S
 *
p°Size
);

235 
HI_VOID
 
SAMPLE_COMM_VDEC_VpssGΩAâr
(
HI_S32
 
s32ChnNum
, 
VPSS_GRP_ATTR_S
 *
p°VpssGΩAâr
, 
SIZE_S
 *
p°Size
);

236 
HI_VOID
 
SAMPLE_COMM_VDEC_VoAâr
(
HI_S32
 
s32ChnNum
, 
VO_DEV
 
VoDev
 ,
VO_PUB_ATTR_S
 *
p°VoPubAâr
, 
VO_VIDEO_LAYER_ATTR_S
 *
p°VoLayîAâr
);

237 
HI_VOID
 
SAMPLE_COMM_VDEC_ThªadP¨am
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
VDEC_CHN_ATTR_S
 *
p°VdecChnAâr
, *
pSåómFûeName
);

238 
HI_VOID
 
SAMPLE_COMM_VDEC_CmdCål
(
HI_S32
 
s32ChnNum
,
VdecThªadP¨am
 *
p°VdecSíd
);

239 
HI_VOID
 
SAMPLE_COMM_VDEC_SèπSídSåóm
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
);

240 
HI_VOID
 
SAMPLE_COMM_VDEC_St›SídSåóm
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
);

241 
HI_VOID
* 
SAMPLE_COMM_VDEC_SídSåóm
(HI_VOID *
pArgs
);

242 
HI_VOID
 
SAMPLE_COMM_VDEC_SèπGëLuma
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
);

243 
HI_VOID
 
SAMPLE_COMM_VDEC_St›GëLuma
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
);

244 
HI_VOID
* 
SAMPLE_COMM_VDEC_GëChnLuma
(HI_VOID *
pArgs
);

245 
HI_S32
 
SAMPLE_COMM_VDEC_Sèπ
(HI_S32 
s32ChnNum
, 
VDEC_CHN_ATTR_S
 *
p°Aâr
);

246 
HI_S32
 
SAMPLE_COMM_VDEC_St›
(HI_S32 
s32ChnNum
);

247 
HI_S32
 
SAMPLE_COMM_VDEC_BödVpss
(
VDEC_CHN
 
VdChn
, 
VPSS_GRP
 
VpssGΩ
);

248 
HI_S32
 
SAMPLE_COMM_VDEC_UnBödVpss
(
VDEC_CHN
 
VdChn
, 
VPSS_GRP
 
VpssGΩ
);

249 
HI_S32
 
SAMPLE_COMM_VDEC_BödVo
(
VDEC_CHN
 
VdChn
, 
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

250 
HI_S32
 
SAMPLE_COMM_VDEC_UnBödVo
(
VDEC_CHN
 
VdChn
, 
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

251 
HI_S32
 
SAMPLE_COMM_VDEC_BödVíc
(
VDEC_CHN
 
VdChn
,
VENC_CHN
 
VeChn
);

252 
HI_S32
 
SAMPLE_COMM_VDEC_UnBödVíc
(
VDEC_CHN
 
VdChn
,
VENC_CHN
 
VeChn
);

253 
HI_S32
 
SAMPLE_COMM_VDEC_MemC⁄fig
(
HI_VOID
);

255 
HI_S32
 
SAMPLE_COMM_VPSS_MemC⁄fig
();

256 
HI_S32
 
SAMPLE_COMM_VPSS_Sèπ
(HI_S32 
s32GΩC¡
, 
SIZE_S
 *
p°Size
, HI_S32 
s32ChnC¡
,
VPSS_GRP_ATTR_S
 *
p°VpssGΩAâr
);

257 
HI_S32
 
SAMPLE_COMM_VPSS_St›
(HI_S32 
s32GΩC¡
, HI_S32 
s32ChnC¡
) ;

258 
HI_S32
 
SAMPLE_COMM_DißbÀVpssPªSˇÀ
(
VPSS_GRP
 
VpssGΩ
,
SIZE_S
 
°Size
);

259 
HI_S32
 
SAMPLE_COMM_E«bÀVpssPªSˇÀ
(
VPSS_GRP
 
VpssGΩ
,
SIZE_S
 
°Size
);

261 
HI_S32
 
SAMPLE_COMM_VO_MemC⁄fig
(
VO_DEV
 
VoDev
, 
HI_CHAR
 *
pcMmzName
);

262 
HI_S32
 
SAMPLE_COMM_VO_SèπDev
(
VO_DEV
 
VoDev
, 
VO_PUB_ATTR_S
 *
p°PubAâr
);

263 
HI_S32
 
SAMPLE_COMM_VO_St›Dev
(
VO_DEV
 
VoDev
);

264 
HI_S32
 
SAMPLE_COMM_VO_SèπLayî
(
VO_LAYER
 
VoLayî
,c⁄° 
VO_VIDEO_LAYER_ATTR_S
 *
p°LayîAâr
);

265 
HI_S32
 
SAMPLE_COMM_VO_St›Layî
(
VO_LAYER
 
VoLayî
);

266 
HI_S32
 
SAMPLE_COMM_VO_SèπChn
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
);

267 
HI_S32
 
SAMPLE_COMM_VO_SèπFuŒSªí
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
, HI_S32 
s32ChnNum
);

269 
HI_S32
 
SAMPLE_COMM_VO_St›Chn
(
VO_LAYER
 
VoLayî
, HI_S32 
s32ChnNum
);

270 
HI_S32
 
SAMPLE_COMM_VO_SèπWbc
(
VO_WBC
 
VoWbc
,c⁄° 
VO_WBC_ATTR_S
 *
p°WbcAâr
);

271 
HI_S32
 
SAMPLE_COMM_VO_St›Wbc
(
VO_WBC
 
VoWbc
);

272 
HI_S32
 
SAMPLE_COMM_WBC_BödVo
(
VO_WBC
 
VoWbc
,
VO_WBC_SOURCE_S
 *
p°WbcSour˚
);

273 
HI_S32
 
SAMPLE_COMM_VO_BödVoWbc
(
VO_DEV
 
VoWbcDev
, 
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

274 
HI_S32
 
SAMPLE_COMM_VO_UnBödVoWbc
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

275 
HI_S32
 
SAMPLE_COMM_VO_BödVpss
(
VO_LAYER
 
VoLayî
,
VO_CHN
 
VoChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
);

276 
HI_S32
 
SAMPLE_COMM_VO_UnBödVpss
(
VO_LAYER
 
VoLayî
,
VO_CHN
 
VoChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
);

277 
HI_S32
 
SAMPLE_COMM_VO_BödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VI_CHN
 
ViChn
);

278 
HI_S32
 
SAMPLE_COMM_VO_UnBödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

279 
HI_S32
 
SAMPLE_COMM_VO_GëWH
(
VO_INTF_SYNC_E
 
íI¡fSync
,
HI_U32
 *
pu32W
,HI_U32 *
pu32H
,HI_U32 *
pu32Frm
);

280 
HI_S32
 
SAMPLE_COMM_VO_HdmiSèπ
(
VO_INTF_SYNC_E
 
íI¡fSync
);

281 
HI_S32
 
SAMPLE_COMM_VO_HdmiSt›
(
HI_VOID
);

283 
HI_S32
 
SAMPLE_COMM_VENC_MemC⁄fig
(
HI_VOID
);

284 
HI_S32
 
SAMPLE_COMM_VENC_Sèπ
(
VENC_CHN
 
VícChn
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íSize
, 
SAMPLE_RC_E
 
íRcMode
);

285 
HI_S32
 
SAMPLE_COMM_VENC_St›
(
VENC_CHN
 
VícChn
);

286 
HI_S32
 
SAMPLE_COMM_VENC_S«pSèπ
(
VENC_CHN
 
VícChn
, 
SIZE_S
 *
p°Size
);

287 
HI_S32
 
SAMPLE_COMM_VENC_S«pPro˚ss
(
VENC_CHN
 
VícChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
);

288 
HI_S32
 
SAMPLE_COMM_VENC_S«pSt›
(
VENC_CHN
 
VícChn
);

289 
HI_S32
 
SAMPLE_COMM_VENC_SèπGëSåóm
(HI_S32 
s32C¡
);

290 
HI_S32
 
SAMPLE_COMM_VENC_St›GëSåóm
();

291 
HI_S32
 
SAMPLE_COMM_VENC_BödVpss
(
VENC_CHN
 
VícChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
);

292 
HI_S32
 
SAMPLE_COMM_VENC_UnBödVpss
(
VENC_CHN
 
VícChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
);

293 
HI_S32
 
SAMPLE_COMM_VENC_BödVo
(
VO_DEV
 
VoDev
,
VO_CHN
 
VoChn
,
VENC_CHN
 
VeChn
);

294 
HI_S32
 
SAMPLE_COMM_VENC_UnBödVo
(
VENC_CHN
 
GΩChn
,
VO_DEV
 
VoDev
,
VO_CHN
 
VoChn
);

295 
HI_VOID
 
SAMPLE_COMM_VENC_RódO√Føme
–
FILE
 * 
Â
, 
HI_U8
 * 
pY
, HI_U8 * 
pU
, HI_U8 * 
pV
,

296 
HI_U32
 
width
, HI_U32 
height
, HI_U32 
°ride
, HI_U32 
°ride2
);

297 
HI_S32
 
SAMPLE_COMM_VENC_PœnToSemi
(
HI_U8
 *
pY
, HI_S32 
ySåide
,

298 
HI_U8
 *
pU
, 
HI_S32
 
uSåide
,

299 
HI_U8
 *
pV
, 
HI_S32
 
vSåide
,

300 
HI_S32
 
picWidth
, HI_S32 
picHeight
);

302 
HI_S32
 
SAMPLE_COMM_VDA_MdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
 *
p°Size
);

303 
HI_S32
 
SAMPLE_COMM_VDA_OdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
 *
p°Size
);

304 
HI_VOID
 
SAMPLE_COMM_VDA_MdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
);

305 
HI_VOID
 
SAMPLE_COMM_VDA_OdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
);

307 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAo
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
);

308 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAíc
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
);

309 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAícAdec
(
AENC_CHN
 
AeChn
, 
ADEC_CHN
 
AdChn
, 
FILE
 *
pAecFd
);

310 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdFûeAdec
(
ADEC_CHN
 
AdChn
, 
FILE
 *
pAdcFd
);

311 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAoVﬁCål
(
AUDIO_DEV
 
AiDev
);

312 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
);

313 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAícAdec
(
AENC_CHN
 
AeChn
);

314 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdFûeAdec
(
ADEC_CHN
 
AdChn
);

315 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAoVﬁCål
(
AUDIO_DEV
 
AiDev
);

316 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
);

317 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
);

318 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
);

319 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
);

320 
HI_S32
 
SAMPLE_COMM_AUDIO_AícBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
);

321 
HI_S32
 
SAMPLE_COMM_AUDIO_AícUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
);

322 
HI_S32
 
SAMPLE_COMM_AUDIO_CfgAcodec
(
AIO_ATTR_S
 *
p°AioAâr
, 
HI_BOOL
 
bMacIn
);

323 
HI_S32
 
SAMPLE_COMM_AUDIO_DißbÀAcodec
();

324 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAi
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

325 
AIO_ATTR_S
 *
p°AioAâr
, 
HI_BOOL
 
bAƒEn
, 
AUDIO_RESAMPLE_ATTR_S
 *
p°AiReSmpAâr
);

326 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ai
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

327 
HI_BOOL
 
bAƒEn
, HI_BOOL 
bReßm∂eEn
);

328 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAo
(
AUDIO_DEV
 
AoDevId
, 
AO_CHN
 
AoChn
,

329 
AIO_ATTR_S
 *
p°AioAâr
, 
AUDIO_RESAMPLE_ATTR_S
 *
p°AiReSmpAâr
);

330 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ao
(
AUDIO_DEV
 
AoDevId
, 
AO_CHN
 
AoChn
, 
HI_BOOL
 
bReßm∂eEn
);

331 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAíc
(HI_S32 
s32AícChnC¡
, 
PAYLOAD_TYPE_E
 
íTy≥
);

332 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Aíc
(HI_S32 
s32AícChnC¡
);

333 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAdec
(
ADEC_CHN
 
AdChn
, 
PAYLOAD_TYPE_E
 
íTy≥
);

334 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Adec
(
ADEC_CHN
 
AdChn
);

336 #ifde‡
__˝lu•lus


337 #i‡
__˝lu•lus


	@HiSDK/common/sample_comm_audio.c

8 
	~<°dlib.h
>

9 
	~<°dio.h
>

10 
	~<°rög.h
>

11 
	~<uni°d.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<sys/io˘l.h
>

15 
	~<f˙é.h
>

16 
	~<±hªad.h
>

17 
	~<î∫o.h
>

18 
	~<sig«l.h
>

20 
	~"ßm∂e_comm.h
"

21 
	~"acodec.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
	#ACODEC_FILE
 "/dev/acodec"

	)

31 
	#AUDIO_ADPCM_TYPE
 
ADPCM_TYPE_DVI4


	)

32 
	#G726_BPS
 
MEDIA_G726_40K


	)

34 
	sègSAMPLE_AENC_S


36 
HI_BOOL
 
bSèπ
;

37 
±hªad_t
 
°AícPid
;

38 
HI_S32
 
AeChn
;

39 
HI_S32
 
AdChn
;

40 
FILE
 *
pfd
;

41 
HI_BOOL
 
bSídAdChn
;

42 } 
	tSAMPLE_AENC_S
;

44 
	sègSAMPLE_AI_S


46 
HI_BOOL
 
bSèπ
;

47 
HI_S32
 
AiDev
;

48 
HI_S32
 
AiChn
;

49 
HI_S32
 
AícChn
;

50 
HI_S32
 
AoDev
;

51 
HI_S32
 
AoChn
;

52 
HI_BOOL
 
bSídAíc
;

53 
HI_BOOL
 
bSídAo
;

54 
±hªad_t
 
°AiPid
;

55 } 
	tSAMPLE_AI_S
;

57 
	sègSAMPLE_ADEC_S


59 
HI_BOOL
 
bSèπ
;

60 
HI_S32
 
AdChn
;

61 
FILE
 *
pfd
;

62 
±hªad_t
 
°AdPid
;

63 } 
	tSAMPLE_ADEC_S
;

65 
	sègSAMPLE_AO_S


67 
AUDIO_DEV
 
AoDev
;

68 
HI_BOOL
 
bSèπ
;

69 
±hªad_t
 
°AoPid
;

70 }
	tSAMPLE_AO_S
;

72 
SAMPLE_AI_S
 
gs_°Sam∂eAi
[
AI_DEV_MAX_NUM
*
AIO_MAX_CHN_NUM
];

73 
SAMPLE_AENC_S
 
gs_°Sam∂eAíc
[
AENC_MAX_CHN_NUM
];

74 
SAMPLE_ADEC_S
 
gs_°Sam∂eAdec
[
ADEC_MAX_CHN_NUM
];

75 
SAMPLE_AO_S
 
gs_°Sam∂eAo
[
AO_DEV_MAX_NUM
];

78 
HI_S32
 
SAMPLE_TW2865_SëF‹m©
(
AIO_MODE_E
 
íW‹kMode
)

81 
fd
;

82 
tw2865_audio_f‹m©
 
audio_Árm©
;

84 
fd
 = 
›í
(
TW2865_FILE
, 
O_RDWR
);

85 i‡(
fd
 < 0)

87 
¥ötf
("›í %†Áû\n", 
TW2865_FILE
);

91 i‡(
AIO_MODE_PCM_SLAVE_STD
 =
íW‹kMode


92 || 
AIO_MODE_PCM_SLAVE_NSTD
 =
íW‹kMode


93 || 
AIO_MODE_PCM_MASTER_STD
 =
íW‹kMode


94 || 
AIO_MODE_PCM_MASTER_NSTD
 =
íW‹kMode
)

96 
audio_Árm©
.
f‹m©
 = 1;

100 
audio_Árm©
.
f‹m©
 = 0;

103 i‡(
io˘l
(
fd
, 
TW2865_SET_AUDIO_FORMAT
, &
audio_Árm©
))

105 
¥ötf
("ioctl TW2865_SET_AUDIO_FORMATÉrr !!! \n");

106 
˛o£
(
fd
);

110 
˛o£
(
fd
);

115 
HI_S32
 
SAMPLE_TW2865_CfgAudio
(
AUDIO_SAMPLE_RATE_E
 
íSam∂e
)

118 
fd
;

119 
tw2865_audio_ßm∂î©e
 
ßm∂î©e
;

121 
fd
 = 
›í
(
TW2865_FILE
, 
O_RDWR
);

122 i‡(
fd
 < 0)

124 
¥ötf
("›í %†Áû\n", 
TW2865_FILE
);

128 i‡(
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

130 
ßm∂î©e
 = 
TW2865_SAMPLE_RATE_8000
;

132 i‡(
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

134 
ßm∂î©e
 = 
TW2865_SAMPLE_RATE_16000
;

136 i‡(
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

138 
ßm∂î©e
 = 
TW2865_SAMPLE_RATE_32000
;

140 i‡(
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

142 
ßm∂î©e
 = 
TW2865_SAMPLE_RATE_44100
;

144 i‡(
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
)

146 
ßm∂î©e
 = 
TW2865_SAMPLE_RATE_48000
;

150 
¥ötf
("func(%s)Üine(%d):Åw2865Çot supportÉnSample:%d\n",

151 
__FUNCTION__
, 
__LINE__
, 
íSam∂e
);

155 i‡(
io˘l
(
fd
, 
TW2865_SET_SAMPLE_RATE
, &
ßm∂î©e
))

157 
¥ötf
("ioctl TW2865_SET_SAMPLE_RATEÉrr !!! \n");

158 
˛o£
(
fd
);

162 
¥ötf
("func(%s)Üine(%d):Åw2865 startÉnSample(%d) ok\n",

163 
__FUNCTION__
, 
__LINE__
, 
íSam∂e
);

165 
˛o£
(
fd
);

170 
HI_S32
 
SAMPLE_TW2865_SëBôwidth
(
AUDIO_BIT_WIDTH_E
 
íBôwidth
)

173 
fd
;

174 
tw2865_audio_bôwidth
 
íTw2865Bôwidth
;

176 
íBôwidth
)

178 
AUDIO_BIT_WIDTH_8
:

179 
íTw2865Bôwidth
 = 
TW2865_AUDIO_BITWIDTH_8
;

182 
AUDIO_BIT_WIDTH_16
:

183 
íTw2865Bôwidth
 = 
TW2865_AUDIO_BITWIDTH_16
;

187 
¥ötf
("func(%s)Üine(%d):Åw2865Çot support bitwidth %d!\n",

188 
__FUNCTION__
, 
__LINE__
, 
íBôwidth
);

189  
HI_FAILURE
;

192 
fd
 = 
›í
(
TW2865_FILE
, 
O_RDWR
);

193 i‡(
fd
 < 0)

195 
¥ötf
("›í %†Áû\n", 
TW2865_FILE
);

196  
HI_FAILURE
;

199 i‡(
io˘l
(
fd
, 
TW2865_SET_AUDIO_BITWIDTH
, &
íTw2865Bôwidth
))

201 
¥ötf
("func(%s)Üine(%d): ioctl TW2865_SET_AUDIO_BITWIDTHÉrr!\n",

202 
__FUNCTION__
, 
__LINE__
);

203 
˛o£
(
fd
);

204  
HI_FAILURE
;

206 
˛o£
(
fd
);

208  
HI_SUCCESS
;

211 
HI_S32
 
SAMPLE_Tlv320_CfgAudio
(
AIO_MODE_E
 
íW‹kmode
,
AUDIO_SAMPLE_RATE_E
 
íSam∂e
)

213 
HI_S32
 
ßm∂e
;

214 
HI_S32
 
vﬁ
 = 0x100;

215 
Audio_Cål
 
audio_˘æ
;

216 
s_fdTlv
 = -1;

217 
HI_BOOL
 
bPCMmode
 = 
HI_FALSE
;

218 
HI_BOOL
 
bMa°î
 = 
HI_TRUE
;

219 
HI_BOOL
 
bPCMStd
 = 
HI_FALSE
;

222 
HI_BOOL
 
b44100HzSîõs
 = 
HI_FALSE
;

224 i‡(
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

226 
ßm∂e
 = 
AC31_SET_8K_SAMPLERATE
;

228 i‡(
AUDIO_SAMPLE_RATE_12000
 =
íSam∂e
)

230 
ßm∂e
 = 
AC31_SET_12K_SAMPLERATE
;

232 i‡(
AUDIO_SAMPLE_RATE_11025
 =
íSam∂e
)

234 
b44100HzSîõs
 = 
HI_TRUE
;

235 
ßm∂e
 = 
AC31_SET_11_025K_SAMPLERATE
;

237 i‡(
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

239 
ßm∂e
 = 
AC31_SET_16K_SAMPLERATE
;

241 i‡(
AUDIO_SAMPLE_RATE_22050
 =
íSam∂e
)

243 
b44100HzSîõs
 = 
HI_TRUE
;

244 
ßm∂e
 = 
AC31_SET_22_05K_SAMPLERATE
;

246 i‡(
AUDIO_SAMPLE_RATE_24000
 =
íSam∂e
)

248 
ßm∂e
 = 
AC31_SET_24K_SAMPLERATE
;

250 i‡(
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

252 
ßm∂e
 = 
AC31_SET_32K_SAMPLERATE
;

254 i‡(
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

256 
b44100HzSîõs
 = 
HI_TRUE
;

257 
ßm∂e
 = 
AC31_SET_44_1K_SAMPLERATE
;

259 i‡(
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
)

261 
ßm∂e
 = 
AC31_SET_48K_SAMPLERATE
;

265 
¥ötf
("SAMPLE_Tlv320_CfgAudio(),ÇŸ suµ‹àíSam∂e:%d\n",
íSam∂e
);

269 if(
AIO_MODE_I2S_MASTER
 =
íW‹kmode
)

271 
bPCMmode
 = 
HI_FALSE
;

272 
bMa°î
 = 
HI_FALSE
;

274 if(
AIO_MODE_I2S_SLAVE
 =
íW‹kmode
)

276 
bPCMmode
 = 
HI_FALSE
;

277 
bMa°î
 = 
HI_TRUE
;

279 if((
AIO_MODE_PCM_MASTER_NSTD
 =
íW‹kmode
)||(
AIO_MODE_PCM_MASTER_STD
 ==ÉnWorkmode))

281 
bPCMmode
 = 
HI_TRUE
;

282 
bMa°î
 = 
HI_FALSE
;

284 if((
AIO_MODE_PCM_SLAVE_NSTD
 =
íW‹kmode
)||(
AIO_MODE_PCM_SLAVE_STD
 ==ÉnWorkmode))

286 
bPCMmode
 = 
HI_TRUE
;

287 
bMa°î
 = 
HI_TRUE
;

291 
¥ötf
("SAMPLE_Tlv320_CfgAudio(),ÇŸ suµ‹àw‹kmode:%d\n\n",
íW‹kmode
);

294 
s_fdTlv
 = 
›í
(
TLV320_FILE
,
O_RDWR
);

295 i‡(
s_fdTlv
 < 0)

297 
¥ötf
("ˇn'à›íÅlv320,%s\n", 
TLV320_FILE
);

301 
audio_˘æ
.
chù_num
 = 0;

302 i‡(
io˘l
(
s_fdTlv
,
SOFT_RESET
,&
audio_˘æ
))

304 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "tlv320aic31Ñeset failed");

308 
audio_˘æ
.
˘æ_mode
 = 
bMa°î
;

309 
audio_˘æ
.
if_44100hz_£rõs
 = 
b44100HzSîõs
;

310 
audio_˘æ
.
ßm∂e
 = sample;

311 
audio_˘æ
.
ßm∂eR©e
 = (
HI_U32
)
íSam∂e
;

312 
io˘l
(
s_fdTlv
,
SET_CTRL_MODE
,&
audio_˘æ
);

315 
audio_˘æ
.
å™s_mode
 = 
bPCMmode
;

316 i‡(
io˘l
(
s_fdTlv
,
SET_TRANSFER_MODE
,&
audio_˘æ
))

318 
¥ötf
("setÅlv320aic31Årans_modeÉrr\n");

319 
˛o£
(
s_fdTlv
);

324 i‡(
io˘l
(
s_fdTlv
,
SET_DAC_SAMPLE
,&
audio_˘æ
))

326 
¥ötf
("ioctlÉrr1\n");

327 
˛o£
(
s_fdTlv
);

331 i‡(
io˘l
(
s_fdTlv
,
SET_ADC_SAMPLE
,&
audio_˘æ
))

333 
¥ötf
("ioctlÉrr2\n");

334 
˛o£
(
s_fdTlv
);

339 
audio_˘æ
.
if_muã_rouã
 = 0;

340 
audio_˘æ
.
öput_Àvñ
 = 0;

341 
io˘l
(
s_fdTlv
,
LEFT_DAC_VOL_CTRL
,&
audio_˘æ
);

342 
io˘l
(
s_fdTlv
,
RIGHT_DAC_VOL_CTRL
,&
audio_˘æ
);

345 
audio_˘æ
.
if_powîup
 = 1;

346 
io˘l
(
s_fdTlv
,
LEFT_DAC_POWER_SETUP
,&
audio_˘æ
);

347 i‡((
AIO_MODE_I2S_MASTER
 !
íW‹kmode
Ë&& (
AIO_MODE_I2S_SLAVE
 !=ÉnWorkmode))

349 
audio_˘æ
.
if_powîup
 = 0;

351 
io˘l
(
s_fdTlv
,
RIGHT_DAC_POWER_SETUP
,&
audio_˘æ
);

354 i‡((
AIO_MODE_PCM_MASTER_STD
 =
íW‹kmode
)||(
AIO_MODE_PCM_SLAVE_STD
 ==ÉnWorkmode))

356 
bPCMStd
 = 
HI_TRUE
;

357 
audio_˘æ
.
d©a_off£t
 = 2;

358 
io˘l
(
s_fdTlv
,
SET_SERIAL_DATA_OFFSET
,&
audio_˘æ
);

360 i‡((
AIO_MODE_PCM_MASTER_NSTD
 =
íW‹kmode
)||(
AIO_MODE_PCM_SLAVE_NSTD
 ==ÉnWorkmode))

362 
bPCMStd
 = 
HI_FALSE
;

363 
audio_˘æ
.
d©a_off£t
 = 
bPCMStd
;

364 
io˘l
(
s_fdTlv
,
SET_SERIAL_DATA_OFFSET
,&
audio_˘æ
);

370 
audio_˘æ
.
d©a_Àngth
 = 0;

371 
io˘l
(
s_fdTlv
,
SET_DATA_LENGTH
,&
audio_˘æ
);

374 
audio_˘æ
.
if_muã_rouã
 = 1;

375 
audio_˘æ
.
öput_Àvñ
 = 
vﬁ
;

376 
io˘l
(
s_fdTlv
,
DACL1_2_LEFT_LOP_VOL_CTRL
,&
audio_˘æ
);

377 
io˘l
(
s_fdTlv
,
DACR1_2_RIGHT_LOP_VOL_CTRL
,&
audio_˘æ
);

380 
audio_˘æ
.
if_muã_rouã
 = 1;

381 
audio_˘æ
.
if_powîup
 = 1;

382 
audio_˘æ
.
öput_Àvñ
 = 0;

383 
io˘l
(
s_fdTlv
,
LEFT_LOP_OUTPUT_LEVEL_CTRL
,&
audio_˘æ
);

384 
io˘l
(
s_fdTlv
,
RIGHT_LOP_OUTPUT_LEVEL_CTRL
,&
audio_˘æ
);

387 
audio_˘æ
.
if_muã_rouã
 =0;

388 
audio_˘æ
.
öput_Àvñ
 = 0;

389 
io˘l
(
s_fdTlv
,
LEFT_ADC_PGA_CTRL
,&
audio_˘æ
);

390 
io˘l
(
s_fdTlv
,
RIGHT_ADC_PGA_CTRL
,&
audio_˘æ
);

393 
audio_˘æ
.
öput_Àvñ
 = 0;

394 
io˘l
(
s_fdTlv
,
IN2LR_2_LEFT_ADC_CTRL
,&
audio_˘æ
);

395 
io˘l
(
s_fdTlv
,
IN2LR_2_RIGTH_ADC_CTRL
,&
audio_˘æ
);

409 
˛o£
(
s_fdTlv
);

410 
¥ötf
("Setáic31 ok: bMaster = %d,ÉnWorkmode = %d,ÉnSamplerate = %d\n",

411 
bMa°î
, 
íW‹kmode
, 
íSam∂e
);

416 
HI_S32
 
SAMPLE_Tlv320_DißbÀ
()

418 
Audio_Cål
 
audio_˘æ
;

419 
s_fdTlv
 = -1;

420 
HI_S32
 
s32Rë
;

422 
s_fdTlv
 = 
›í
(
TLV320_FILE
,
O_RDWR
);

423 i‡(
s_fdTlv
 < 0)

425 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "can't open /dev/tlv320aic31");

426  
HI_FAILURE
;

430 
audio_˘æ
.
chù_num
 = 0;

431 
s32Rë
 = 
io˘l
(
s_fdTlv
, 
SOFT_RESET
, &
audio_˘æ
);

432 i‡(
HI_SUCCESS
 !
s32Rë
)

434 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "tlv320aic31Ñeset failed");

436 
˛o£
(
s_fdTlv
);

438  
s32Rë
;

442 
HI_S32
 
SAMPLE_INNER_CODEC_CfgAudio
(
AUDIO_SAMPLE_RATE_E
 
íSam∂e
, 
HI_BOOL
 
bMicö
)

444 
HI_S32
 
fdAcodec
 = -1;

445 
HI_S32
 
ªt
 = 
HI_SUCCESS
;

446 
i2s_fs_£l
 = 0;

447 
mixî_mic_˘æ
 = 0;

448 
gaö_mic
 = 0;

450 
fdAcodec
 = 
›í
(
ACODEC_FILE
,
O_RDWR
);

451 i‡(
fdAcodec
 < 0)

453 
¥ötf
("%s: c™'à›í Acodec,%s\n", 
__FUNCTION__
, 
ACODEC_FILE
);

454 
ªt
 = 
HI_FAILURE
;

456 if(
io˘l
(
fdAcodec
, 
ACODEC_SOFT_RESET_CTRL
))

458 
¥ötf
("Resetáudio codecÉrror\n");

461 i‡((
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

462 || (
AUDIO_SAMPLE_RATE_11025
 =
íSam∂e
)

463 || (
AUDIO_SAMPLE_RATE_12000
 =
íSam∂e
))

465 
i2s_fs_£l
 = 0x18;

467 i‡((
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

468 || (
AUDIO_SAMPLE_RATE_22050
 =
íSam∂e
)

469 || (
AUDIO_SAMPLE_RATE_24000
 =
íSam∂e
))

471 
i2s_fs_£l
 = 0x19;

473 i‡((
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

474 || (
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

475 || (
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
))

477 
i2s_fs_£l
 = 0x1a;

481 
¥ötf
("%s:ÇŸ suµ‹àíSam∂e:%d\n", 
__FUNCTION__
, 
íSam∂e
);

482 
ªt
 = 
HI_FAILURE
;

485 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_I2S1_FS
, &
i2s_fs_£l
))

487 
¥ötf
("%s: sëácode¯ßm∂êøã faûed\n", 
__FUNCTION__
);

488 
ªt
 = 
HI_FAILURE
;

491 i‡(
HI_TRUE
 =
bMicö
)

494 
mixî_mic_˘æ
 = 
ACODEC_MIXER_MICIN
;

495 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_MIXER_MIC
, &
mixî_mic_˘æ
))

497 
¥ötf
("%s: sëácode¯micö faûed\n", 
__FUNCTION__
);

498  
HI_FAILURE
;

503 
gaö_mic
 = 0xc;

504 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_GAIN_MICL
, &
gaö_mic
))

506 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

507  
HI_FAILURE
;

509 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_GAIN_MICR
, &
gaö_mic
))

511 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

512  
HI_FAILURE
;

517 
˛o£
(
fdAcodec
);

518  
ªt
;

523 
HI_S32
 
SAMPLE_COMM_AUDIO_CfgAcodec
(
AIO_ATTR_S
 *
p°AioAâr
, 
HI_BOOL
 
bMicIn
)

525 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

527 
s32Rë
 = 
SAMPLE_INNER_CODEC_CfgAudio
(
p°AioAâr
->
íSam∂î©e
, 
bMicIn
);

528 i‡(
HI_SUCCESS
 !
s32Rë
)

530 
¥ötf
("%s:SAMPLE_INNER_CODEC_CfgAudiÿÁûed\n", 
__FUNCTION__
);

531  
s32Rë
;

535 
s32Rë
 = 
SAMPLE_Tlv320_CfgAudio
(
p°AioAâr
->
íW‹kmode
,Ö°AioAâr->
íSam∂î©e
);

536 i‡(
HI_SUCCESS
 !
s32Rë
)

538 
¥ötf
("%s: SAMPLE_Tlv320_CfgAudiÿÁûed\n", 
__FUNCTION__
);

539  
s32Rë
;

542  
HI_SUCCESS
;

548 *
SAMPLE_COMM_AUDIO_AiProc
(*
∑rg
)

550 
HI_S32
 
s32Rë
;

551 
HI_S32
 
AiFd
;

552 
SAMPLE_AI_S
 *
p°AiCé
 = (SAMPLE_AI_S *)
∑rg
;

553 
AUDIO_FRAME_S
 
°Føme
;

554 
fd_£t
 
ªad_fds
;

555 
timevÆ
 
TimeoutVÆ
;

556 
AI_CHN_PARAM_S
 
°AiChnP¨a
;

558 
s32Rë
 = 
HI_MPI_AI_GëChnP¨am
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°AiChnP¨a
);

559 i‡(
HI_SUCCESS
 !
s32Rë
)

561 
¥ötf
("%s: Gëáòch¿∑øm faûed\n", 
__FUNCTION__
);

562  
NULL
;

565 
°AiChnP¨a
.
u32U§FrmDïth
 = 30;

567 
s32Rë
 = 
HI_MPI_AI_SëChnP¨am
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°AiChnP¨a
);

568 i‡(
HI_SUCCESS
 !
s32Rë
)

570 
¥ötf
("%s: sëáòch¿∑øm faûed\n", 
__FUNCTION__
);

571  
NULL
;

574 
FD_ZERO
(&
ªad_fds
);

575 
AiFd
 = 
HI_MPI_AI_GëFd
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
);

576 
FD_SET
(
AiFd
,&
ªad_fds
);

578 
p°AiCé
->
bSèπ
)

580 
TimeoutVÆ
.
tv_£c
 = 1;

581 
TimeoutVÆ
.
tv_u£c
 = 0;

583 
FD_ZERO
(&
ªad_fds
);

584 
FD_SET
(
AiFd
,&
ªad_fds
);

586 
s32Rë
 = 
£À˘
(
AiFd
+1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

587 i‡(
s32Rë
 < 0)

591 i‡(0 =
s32Rë
)

593 
¥ötf
("%s: gëáò‰amê£À˘Åimêout\n", 
__FUNCTION__
);

597 i‡(
FD_ISSET
(
AiFd
, &
ªad_fds
))

600 
s32Rë
 = 
HI_MPI_AI_GëFøme
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°Føme
, 
NULL
, 
HI_FALSE
);

601 i‡(
HI_SUCCESS
 !
s32Rë
 )

603 
¥ötf
("%s: HI_MPI_AI_GetFrame(%d, %d), failed with %#x!\n",\

604 
__FUNCTION__
, 
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, 
s32Rë
);

605 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

606  
NULL
;

610 i‡(
HI_TRUE
 =
p°AiCé
->
bSídAíc
)

612 
s32Rë
 = 
HI_MPI_AENC_SídFøme
(
p°AiCé
->
AícChn
, &
°Føme
, 
NULL
);

613 i‡(
HI_SUCCESS
 !
s32Rë
 )

615 
¥ötf
("%s: HI_MPI_AENC_SendFrame(%d), failed with %#x!\n",\

616 
__FUNCTION__
, 
p°AiCé
->
AícChn
, 
s32Rë
);

617 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

618  
NULL
;

623 i‡(
HI_TRUE
 =
p°AiCé
->
bSídAo
)

625 
s32Rë
 = 
HI_MPI_AO_SídFøme
(
p°AiCé
->
AoDev
,Ö°AiCé->
AoChn
, &
°Føme
, 1000);

626 i‡(
HI_SUCCESS
 !
s32Rë
 )

628 
¥ötf
("%s: HI_MPI_AO_SendFrame(%d, %d), failed with %#x!\n",\

629 
__FUNCTION__
, 
p°AiCé
->
AoDev
,Ö°AiCé->
AoChn
, 
s32Rë
);

630 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

631  
NULL
;

637 
s32Rë
 = 
HI_MPI_AI_Rñó£Føme
(
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, &
°Føme
, 
NULL
);

638 i‡(
HI_SUCCESS
 !
s32Rë
 )

640 
¥ötf
("%s: HI_MPI_AI_ReleaseFrame(%d, %d), failed with %#x!\n",\

641 
__FUNCTION__
, 
p°AiCé
->
AiDev
,Ö°AiCé->
AiChn
, 
s32Rë
);

642 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

643  
NULL
;

649 
p°AiCé
->
bSèπ
 = 
HI_FALSE
;

650  
NULL
;

656 *
SAMPLE_COMM_AUDIO_AícProc
(*
∑rg
)

658 
HI_S32
 
s32Rë
;

659 
HI_S32
 
AícFd
;

660 
SAMPLE_AENC_S
 *
p°AícCé
 = (SAMPLE_AENC_S *)
∑rg
;

661 
AUDIO_STREAM_S
 
°Såóm
;

662 
fd_£t
 
ªad_fds
;

663 
timevÆ
 
TimeoutVÆ
;

665 
FD_ZERO
(&
ªad_fds
);

666 
AícFd
 = 
HI_MPI_AENC_GëFd
(
p°AícCé
->
AeChn
);

667 
FD_SET
(
AícFd
, &
ªad_fds
);

669 
p°AícCé
->
bSèπ
)

671 
TimeoutVÆ
.
tv_£c
 = 1;

672 
TimeoutVÆ
.
tv_u£c
 = 0;

674 
FD_ZERO
(&
ªad_fds
);

675 
FD_SET
(
AícFd
,&
ªad_fds
);

677 
s32Rë
 = 
£À˘
(
AícFd
+1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

678 i‡(
s32Rë
 < 0)

682 i‡(0 =
s32Rë
)

684 
¥ötf
("%s: gëáí¯°ªam sñe˘Åimêout\n", 
__FUNCTION__
);

688 i‡(
FD_ISSET
(
AícFd
, &
ªad_fds
))

691 
s32Rë
 = 
HI_MPI_AENC_GëSåóm
(
p°AícCé
->
AeChn
, &
°Såóm
, 
HI_FALSE
);

692 i‡(
HI_SUCCESS
 !
s32Rë
 )

694 
¥ötf
("%s: HI_MPI_AENC_GetStream(%d), failed with %#x!\n",\

695 
__FUNCTION__
, 
p°AícCé
->
AeChn
, 
s32Rë
);

696 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

697  
NULL
;

701 i‡(
HI_TRUE
 =
p°AícCé
->
bSídAdChn
)

703 
s32Rë
 = 
HI_MPI_ADEC_SídSåóm
(
p°AícCé
->
AdChn
, &
°Såóm
, 
HI_TRUE
);

704 i‡(
HI_SUCCESS
 !
s32Rë
 )

706 
¥ötf
("%s: HI_MPI_ADEC_SendStream(%d), failed with %#x!\n",\

707 
__FUNCTION__
, 
p°AícCé
->
AdChn
, 
s32Rë
);

708 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

709  
NULL
;

714 
fwrôe
(
°Såóm
.
pSåóm
,1,°Såóm.
u32Lí
, 
p°AícCé
->
pfd
);

717 
s32Rë
 = 
HI_MPI_AENC_Rñó£Såóm
(
p°AícCé
->
AeChn
, &
°Såóm
);

718 i‡(
HI_SUCCESS
 !
s32Rë
 )

720 
¥ötf
("%s: HI_MPI_AENC_ReleaseStream(%d), failed with %#x!\n",\

721 
__FUNCTION__
, 
p°AícCé
->
AeChn
, 
s32Rë
);

722 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

723  
NULL
;

728 
f˛o£
(
p°AícCé
->
pfd
);

729 
p°AícCé
->
bSèπ
 = 
HI_FALSE
;

730  
NULL
;

736 *
SAMPLE_COMM_AUDIO_AdecProc
(*
∑rg
)

738 
HI_S32
 
s32Rë
;

739 
AUDIO_STREAM_S
 
°AudioSåóm
;

740 
HI_U32
 
u32Lí
 = 640;

741 
HI_U32
 
u32RódLí
;

742 
HI_S32
 
s32AdecChn
;

743 
HI_U8
 *
pu8AudioSåóm
 = 
NULL
;

744 
SAMPLE_ADEC_S
 *
p°AdecCé
 = (SAMPLE_ADEC_S *)
∑rg
;

745 
FILE
 *
pfd
 = 
p°AdecCé
->pfd;

746 
s32AdecChn
 = 
p°AdecCé
->
AdChn
;

748 
pu8AudioSåóm
 = (
HI_U8
*)
mÆloc
((HI_U8)*
MAX_AUDIO_STREAM_LEN
);

749 i‡(
NULL
 =
pu8AudioSåóm
)

751 
¥ötf
("%s: mÆlo¯Áûed!\n", 
__FUNCTION__
);

752  
NULL
;

755 
HI_TRUE
 =
p°AdecCé
->
bSèπ
)

758 
°AudioSåóm
.
pSåóm
 = 
pu8AudioSåóm
;

759 
u32RódLí
 = 
‰ód
(
°AudioSåóm
.
pSåóm
, 1, 
u32Lí
, 
pfd
);

760 i‡(
u32RódLí
 <= 0)

762 
f£ek
(
pfd
, 0, 
SEEK_SET
);

767 
°AudioSåóm
.
u32Lí
 = 
u32RódLí
;

768 
s32Rë
 = 
HI_MPI_ADEC_SídSåóm
(
s32AdecChn
, &
°AudioSåóm
, 
HI_TRUE
);

769 if(
HI_SUCCESS
 !
s32Rë
)

771 
¥ötf
("%s: HI_MPI_ADEC_SendStream(%d) failed with %#x!\n",\

772 
__FUNCTION__
, 
s32AdecChn
, 
s32Rë
);

777 
‰ì
(
pu8AudioSåóm
);

778 
pu8AudioSåóm
 = 
NULL
;

779 
f˛o£
(
pfd
);

780 
p°AdecCé
->
bSèπ
 = 
HI_FALSE
;

781  
NULL
;

787 *
SAMPLE_COMM_AUDIO_AoVﬁProc
(*
∑rg
)

789 
HI_S32
 
s32Rë
;

790 
HI_S32
 
s32Vﬁume
;

791 
AUDIO_DEV
 
AoDev
;

792 
AUDIO_FADE_S
 
°Fade
;

793 
SAMPLE_AO_S
 *
p°AoCé
 = (SAMPLE_AO_S *)
∑rg
;

794 
AoDev
 = 
p°AoCé
->AoDev;

796 
p°AoCé
->
bSèπ
)

798 
s32Vﬁume
 = 0; s32Volume <=6; s32Volume++)

800 
s32Rë
 = 
HI_MPI_AO_SëVﬁume
–
AoDev
, 
s32Vﬁume
);

801 if(
HI_SUCCESS
 !
s32Rë
)

803 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n",\

804 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

806 
¥ötf
("\r£àvﬁumê%d ", 
s32Vﬁume
);

807 
fÊush
(
°dout
);

808 
¶ìp
(2);

811 
s32Vﬁume
 = 5; s32Volume >=-15; s32Volume--)

813 
s32Rë
 = 
HI_MPI_AO_SëVﬁume
–
AoDev
, 
s32Vﬁume
);

814 if(
HI_SUCCESS
 !
s32Rë
)

816 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n",\

817 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

819 
¥ötf
("\r£àvﬁumê%d ", 
s32Vﬁume
);

820 
fÊush
(
°dout
);

821 
¶ìp
(2);

824 
s32Vﬁume
 = -14; s32Volume >=0; s32Volume++)

826 
s32Rë
 = 
HI_MPI_AO_SëVﬁume
–
AoDev
, 
s32Vﬁume
);

827 if(
HI_SUCCESS
 !
s32Rë
)

829 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n",\

830 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

832 
¥ötf
("\r£àvﬁumê%d ", 
s32Vﬁume
);

833 
fÊush
(
°dout
);

834 
¶ìp
(2);

837 
°Fade
.
bFade
 = 
HI_TRUE
;

838 
°Fade
.
íFadeInR©e
 = 
AUDIO_FADE_RATE_128
;

839 
°Fade
.
íFadeOutR©e
 = 
AUDIO_FADE_RATE_128
;

841 
s32Rë
 = 
HI_MPI_AO_SëMuã
(
AoDev
, 
HI_TRUE
, &
°Fade
);

842 if(
HI_SUCCESS
 !
s32Rë
)

844 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n",\

845 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

847 
¥ötf
("\rset Ao mute ");

848 
fÊush
(
°dout
);

849 
¶ìp
(2);

851 
s32Rë
 = 
HI_MPI_AO_SëMuã
(
AoDev
, 
HI_FALSE
, 
NULL
);

852 if(
HI_SUCCESS
 !
s32Rë
)

854 
¥ötf
("%s: HI_MPI_AO_SetVolume(%d), failed with %#x!\n",\

855 
__FUNCTION__
, 
AoDev
, 
s32Rë
);

857 
¥ötf
("\rset Ao unmute ");

858 
fÊush
(
°dout
);

859 
¶ìp
(2);

861  
NULL
;

867 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAo
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
)

869 
SAMPLE_AI_S
 *
p°Ai
 = 
NULL
;

871 
p°Ai
 = &
gs_°Sam∂eAi
[
AiDev
*
AIO_MAX_CHN_NUM
 + 
AiChn
];

872 
p°Ai
->
bSídAíc
 = 
HI_FALSE
;

873 
p°Ai
->
bSídAo
 = 
HI_TRUE
;

874 
p°Ai
->
bSèπ

HI_TRUE
;

875 
p°Ai
->
AiDev
 = AiDev;

876 
p°Ai
->
AiChn
 = AiChn;

877 
p°Ai
->
AoDev
 = AoDev;

878 
p°Ai
->
AoChn
 = AoChn;

880 
±hªad_¸óã
(&
p°Ai
->
°AiPid
, 0, 
SAMPLE_COMM_AUDIO_AiProc
,ÖstAi);

882  
HI_SUCCESS
;

888 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAiAíc
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
)

890 
SAMPLE_AI_S
 *
p°Ai
 = 
NULL
;

892 
p°Ai
 = &
gs_°Sam∂eAi
[
AiDev
*
AIO_MAX_CHN_NUM
 + 
AiChn
];

893 
p°Ai
->
bSídAíc
 = 
HI_TRUE
;

894 
p°Ai
->
bSídAo
 = 
HI_FALSE
;

895 
p°Ai
->
bSèπ

HI_TRUE
;

896 
p°Ai
->
AiDev
 = AiDev;

897 
p°Ai
->
AiChn
 = AiChn;

898 
p°Ai
->
AícChn
 = 
AeChn
;

899 
±hªad_¸óã
(&
p°Ai
->
°AiPid
, 0, 
SAMPLE_COMM_AUDIO_AiProc
,ÖstAi);

901  
HI_SUCCESS
;

907 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAícAdec
(
AENC_CHN
 
AeChn
, 
ADEC_CHN
 
AdChn
, 
FILE
 *
pAecFd
)

909 
SAMPLE_AENC_S
 *
p°Aíc
 = 
NULL
;

911 i‡(
NULL
 =
pAecFd
)

913  
HI_FAILURE
;

916 
p°Aíc
 = &
gs_°Sam∂eAíc
[
AeChn
];

917 
p°Aíc
->
AeChn
 = AeChn;

918 
p°Aíc
->
AdChn
 = AdChn;

919 
p°Aíc
->
bSídAdChn
 = 
HI_TRUE
;

920 
p°Aíc
->
pfd
 = 
pAecFd
;

921 
p°Aíc
->
bSèπ
 = 
HI_TRUE
;

922 
±hªad_¸óã
(&
p°Aíc
->
°AícPid
, 0, 
SAMPLE_COMM_AUDIO_AícProc
,ÖstAenc);

924  
HI_SUCCESS
;

930 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdFûeAdec
(
ADEC_CHN
 
AdChn
, 
FILE
 *
pAdcFd
)

932 
SAMPLE_ADEC_S
 *
p°Adec
 = 
NULL
;

934 i‡(
NULL
 =
pAdcFd
)

936  
HI_FAILURE
;

939 
p°Adec
 = &
gs_°Sam∂eAdec
[
AdChn
];

940 
p°Adec
->
AdChn
 = AdChn;

941 
p°Adec
->
pfd
 = 
pAdcFd
;

942 
p°Adec
->
bSèπ
 = 
HI_TRUE
;

943 
±hªad_¸óã
(&
p°Adec
->
°AdPid
, 0, 
SAMPLE_COMM_AUDIO_AdecProc
,ÖstAdec);

945  
HI_SUCCESS
;

952 
HI_S32
 
SAMPLE_COMM_AUDIO_Cª©TrdAoVﬁCål
(
AUDIO_DEV
 
AoDev
)

954 
SAMPLE_AO_S
 *
p°AoCé
 = 
NULL
;

956 
p°AoCé
 = &
gs_°Sam∂eAo
[
AoDev
];

957 
p°AoCé
->
AoDev
 = AoDev;

958 
p°AoCé
->
bSèπ
 = 
HI_TRUE
;

959 
±hªad_¸óã
(&
p°AoCé
->
°AoPid
, 0, 
SAMPLE_COMM_AUDIO_AoVﬁProc
,ÖstAoCtl);

961  
HI_SUCCESS
;

968 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
)

970 
SAMPLE_AI_S
 *
p°Ai
 = 
NULL
;

972 
p°Ai
 = &
gs_°Sam∂eAi
[
AiDev
*
AIO_MAX_CHN_NUM
 + 
AiChn
];

973 
p°Ai
->
bSèπ

HI_FALSE
;

974 
±hªad_ˇn˚l
(
p°Ai
->
°AiPid
);

975 
±hªad_joö
(
p°Ai
->
°AiPid
, 0);

977  
HI_SUCCESS
;

983 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAícAdec
(
AENC_CHN
 
AeChn
)

985 
SAMPLE_AENC_S
 *
p°Aíc
 = 
NULL
;

987 
p°Aíc
 = &
gs_°Sam∂eAíc
[
AeChn
];

988 
p°Aíc
->
bSèπ
 = 
HI_FALSE
;

989 
±hªad_ˇn˚l
(
p°Aíc
->
°AícPid
);

990 
±hªad_joö
(
p°Aíc
->
°AícPid
, 0);

992  
HI_SUCCESS
;

998 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdFûeAdec
(
ADEC_CHN
 
AdChn
)

1000 
SAMPLE_ADEC_S
 *
p°Adec
 = 
NULL
;

1002 
p°Adec
 = &
gs_°Sam∂eAdec
[
AdChn
];

1003 
p°Adec
->
bSèπ
 = 
HI_FALSE
;

1004 
±hªad_ˇn˚l
(
p°Adec
->
°AdPid
);

1005 
±hªad_joö
(
p°Adec
->
°AdPid
, 0);

1007  
HI_SUCCESS
;

1013 
HI_S32
 
SAMPLE_COMM_AUDIO_De°‹yTrdAoVﬁCål
(
AUDIO_DEV
 
AoDev
)

1015 
SAMPLE_AO_S
 *
p°AoCé
 = 
NULL
;

1017 
p°AoCé
 = &
gs_°Sam∂eAo
[
AoDev
];

1018 
p°AoCé
->
bSèπ
 = 
HI_FALSE
;

1019 
±hªad_ˇn˚l
(
p°AoCé
->
°AoPid
);

1020 
±hªad_joö
(
p°AoCé
->
°AoPid
, 0);

1022  
HI_SUCCESS
;

1028 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
)

1030 
MPP_CHN_S
 
°SrcChn
,
°De°Chn
;

1032 
°SrcChn
.
íModId
 = 
HI_ID_ADEC
;

1033 
°SrcChn
.
s32DevId
 = 0;

1034 
°SrcChn
.
s32ChnId
 = 
AdChn
;

1035 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1036 
°De°Chn
.
s32DevId
 = 
AoDev
;

1037 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1039  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

1045 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAdec
(
AUDIO_DEV
 
AoDev
, 
AO_CHN
 
AoChn
, 
ADEC_CHN
 
AdChn
)

1047 
MPP_CHN_S
 
°SrcChn
,
°De°Chn
;

1049 
°SrcChn
.
íModId
 = 
HI_ID_ADEC
;

1050 
°SrcChn
.
s32ChnId
 = 
AdChn
;

1051 
°SrcChn
.
s32DevId
 = 0;

1052 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1053 
°De°Chn
.
s32DevId
 = 
AoDev
;

1054 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1056  
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

1062 
HI_S32
 
SAMPLE_COMM_AUDIO_AoBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
)

1064 
MPP_CHN_S
 
°SrcChn
,
°De°Chn
;

1066 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1067 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1068 
°SrcChn
.
s32DevId
 = 
AiDev
;

1069 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1070 
°De°Chn
.
s32DevId
 = 
AoDev
;

1071 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1073  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

1079 
HI_S32
 
SAMPLE_COMM_AUDIO_AoUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDev
, 
AO_CHN
 
AoChn
)

1081 
MPP_CHN_S
 
°SrcChn
,
°De°Chn
;

1083 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1084 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1085 
°SrcChn
.
s32DevId
 = 
AiDev
;

1086 
°De°Chn
.
íModId
 = 
HI_ID_AO
;

1087 
°De°Chn
.
s32DevId
 = 
AoDev
;

1088 
°De°Chn
.
s32ChnId
 = 
AoChn
;

1090  
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

1096 
HI_S32
 
SAMPLE_COMM_AUDIO_AícBödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
)

1098 
MPP_CHN_S
 
°SrcChn
,
°De°Chn
;

1100 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1101 
°SrcChn
.
s32DevId
 = 
AiDev
;

1102 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1103 
°De°Chn
.
íModId
 = 
HI_ID_AENC
;

1104 
°De°Chn
.
s32DevId
 = 0;

1105 
°De°Chn
.
s32ChnId
 = 
AeChn
;

1107  
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

1113 
HI_S32
 
SAMPLE_COMM_AUDIO_AícUnbödAi
(
AUDIO_DEV
 
AiDev
, 
AI_CHN
 
AiChn
, 
AENC_CHN
 
AeChn
)

1115 
MPP_CHN_S
 
°SrcChn
,
°De°Chn
;

1117 
°SrcChn
.
íModId
 = 
HI_ID_AI
;

1118 
°SrcChn
.
s32DevId
 = 
AiDev
;

1119 
°SrcChn
.
s32ChnId
 = 
AiChn
;

1120 
°De°Chn
.
íModId
 = 
HI_ID_AENC
;

1121 
°De°Chn
.
s32DevId
 = 0;

1122 
°De°Chn
.
s32ChnId
 = 
AeChn
;

1124  
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

1131 
HI_S32
 
SAMPLE_COMM_AUDIO_CfgAcodec
(
AUDIO_SAMPLE_RATE_E
 
íSam∂e
, 
HI_BOOL
 
bMicIn
)

1133 
HI_S32
 
fdAcodec
 = -1;

1134 
ACODEC_CTRL
 
°Audio˘æ
 = {0};

1136 
fdAcodec
 = 
›í
(
ACODEC_FILE
,
O_RDWR
);

1137 i‡(
fdAcodec
 < 0)

1139 
¥ötf
("%s: c™'à›íácodec,%s\n", 
__FUNCTION__
, 
ACODEC_FILE
);

1140  
HI_FAILURE
;

1143 i‡((
AUDIO_SAMPLE_RATE_8000
 =
íSam∂e
)

1144 || (
AUDIO_SAMPLE_RATE_11025
 =
íSam∂e
)

1145 || (
AUDIO_SAMPLE_RATE_12000
 =
íSam∂e
))

1147 
°Audio˘æ
.
i2s_fs_£l
 = 0x18;

1149 i‡((
AUDIO_SAMPLE_RATE_16000
 =
íSam∂e
)

1150 || (
AUDIO_SAMPLE_RATE_22050
 =
íSam∂e
)

1151 || (
AUDIO_SAMPLE_RATE_24000
 =
íSam∂e
))

1153 
°Audio˘æ
.
i2s_fs_£l
 = 0x19;

1155 i‡((
AUDIO_SAMPLE_RATE_32000
 =
íSam∂e
)

1156 || (
AUDIO_SAMPLE_RATE_44100
 =
íSam∂e
)

1157 || (
AUDIO_SAMPLE_RATE_48000
 =
íSam∂e
))

1159 
°Audio˘æ
.
i2s_fs_£l
 = 0x1a;

1163 
¥ötf
("%s:ÇŸ suµ‹àíSam∂e:%d\n", 
__FUNCTION__
, 
íSam∂e
);

1164  
HI_FAILURE
;

1167 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_I2S1_FS
, &
°Audio˘æ
))

1169 
¥ötf
("%s: sëácode¯ßm∂êøã faûed\n", 
__FUNCTION__
);

1170  
HI_FAILURE
;

1173 i‡(
HI_TRUE
 =
bMicIn
)

1175 
°Audio˘æ
.
mixî_mic_˘æ
 = 
ACODEC_MIXER_MICIN
;

1176 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_MIXER_MIC
, &
°Audio˘æ
))

1178 
¥ötf
("%s: sëácode¯micö faûed\n", 
__FUNCTION__
);

1179  
HI_FAILURE
;

1183 
°Audio˘æ
.
gaö_mic
 = 0;

1184 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_GAIN_MICL
, &
°Audio˘æ
))

1186 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

1187  
HI_FAILURE
;

1189 i‡(
io˘l
(
fdAcodec
, 
ACODEC_SET_GAIN_MICR
, &
°Audio˘æ
))

1191 
¥ötf
("%s: sëácode¯micö vﬁumêÁûed\n", 
__FUNCTION__
);

1192  
HI_FAILURE
;

1195 
˛o£
(
fdAcodec
);

1197  
HI_SUCCESS
;

1203 
HI_S32
 
SAMPLE_COMM_AUDIO_DißbÀAcodec
()

1205  
SAMPLE_COMM_AUDIO_CfgAcodec
(
AUDIO_SAMPLE_RATE_48000
, 
HI_FALSE
);

1213 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAi
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

1214 
AIO_ATTR_S
 *
p°AioAâr
, 
HI_BOOL
 
bAƒEn
, 
AUDIO_RESAMPLE_ATTR_S
 *
p°AiReSmpAâr
)

1216 
HI_S32
 
i
, 
s32Rë
;

1218 
s32Rë
 = 
HI_MPI_AI_SëPubAâr
(
AiDevId
, 
p°AioAâr
);

1219 i‡(
s32Rë
)

1221 
¥ötf
("%s: HI_MPI_AI_SëPubAâr(%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
s32Rë
);

1222  
HI_FAILURE
;

1224 i‡(
HI_MPI_AI_E«bÀ
(
AiDevId
))

1226 
¥ötf
("%s: HI_MPI_AI_E«bÀ(%dËÁûed wôh %#x\n", 
__FUNCTION__
, 
AiDevId
, 
s32Rë
);

1227  
HI_FAILURE
;

1229 
i
=0; i<
s32AiChnC¡
; i++)

1231 i‡(
HI_MPI_AI_E«bÀChn
(
AiDevId
, 
i
))

1233 
¥ötf
("%s: HI_MPI_AI_E«bÀChn(%d,%dËÁûed wôh %#x\n", 
__FUNCTION__
,\

1234 
AiDevId
, 
i
, 
s32Rë
);

1235  
HI_FAILURE
;

1238 i‡(
HI_TRUE
 =
bAƒEn
)

1240 i‡(
HI_MPI_AI_E«bÀAƒ
(
AiDevId
, 
i
))

1242 
¥ötf
("%s: HI_MPI_AI_E«bÀAƒ(%d,%dËÁûed wôh %#x\n", 
__FUNCTION__
,\

1243 
AiDevId
, 
i
, 
s32Rë
);

1244  
HI_FAILURE
;

1248 i‡(
NULL
 !
p°AiReSmpAâr
)

1250 i‡(
HI_MPI_AI_E«bÀReSmp
(
AiDevId
, 
i
, 
p°AiReSmpAâr
))

1252 
¥ötf
("%s: HI_MPI_AI_EnableReSmp(%d,%d) failed with %#x\n",\

1253 
__FUNCTION__
, 
AiDevId
, 
i
, 
s32Rë
);

1254  
HI_FAILURE
;

1259  
HI_SUCCESS
;

1265 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ai
(
AUDIO_DEV
 
AiDevId
, HI_S32 
s32AiChnC¡
,

1266 
HI_BOOL
 
bAƒEn
, HI_BOOL 
bReßm∂eEn
)

1268 
HI_S32
 
i
;

1269 
HI_S32
 
s32Rë
;

1271 
i
=0; i<
s32AiChnC¡
; i++)

1273 i‡(
HI_TRUE
 =
bReßm∂eEn
)

1275 
s32Rë
 = 
HI_MPI_AI_DißbÀReSmp
(
AiDevId
, 
i
);

1276 if(
HI_SUCCESS
 !
s32Rë
)

1278 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1279  
HI_FAILURE
;

1283 i‡(
HI_TRUE
 =
bAƒEn
)

1285 
s32Rë
 = 
HI_MPI_AI_DißbÀAƒ
(
AiDevId
, 
i
);

1286 if(
HI_SUCCESS
 !
s32Rë
)

1288 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1289  
HI_FAILURE
;

1293 
s32Rë
 = 
HI_MPI_AI_DißbÀChn
(
AiDevId
, 
i
);

1294 if(
HI_SUCCESS
 !
s32Rë
)

1296 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1297  
HI_FAILURE
;

1301 
s32Rë
 = 
HI_MPI_AI_DißbÀ
(
AiDevId
);

1302 if(
HI_SUCCESS
 !
s32Rë
)

1304 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1305  
HI_FAILURE
;

1308  
HI_SUCCESS
;

1311 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπHdmi
(
AIO_ATTR_S
 *
p°AioAâr
)

1313 
HI_S32
 
s32Rë
;

1314 
HI_HDMI_ATTR_S
 
°HdmiAâr
;

1315 
HI_HDMI_ID_E
 
íHdmi
 = 
HI_HDMI_ID_0
;

1316 
VO_PUB_ATTR_S
 
°PubAâr
;

1317 
VO_DEV
 
VoDev
 = 0;

1319 
°PubAâr
.
u32BgCﬁ‹
 = 0x000000ff;

1320 
°PubAâr
.
íI¡fTy≥
 = 
VO_INTF_HDMI
;

1321 
°PubAâr
.
íI¡fSync
 = 
VO_OUTPUT_1080P30
;

1323 if(
HI_SUCCESS
 !
SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°PubAâr
))

1325 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1326  
HI_FAILURE
;

1329 
s32Rë
 = 
SAMPLE_COMM_VO_HdmiSèπ
(
°PubAâr
.
íI¡fSync
);

1330 if(
HI_SUCCESS
 !
s32Rë
)

1332 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1333  
HI_FAILURE
;

1336 
s32Rë
 = 
HI_MPI_HDMI_SëAVMuã
(
íHdmi
, 
HI_TRUE
);

1337 if(
HI_SUCCESS
 !
s32Rë
)

1339 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1340  
HI_FAILURE
;

1343 
s32Rë
 = 
HI_MPI_HDMI_GëAâr
(
íHdmi
, &
°HdmiAâr
);

1344 if(
HI_SUCCESS
 !
s32Rë
)

1346 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1347  
HI_FAILURE
;

1350 
°HdmiAâr
.
bE«bÀAudio
 = 
HI_TRUE
;

1351 
°HdmiAâr
.
íSoundI¡f
 = 
HI_HDMI_SND_INTERFACE_I2S
;

1352 
°HdmiAâr
.
íSam∂eR©e
 = 
p°AioAâr
->
íSam∂î©e
;

1353 
°HdmiAâr
.
u8DownSam∂eP¨m
 = 
HI_FALSE
;

1355 
°HdmiAâr
.
íBôDïth
 = 8 * (
p°AioAâr
->
íBôwidth
+1);

1356 
°HdmiAâr
.
u8I2SCéVbô
 = 0;

1358 
°HdmiAâr
.
bE«bÀAviInfoFøme
 = 
HI_TRUE
;

1359 
°HdmiAâr
.
bE«bÀAudInfoFøme
 = 
HI_TRUE
;;

1361 
s32Rë
 = 
HI_MPI_HDMI_SëAâr
(
íHdmi
, &
°HdmiAâr
);

1362 if(
HI_SUCCESS
 !
s32Rë
)

1364 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1365  
HI_FAILURE
;

1368 
s32Rë
 = 
HI_MPI_HDMI_SëAVMuã
(
íHdmi
, 
HI_FALSE
);

1369 if(
HI_SUCCESS
 !
s32Rë
)

1371 
¥ötf
("[Func]:%†[Löe]:%d [Info]:%s\n", 
__FUNCTION__
, 
__LINE__
, "failed");

1372  
HI_FAILURE
;

1375  
HI_SUCCESS
;

1378 
ölöe
 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Hdmi
(
HI_VOID
)

1380 
HI_S32
 
s32Rë
;

1381 
VO_DEV
 
VoDev
 = 0;

1383 
s32Rë
 = 
SAMPLE_COMM_VO_HdmiSt›
();

1384 
s32Rë
 |
HI_MPI_VO_DißbÀ
(
VoDev
);

1385 if(
HI_SUCCESS
 !
s32Rë
)

1387 
¥ötf
("%s: HI_MPI_VO_DißbÀ faûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1388  
HI_FAILURE
;

1391  
s32Rë
;

1397 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAo
(
AUDIO_DEV
 
AoDevId
, 
AO_CHN
 
AoChn
,

1398 
AIO_ATTR_S
 *
p°AioAâr
, 
AUDIO_RESAMPLE_ATTR_S
 *
p°AoReSmpAâr
)

1400 
HI_S32
 
s32Rë
;

1402 i‡(
SAMPLE_AUDIO_HDMI_AO_DEV
 =
AoDevId
)

1404 
SAMPLE_COMM_AUDIO_SèπHdmi
(
p°AioAâr
);

1407 
s32Rë
 = 
HI_MPI_AO_SëPubAâr
(
AoDevId
, 
p°AioAâr
);

1408 if(
HI_SUCCESS
 !
s32Rë
)

1410 
¥ötf
("%s: HI_MPI_AO_SëPubAâr(%dËÁûed wôh %#x!\n", 
__FUNCTION__
, \

1411 
AoDevId
,
s32Rë
);

1412  
HI_FAILURE
;

1415 
s32Rë
 = 
HI_MPI_AO_E«bÀ
(
AoDevId
);

1416 if(
HI_SUCCESS
 !
s32Rë
)

1418 
¥ötf
("%s: HI_MPI_AO_E«bÀ(%dËÁûed wôh %#x!\n", 
__FUNCTION__
, \

1419 
AoDevId
, 
s32Rë
);

1420  
HI_FAILURE
;

1423 
s32Rë
 = 
HI_MPI_AO_E«bÀChn
(
AoDevId
, 
AoChn
);

1424 if(
HI_SUCCESS
 !
s32Rë
)

1426 
¥ötf
("%s: HI_MPI_AO_E«bÀChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,\

1427 
AoChn
, 
s32Rë
);

1428  
HI_FAILURE
;

1431 i‡(
NULL
 !
p°AoReSmpAâr
)

1433 
s32Rë
 = 
HI_MPI_AO_DißbÀReSmp
(
AoDevId
, 
AoChn
);

1434 
s32Rë
 |
HI_MPI_AO_E«bÀReSmp
(
AoDevId
, 
AoChn
, 
p°AoReSmpAâr
);

1435 if(
HI_SUCCESS
 !
s32Rë
)

1437 
¥ötf
("%s: HI_MPI_AO_EnableReSmp(%d,%d) failed with %#x!\n", \

1438 
__FUNCTION__
, 
AoDevId
, 
AoChn
, 
s32Rë
);

1439  
HI_FAILURE
;

1443  
HI_SUCCESS
;

1449 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Ao
(
AUDIO_DEV
 
AoDevId
, 
AO_CHN
 
AoChn
, 
HI_BOOL
 
bReßm∂eEn
)

1451 
HI_S32
 
s32Rë
;

1453 i‡(
HI_TRUE
 =
bReßm∂eEn
)

1455 
s32Rë
 = 
HI_MPI_AO_DißbÀReSmp
(
AoDevId
, 
AoChn
);

1456 i‡(
HI_SUCCESS
 !
s32Rë
)

1458 
¥ötf
("%s: HI_MPI_AO_DißbÀReSm∞Áûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1459  
s32Rë
;

1463 
s32Rë
 = 
HI_MPI_AO_DißbÀChn
(
AoDevId
, 
AoChn
);

1464 i‡(
HI_SUCCESS
 !
s32Rë
)

1466 
¥ötf
("%s: HI_MPI_AO_DißbÀCh¿Áûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1467  
s32Rë
;

1470 
s32Rë
 = 
HI_MPI_AO_DißbÀ
(
AoDevId
);

1471 i‡(
HI_SUCCESS
 !
s32Rë
)

1473 
¥ötf
("%s: HI_MPI_AO_DißbÀ faûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1474  
s32Rë
;

1477 i‡(
SAMPLE_AUDIO_HDMI_AO_DEV
 =
AoDevId
)

1479 
s32Rë
 = 
SAMPLE_COMM_AUDIO_St›Hdmi
();

1480 i‡(
HI_SUCCESS
 !
s32Rë
)

1482 
¥ötf
("%s: SAMPLE_COMM_AUDIO_St›HdmòÁûed wôh %#x!\n", 
__FUNCTION__
, 
s32Rë
);

1483  
s32Rë
;

1487  
HI_SUCCESS
;

1493 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAíc
(HI_S32 
s32AícChnC¡
, 
PAYLOAD_TYPE_E
 
íTy≥
)

1495 
AENC_CHN
 
AeChn
;

1496 
HI_S32
 
s32Rë
, 
i
;

1497 
AENC_CHN_ATTR_S
 
°AícAâr
;

1498 
AENC_ATTR_ADPCM_S
 
°AdpcmAíc
;

1499 
AENC_ATTR_G711_S
 
°AícG711
;

1500 
AENC_ATTR_G726_S
 
°AícG726
;

1501 
AENC_ATTR_LPCM_S
 
°AícLpcm
;

1505 
°AícAâr
.
íTy≥
 =ÉnType;

1506 
°AícAâr
.
u32BufSize
 = 30;

1508 i‡(
PT_ADPCMA
 =
°AícAâr
.
íTy≥
)

1510 
°AícAâr
.
pVÆue
 = &
°AdpcmAíc
;

1511 
°AdpcmAíc
.
íADPCMTy≥
 = 
AUDIO_ADPCM_TYPE
;

1513 i‡(
PT_G711A
 =
°AícAâr
.
íTy≥
 || 
PT_G711U
 == stAencAttr.enType)

1515 
°AícAâr
.
pVÆue
 = &
°AícG711
;

1517 i‡(
PT_G726
 =
°AícAâr
.
íTy≥
)

1519 
°AícAâr
.
pVÆue
 = &
°AícG726
;

1520 
°AícG726
.
íG726bps
 = 
G726_BPS
;

1522 i‡(
PT_LPCM
 =
°AícAâr
.
íTy≥
)

1524 
°AícAâr
.
pVÆue
 = &
°AícLpcm
;

1528 
¥ötf
("%s: invÆidáí¯∑ylﬂdÅy≥:%d\n", 
__FUNCTION__
, 
°AícAâr
.
íTy≥
);

1529  
HI_FAILURE
;

1532 
i
=0; i<
s32AícChnC¡
; i++)

1534 
AeChn
 = 
i
;

1537 
s32Rë
 = 
HI_MPI_AENC_Cª©eChn
(
AeChn
, &
°AícAâr
);

1538 i‡(
HI_SUCCESS
 !
s32Rë
)

1540 
¥ötf
("%s: HI_MPI_AENC_Cª©eChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,

1541 
AeChn
, 
s32Rë
);

1542  
s32Rë
;

1546  
HI_SUCCESS
;

1552 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Aíc
(HI_S32 
s32AícChnC¡
)

1554 
HI_S32
 
i
;

1555 
HI_S32
 
s32Rë
;

1557 
i
=0; i<
s32AícChnC¡
; i++)

1559 
s32Rë
 = 
HI_MPI_AENC_De°royChn
(
i
);

1560 i‡(
HI_SUCCESS
 !
s32Rë
)

1562 
¥ötf
("%s: HI_MPI_AENC_De°royChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,

1563 
i
, 
s32Rë
);

1564  
s32Rë
;

1569  
HI_SUCCESS
;

1575 
HI_S32
 
SAMPLE_COMM_AUDIO_SèπAdec
(
ADEC_CHN
 
AdChn
, 
PAYLOAD_TYPE_E
 
íTy≥
)

1577 
HI_S32
 
s32Rë
;

1578 
ADEC_CHN_ATTR_S
 
°AdecAâr
;

1579 
ADEC_ATTR_ADPCM_S
 
°Adpcm
;

1580 
ADEC_ATTR_G711_S
 
°AdecG711
;

1581 
ADEC_ATTR_G726_S
 
°AdecG726
;

1582 
ADEC_ATTR_LPCM_S
 
°AdecLpcm
;

1584 
°AdecAâr
.
íTy≥
 =ÉnType;

1585 
°AdecAâr
.
u32BufSize
 = 20;

1586 
°AdecAâr
.
íMode
 = 
ADEC_MODE_STREAM
;

1588 i‡(
PT_ADPCMA
 =
°AdecAâr
.
íTy≥
)

1590 
°AdecAâr
.
pVÆue
 = &
°Adpcm
;

1591 
°Adpcm
.
íADPCMTy≥
 = 
AUDIO_ADPCM_TYPE
 ;

1593 i‡(
PT_G711A
 =
°AdecAâr
.
íTy≥
 || 
PT_G711U
 == stAdecAttr.enType)

1595 
°AdecAâr
.
pVÆue
 = &
°AdecG711
;

1597 i‡(
PT_G726
 =
°AdecAâr
.
íTy≥
)

1599 
°AdecAâr
.
pVÆue
 = &
°AdecG726
;

1600 
°AdecG726
.
íG726bps
 = 
G726_BPS
 ;

1602 i‡(
PT_LPCM
 =
°AdecAâr
.
íTy≥
)

1604 
°AdecAâr
.
pVÆue
 = &
°AdecLpcm
;

1605 
°AdecAâr
.
íMode
 = 
ADEC_MODE_PACK
;

1609 
¥ötf
("%s: invÆidáí¯∑ylﬂdÅy≥:%d\n", 
__FUNCTION__
, 
°AdecAâr
.
íTy≥
);

1610  
HI_FAILURE
;

1614 
s32Rë
 = 
HI_MPI_ADEC_Cª©eChn
(
AdChn
, &
°AdecAâr
);

1615 i‡(
HI_SUCCESS
 !
s32Rë
)

1617 
¥ötf
("%s: HI_MPI_ADEC_Cª©eChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,\

1618 
AdChn
,
s32Rë
);

1619  
s32Rë
;

1627 
HI_S32
 
SAMPLE_COMM_AUDIO_St›Adec
(
ADEC_CHN
 
AdChn
)

1629 
HI_S32
 
s32Rë
;

1631 
s32Rë
 = 
HI_MPI_ADEC_De°royChn
(
AdChn
);

1632 i‡(
HI_SUCCESS
 !
s32Rë
)

1634 
¥ötf
("%s: HI_MPI_ADEC_De°royChn(%dËÁûed wôh %#x!\n", 
__FUNCTION__
,

1635 
AdChn
, 
s32Rë
);

1636  
s32Rë
;

1639  
HI_SUCCESS
;

1642 #ifde‡
__˝lu•lus


1643 #i‡
__˝lu•lus


	@HiSDK/common/sample_comm_sys.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/pﬁl.h
>

21 
	~<sys/time.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<±hªad.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

27 
	~<sig«l.h
>

29 
	~"ßm∂e_comm.h
"

34 
HI_S32
 
SAMPLE_COMM_SYS_GëPicSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
SIZE_S
 *
p°Size
)

36 
íPicSize
)

38 
PIC_QCIF
:

39 
p°Size
->
u32Width
 = 
D1_WIDTH
 / 4;

40 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
==
íN‹m
)?144:120;

42 
PIC_CIF
:

43 
p°Size
->
u32Width
 = 
D1_WIDTH
 / 2;

44 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
==
íN‹m
)?288:240;

46 
PIC_D1
:

47 
p°Size
->
u32Width
 = 
D1_WIDTH
;

48 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
==
íN‹m
)?576:480;

50 
PIC_960H
:

51 
p°Size
->
u32Width
 = 960;

52 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
==
íN‹m
)?576:480;

54 
PIC_2CIF
:

55 
p°Size
->
u32Width
 = 
D1_WIDTH
 / 2;

56 
p°Size
->
u32Height
 = (
VIDEO_ENCODING_MODE_PAL
==
íN‹m
)?576:480;

58 
PIC_QVGA
:

59 
p°Size
->
u32Width
 = 320;

60 
p°Size
->
u32Height
 = 240;

62 
PIC_VGA
:

63 
p°Size
->
u32Width
 = 640;

64 
p°Size
->
u32Height
 = 480;

66 
PIC_XGA
:

67 
p°Size
->
u32Width
 = 1024;

68 
p°Size
->
u32Height
 = 768;

70 
PIC_SXGA
:

71 
p°Size
->
u32Width
 = 1400;

72 
p°Size
->
u32Height
 = 1050;

74 
PIC_UXGA
:

75 
p°Size
->
u32Width
 = 1600;

76 
p°Size
->
u32Height
 = 1200;

78 
PIC_QXGA
:

79 
p°Size
->
u32Width
 = 2048;

80 
p°Size
->
u32Height
 = 1536;

82 
PIC_WVGA
:

83 
p°Size
->
u32Width
 = 854;

84 
p°Size
->
u32Height
 = 480;

86 
PIC_WSXGA
:

87 
p°Size
->
u32Width
 = 1680;

88 
p°Size
->
u32Height
 = 1050;

90 
PIC_WUXGA
:

91 
p°Size
->
u32Width
 = 1920;

92 
p°Size
->
u32Height
 = 1200;

94 
PIC_WQXGA
:

95 
p°Size
->
u32Width
 = 2560;

96 
p°Size
->
u32Height
 = 1600;

98 
PIC_HD720
:

99 
p°Size
->
u32Width
 = 1280;

100 
p°Size
->
u32Height
 = 720;

102 
PIC_HD1080
:

103 
p°Size
->
u32Width
 = 1920;

104 
p°Size
->
u32Height
 = 1080;

107  
HI_FAILURE
;

109  
HI_SUCCESS
;

115 
HI_U32
 
SAMPLE_COMM_SYS_CÆcHi°VbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
SIZE_S
 *
p°Hi°BlkSize
, HI_U32 
u32AlignWidth
)

117 
HI_S32
 
s32Rë
;

118 
SIZE_S
 
°PicSize
;

120 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
íN‹m
, 
íPicSize
, &
°PicSize
);

121 i‡(
HI_SUCCESS
 !
s32Rë
)

123 
SAMPLE_PRT
("gëÖi˘uª size[%d] faûed!\n", 
íPicSize
);

124  
HI_FAILURE
;

127 
SAMPLE_PRT
("stPicSize.u32Width%d,pstHistBlkSize->u32Width%d\n,stPicSize.u32Height%d,pstHistBlkSize->u32Height%d\n",

128 
°PicSize
.
u32Width
,
p°Hi°BlkSize
->u32Width,

129 
°PicSize
.
u32Height
,
p°Hi°BlkSize
->u32Height );

130  (
CEILING_2_POWER
(44, 
u32AlignWidth
)*CEILING_2_POWER(44, u32AlignWidth)*16*4);

132  
HI_SUCCESS
;

138 
HI_U32
 
SAMPLE_COMM_SYS_CÆcPicVbBlkSize
(
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íPicSize
, 
PIXEL_FORMAT_E
 
íPixFmt
, HI_U32 
u32AlignWidth
)

140 
HI_S32
 
s32Rë
 = 
HI_FAILURE
;

141 
SIZE_S
 
°Size
;

142 
HI_U32
 
u32Width
 = 0;

143 
HI_U32
 
u32Height
 = 0;

144 
HI_U32
 
u32BlkSize
 = 0;

146 
s32Rë
 = 
SAMPLE_COMM_SYS_GëPicSize
(
íN‹m
, 
íPicSize
, &
°Size
);

147 i‡(
HI_SUCCESS
 !
s32Rë
)

149 
SAMPLE_PRT
("gëÖi˘uª size[%d] faûed!\n", 
íPicSize
);

150  
HI_FAILURE
;

153 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 !
íPixFmt
 && 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
 !=ÉnPixFmt)

155 
SAMPLE_PRT
("pixñ f‹m©[%d] i≈uàÁûed!\n", 
íPixFmt
);

156  
HI_FAILURE
;

159 i‡(16!=
u32AlignWidth
 && 32!=u32AlignWidth && 64!=u32AlignWidth)

161 
SAMPLE_PRT
("systemálign width[%d] input failed!\n",\

162 
u32AlignWidth
);

163  
HI_FAILURE
;

165 i‡(704 =
°Size
.
u32Width
)

167 
°Size
.
u32Width
 = 720;

171 
u32Width
 = 
CEILING_2_POWER
(
°Size
.u32Width, 
u32AlignWidth
);

172 
u32Height
 = 
CEILING_2_POWER
(
°Size
.u32Height,
u32AlignWidth
);

174 i‡(
PIXEL_FORMAT_YUV_SEMIPLANAR_422
 =
íPixFmt
)

176 
u32BlkSize
 = 
u32Width
 * 
u32Height
 * 2;

180 
u32BlkSize
 = 
u32Width
 * 
u32Height
 * 3 / 2;

183  
u32BlkSize
;

189 
HI_S32
 
SAMPLE_COMM_SYS_MemC⁄fig
(
HI_VOID
)

191 
HI_S32
 
i
 = 0;

192 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

194 
HI_CHAR
 * 
pcMmzName
 = 
NULL
;

195 
MPP_CHN_S
 
°MµChnVO
;

196 
MPP_CHN_S
 
°MµChnVPSS
;

197 
MPP_CHN_S
 
°MµChnVENC
;

198 
MPP_CHN_S
 
°MµChnVDEC
;

201 
i
=0; i<
VDEC_MAX_CHN_NUM
; i++)

203 
°MµChnVDEC
.
íModId
 = 
HI_ID_VDEC
;

204 
°MµChnVDEC
.
s32DevId
 = 0;

205 
°MµChnVDEC
.
s32ChnId
 = 
i
;

208 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVDEC
,
pcMmzName
);

209 i‡(
s32Rë
)

211 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

212  
HI_FAILURE
;

218 
i
=0;i<64;i++)

220 
°MµChnVPSS
.
íModId
 = 
HI_ID_VPSS
;

221 
°MµChnVPSS
.
s32DevId
 = 
i
;

222 
°MµChnVPSS
.
s32ChnId
 = 0;

224 
°MµChnVENC
.
íModId
 = 
HI_ID_VENC
;

225 
°MµChnVENC
.
s32DevId
 = 0;

226 
°MµChnVENC
.
s32ChnId
 = 
i
;

229 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVPSS
, 
pcMmzName
);

230 i‡(
s32Rë
)

232 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

233  
HI_FAILURE
;

237 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVENC
,
pcMmzName
);

238 i‡(
s32Rë
)

240 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

241  
HI_FAILURE
;

247 
°MµChnVO
.
íModId
 = 
HI_ID_VOU
;

248 
°MµChnVO
.
s32DevId
 = 0;

249 
°MµChnVO
.
s32ChnId
 = 0;

250 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVO
, 
pcMmzName
);

251 i‡(
s32Rë
)

253 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

254  
HI_FAILURE
;

257  
s32Rë
;

263 
HI_S32
 
SAMPLE_COMM_SYS_Inô
(
VB_CONF_S
 *
p°VbC⁄f
)

265 
MPP_SYS_CONF_S
 
°SysC⁄f
 = {0};

267 
HI_S32
 
s32Rë
 = 
HI_FAILURE
;

268 
HI_S32
 
i
;

271 
i
=0;i<
VB_MAX_USER
;i++)

273 
HI_MPI_VB_ExôModCommPoﬁ
(
i
);

275 
HI_MPI_SYS_Exô
();

276 
HI_MPI_VB_Exô
();

278 i‡(
NULL
 =
p°VbC⁄f
)

280 
SAMPLE_PRT
("inputÖarameter isÇull, it is invaild!\n");

281  
HI_FAILURE
;

284 
s32Rë
 = 
HI_MPI_VB_SëC⁄f
(
p°VbC⁄f
);

285 i‡(
HI_SUCCESS
 !
s32Rë
)

287 
SAMPLE_PRT
("HI_MPI_VB_SetConf failed!\n");

288  
HI_FAILURE
;

291 
s32Rë
 = 
HI_MPI_VB_Inô
();

292 i‡(
HI_SUCCESS
 !
s32Rë
)

294 
SAMPLE_PRT
("HI_MPI_VB_Init failed!\n");

295  
HI_FAILURE
;

298 
°SysC⁄f
.
u32AlignWidth
 = 
SAMPLE_SYS_ALIGN_WIDTH
;

299 
s32Rë
 = 
HI_MPI_SYS_SëC⁄f
(&
°SysC⁄f
);

300 i‡(
HI_SUCCESS
 !
s32Rë
)

302 
SAMPLE_PRT
("HI_MPI_SYS_SetConf failed\n");

303  
HI_FAILURE
;

306 
s32Rë
 = 
HI_MPI_SYS_Inô
();

307 i‡(
HI_SUCCESS
 !
s32Rë
)

309 
SAMPLE_PRT
("HI_MPI_SYS_Init failed!\n");

310  
HI_FAILURE
;

313  
HI_SUCCESS
;

319 
HI_S32
 
SAMPLE_COMM_SYS_Paylﬂd2FûePo°fix
(
PAYLOAD_TYPE_E
 
íPaylﬂd
, 
HI_CHAR
* 
szFûePo°fix
)

321 i‡(
PT_H264
 =
íPaylﬂd
)

323 
°r˝y
(
szFûePo°fix
, ".h264");

325 i‡(
PT_JPEG
 =
íPaylﬂd
)

327 
°r˝y
(
szFûePo°fix
, ".jpg");

329 i‡(
PT_MJPEG
 =
íPaylﬂd
)

331 
°r˝y
(
szFûePo°fix
, ".mjp");

335 
SAMPLE_PRT
("payloadÅypeÉrr!\n");

336  
HI_FAILURE
;

338  
HI_SUCCESS
;

344 
HI_VOID
 
SAMPLE_COMM_SYS_Exô
()

347 
HI_S32
 
i
;

349 
HI_MPI_SYS_Exô
();

350 
i
=0;i<
VB_MAX_USER
;i++)

352 
HI_MPI_VB_ExôModCommPoﬁ
(
i
);

354 
HI_MPI_VB_Exô
();

358 #ifde‡
__˝lu•lus


359 #i‡
__˝lu•lus


	@HiSDK/common/sample_comm_vda.c

9 #ifde‡
__˝lu•lus


10 #i‡
__˝lu•lus


15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/io˘l.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/time.h
>

23 
	~<f˙é.h
>

24 
	~<î∫o.h
>

25 
	~<±hªad.h
>

26 
	~<m©h.h
>

27 
	~<uni°d.h
>

28 
	~<sig«l.h
>

30 
	~"ßm∂e_comm.h
"

32 
	shiVDA_OD_PARAM_S


34 
HI_BOOL
 
bThªadSèπ
;

35 
VDA_CHN
 
VdaChn
;

36 }
	tVDA_OD_PARAM_S
;

37 
	shiVDA_MD_PARAM_S


39 
HI_BOOL
 
bThªadSèπ
;

40 
VDA_CHN
 
VdaChn
;

41 }
	tVDA_MD_PARAM_S
;

43 
	#SAMPLE_VDA_MD_CHN
 0

	)

44 
	#SAMPLE_VDA_OD_CHN
 1

	)

46 
±hªad_t
 
gs_VdaPid
[2];

47 
VDA_MD_PARAM_S
 
gs_°MdP¨am
;

48 
VDA_OD_PARAM_S
 
gs_°OdP¨am
;

53 
HI_S32
 
SAMPLE_COMM_VDA_MdPπObj
(
FILE
 *
Â
, 
VDA_DATA_S
 *
p°VdaD©a
)

55 
VDA_OBJ_S
 *
p°VdaObj
;

56 
HI_S32
 
i
;

58 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

60 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bObjVÆid
)

62 
Ârötf
(
Â
, "bMbObjValid = FALSE.\n");

63  
HI_SUCCESS
;

66 
Ârötf
(
Â
, "ObjNum=%d, IndexOfMaxObj=%d, SizeOfMaxObj=%d, SizeOfTotalObj=%d\n", \

67 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32ObjNum
, \

68 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32IndexOfMaxObj
, \

69 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32SizeOfMaxObj
,\

70 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32SizeOfTŸÆObj
);

71 
i
=0; i<
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
u32ObjNum
; i++)

73 
p°VdaObj
 = 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°ObjD©a
.
p°Addr
 + 
i
;

74 
Ârötf
(
Â
, "[%d]\àÀ·=%d,Å›=%d,Ñight=%d, bŸtom=%d\n", 
i
, \

75 
p°VdaObj
->
u16Le·
,Ö°VdaObj->
u16T›
, \

76 
p°VdaObj
->
u16Right
,Ö°VdaObj->
u16BŸtom
);

78 
fÊush
(
Â
);

79  
HI_SUCCESS
;

84 
HI_S32
 
SAMPLE_COMM_VDA_MdPπAp
(
FILE
 *
Â
, 
VDA_DATA_S
 *
p°VdaD©a
)

86 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

88 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bPñsNumVÆid
)

90 
Ârötf
(
Â
, "bMbObjValid = FALSE.\n");

91  
HI_SUCCESS
;

94 
Ârötf
(
Â
, "AœrmPixñCou¡=%d\n", 
p°VdaD©a
->
unD©a
.
°MdD©a
.
u32AœrmPixC¡
);

95 
fÊush
(
Â
);

96  
HI_SUCCESS
;

102 
HI_S32
 
SAMPLE_COMM_VDA_MdPπSad
(
FILE
 *
Â
, 
VDA_DATA_S
 *
p°VdaD©a
)

104 
HI_S32
 
i
, 
j
;

105 
HI_VOID
 *
pAddr
;

107 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

108 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bMbSadVÆid
)

110 
Ârötf
(
Â
, "bMbSadValid = FALSE.\n");

111  
HI_SUCCESS
;

114 
i
=0; i<
p°VdaD©a
->
u32MbHeight
; i++)

116 
pAddr
 = (
HI_VOID
 *)((
HI_U32
)
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.pAddr

117 + 
i
 * 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.
u32Såide
);

119 
j
=0; j<
p°VdaD©a
->
u32MbWidth
; j++)

121 
HI_U8
 *
pu8Addr
;

122 
HI_U16
 *
pu16Addr
;

124 if(
VDA_MB_SAD_8BIT
 =
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.
íMbSadBôs
)

126 
pu8Addr
 = (
HI_U8
 *)
pAddr
 + 
j
;

128 
Ârötf
(
Â
, "%-2d ",*
pu8Addr
);

133 
pu16Addr
 = (
HI_U16
 *)
pAddr
 + 
j
;

135 
Ârötf
(
Â
, "%-4d ",*
pu16Addr
);

139 
¥ötf
("\n");

142 
fÊush
(
Â
);

143  
HI_SUCCESS
;

148 
HI_VOID
 *
SAMPLE_COMM_VDA_MdGëResu…
(HI_VOID *
pd©a
)

150 
HI_S32
 
s32Rë
;

151 
VDA_CHN
 
VdaChn
;

152 
VDA_DATA_S
 
°VdaD©a
;

153 
VDA_MD_PARAM_S
 *
pgs_°MdP¨am
;

154 
HI_S32
 
maxfd
 = 0;

155 
FILE
 *
Â
 = 
°dout
;

156 
HI_S32
 
VdaFd
;

157 
fd_£t
 
ªad_fds
;

158 
timevÆ
 
TimeoutVÆ
;

160 
pgs_°MdP¨am
 = (
VDA_MD_PARAM_S
 *)
pd©a
;

162 
VdaChn
 = 
pgs_°MdP¨am
->VdaChn;

166 
VdaFd
 = 
HI_MPI_VDA_GëFd
(
VdaChn
);

167 i‡(
VdaFd
 < 0)

169 
SAMPLE_PRT
("HI_MPI_VDA_GetFd failed with %#x!\n",

170 
VdaFd
);

171  
NULL
;

173 i‡(
maxfd
 <
VdaFd
)

175 
maxfd
 = 
VdaFd
;

177 
sy°em
("clear");

178 
HI_TRUE
 =
pgs_°MdP¨am
->
bThªadSèπ
)

180 
FD_ZERO
(&
ªad_fds
);

181 
FD_SET
(
VdaFd
, &
ªad_fds
);

183 
TimeoutVÆ
.
tv_£c
 = 2;

184 
TimeoutVÆ
.
tv_u£c
 = 0;

185 
s32Rë
 = 
£À˘
(
maxfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

186 i‡(
s32Rë
 < 0)

188 
SAMPLE_PRT
("select failed!\n");

191 i‡(
s32Rë
 == 0)

193 
SAMPLE_PRT
("get vdaÑesultÅime out,ÉxitÅhread\n");

198 i‡(
FD_ISSET
(
VdaFd
, &
ªad_fds
))

203 
s32Rë
 = 
HI_MPI_VDA_GëD©a
(
VdaChn
, &
°VdaD©a
, -1);

204 if(
s32Rë
 !
HI_SUCCESS
)

206 
SAMPLE_PRT
("HI_MPI_VDA_GëD©®Áûed wôh %#x!\n", 
s32Rë
);

207  
NULL
;

212 
¥ötf
("\033[0;0H");

213 
SAMPLE_COMM_VDA_MdPπSad
(
Â
, &
°VdaD©a
);

214 
SAMPLE_COMM_VDA_MdPπObj
(
Â
, &
°VdaD©a
);

215 
SAMPLE_COMM_VDA_MdPπAp
(
Â
, &
°VdaD©a
);

219 
s32Rë
 = 
HI_MPI_VDA_Rñó£D©a
(
VdaChn
,&
°VdaD©a
);

220 if(
s32Rë
 !
HI_SUCCESS
)

222 
SAMPLE_PRT
("HI_MPI_VDA_Rñó£D©®Áûed wôh %#x!\n", 
s32Rë
);

223  
NULL
;

229  
HI_NULL
;

235 
HI_S32
 
SAMPLE_COMM_VDA_OdPπ
(
FILE
 *
Â
, 
VDA_DATA_S
 *
p°VdaD©a
)

237 
HI_S32
 
i
;

239 
Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

240 
Ârötf
(
Â
, "ODÑegi⁄ÅŸÆ cou¡ =%d\n", 
p°VdaD©a
->
unD©a
.
°OdD©a
.
u32RgnNum
);

241 
i
=0; i<
p°VdaD©a
->
unD©a
.
°OdD©a
.
u32RgnNum
; i++)

243 
Ârötf
(
Â
, "ODÑegi⁄[%d]: %d\n", 
i
, 
p°VdaD©a
->
unD©a
.
°OdD©a
.
abRgnAœrm
[i]);

245 
fÊush
(
Â
);

246  
HI_SUCCESS
;

252 
HI_VOID
 *
SAMPLE_COMM_VDA_OdGëResu…
(HI_VOID *
pd©a
)

254 
HI_S32
 
i
;

255 
HI_S32
 
s32Rë
;

256 
VDA_CHN
 
VdaChn
;

257 
VDA_DATA_S
 
°VdaD©a
;

258 
HI_U32
 
u32RgnNum
;

259 
VDA_OD_PARAM_S
 *
pgs_°OdP¨am
;

260 
FILE
 *
Â
=
°dout
;

262 
pgs_°OdP¨am
 = (
VDA_OD_PARAM_S
 *)
pd©a
;

264 
VdaChn
 = 
pgs_°OdP¨am
->VdaChn;

267 
HI_TRUE
 =
pgs_°OdP¨am
->
bThªadSèπ
)

269 
s32Rë
 = 
HI_MPI_VDA_GëD©a
(
VdaChn
,&
°VdaD©a
,-1);

270 if(
s32Rë
 !
HI_SUCCESS
)

272 
SAMPLE_PRT
("HI_MPI_VDA_GëD©®Áûed wôh %#x!\n", 
s32Rë
);

273  
NULL
;

276 
SAMPLE_COMM_VDA_OdPπ
(
Â
, &
°VdaD©a
);

278 
u32RgnNum
 = 
°VdaD©a
.
unD©a
.
°OdD©a
.u32RgnNum;

280 
i
=0; i<
u32RgnNum
; i++)

282 if(
HI_TRUE
 =
°VdaD©a
.
unD©a
.
°OdD©a
.
abRgnAœrm
[
i
])

284 
¥ötf
("################VdaChn--%d,Rgn--%d,Occ!\n",
VdaChn
,
i
);

285 
s32Rë
 = 
HI_MPI_VDA_Re£tOdRegi⁄
(
VdaChn
,
i
);

286 if(
s32Rë
 !
HI_SUCCESS
)

288 
SAMPLE_PRT
("HI_MPI_VDA_Re£tOdRegi⁄ faûed wôh %#x!\n", 
s32Rë
);

289  
NULL
;

294 
s32Rë
 = 
HI_MPI_VDA_Rñó£D©a
(
VdaChn
,&
°VdaD©a
);

295 if(
s32Rë
 !
HI_SUCCESS
)

297 
SAMPLE_PRT
("HI_MPI_VDA_Rñó£D©®Áûed wôh %#x!\n", 
s32Rë
);

298  
NULL
;

301 
u¶ìp
(200*1000);

304  
HI_NULL
;

310 
HI_S32
 
SAMPLE_COMM_VDA_MdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
 *
p°Size
)

312 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

313 
VDA_CHN_ATTR_S
 
°VdaChnAâr
;

314 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

316 i‡(
VDA_MAX_WIDTH
 < 
p°Size
->
u32Width
 || 
VDA_MAX_HEIGHT
 <Ö°Size->
u32Height
)

318 
SAMPLE_PRT
("Picture size invaild!\n");

319  
HI_FAILURE
;

323 
°VdaChnAâr
.
íW‹kMode
 = 
VDA_WORK_MODE_MD
;

324 
°VdaChnAâr
.
u32Width
 = 
p°Size
->u32Width;

325 
°VdaChnAâr
.
u32Height
 = 
p°Size
->u32Height;

327 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íVdaAlg
 = 
VDA_ALG_REF
;

328 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íMbSize
 = 
VDA_MB_16PIXEL
;

329 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íMbSadBôs
 = 
VDA_MB_SAD_8BIT
;

330 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íRefMode
 = 
VDA_REF_MODE_DYNAMIC
;

331 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32MdBufNum
 = 8;

332 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32VdaI¡vl
 = 4;

333 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32BgUpSrcWgt
 = 128;

334 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32SadTh
 = 100;

335 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32ObjNumMax
 = 128;

337 
s32Rë
 = 
HI_MPI_VDA_Cª©eChn
(
VdaChn
, &
°VdaChnAâr
);

338 if(
s32Rë
 !
HI_SUCCESS
)

340 
SAMPLE_PRT
("err!\n");

341  
s32Rë
;

345 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

346 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

347 
°SrcChn
.
s32DevId
 = 0;

349 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

350 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

351 
°De°Chn
.
s32DevId
 = 0;

353 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

354 if(
s32Rë
 !
HI_SUCCESS
)

356 
SAMPLE_PRT
("err!\n");

357  
s32Rë
;

361 
s32Rë
 = 
HI_MPI_VDA_SèπRecvPic
(
VdaChn
);

362 if(
s32Rë
 !
HI_SUCCESS
)

364 
SAMPLE_PRT
("err!\n");

365  
s32Rë
;

368 
gs_°MdP¨am
.
bThªadSèπ
 = 
HI_TRUE
;

369 
gs_°MdP¨am
.
VdaChn
 = VdaChn;

371 
±hªad_¸óã
(&
gs_VdaPid
[
SAMPLE_VDA_MD_CHN
],0, 
SAMPLE_COMM_VDA_MdGëResu…
, (
HI_VOID
 *)&
gs_°MdP¨am
);

373  
HI_SUCCESS
;

378 
HI_S32
 
SAMPLE_COMM_VDA_OdSèπ
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
, 
SIZE_S
 *
p°Size
)

380 
VDA_CHN_ATTR_S
 
°VdaChnAâr
;

381 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

382 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

384 i‡(
VDA_MAX_WIDTH
 < 
p°Size
->
u32Width
 || 
VDA_MAX_HEIGHT
 <Ö°Size->
u32Height
)

386 
SAMPLE_PRT
("Picture size invaild!\n");

387  
HI_FAILURE
;

393 
°VdaChnAâr
.
íW‹kMode
 = 
VDA_WORK_MODE_OD
;

394 
°VdaChnAâr
.
u32Width
 = 
p°Size
->u32Width;

395 
°VdaChnAâr
.
u32Height
 = 
p°Size
->u32Height;

397 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íVdaAlg
 = 
VDA_ALG_REF
;

398 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íMbSize
 = 
VDA_MB_8PIXEL
;

399 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íMbSadBôs
 = 
VDA_MB_SAD_8BIT
;

400 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
íRefMode
 = 
VDA_REF_MODE_DYNAMIC
;

401 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
u32VdaI¡vl
 = 4;

402 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
u32BgUpSrcWgt
 = 128;

404 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
u32RgnNum
 = 1;

406 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
s32X
 = 0;

407 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
s32Y
 = 0;

408 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
u32Width
 = 
p°Size
->u32Width;

409 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
°Re˘
.
u32Height
 = 
p°Size
->u32Height;

411 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32SadTh
 = 100;

412 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32AªaTh
 = 60;

413 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32OccC¡Th
 = 6;

414 
°VdaChnAâr
.
unAâr
.
°OdAâr
.
a°OdRgnAâr
[0].
u32UnOccC¡Th
 = 2;

416 
s32Rë
 = 
HI_MPI_VDA_Cª©eChn
(
VdaChn
, &
°VdaChnAâr
);

417 if(
s32Rë
 !
HI_SUCCESS
)

419 
SAMPLE_PRT
("err!\n");

420 (
s32Rë
);

426 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

427 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

428 
°SrcChn
.
s32DevId
 = 0;

430 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

431 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

432 
°De°Chn
.
s32DevId
 = 0;

434 
s32Rë
 = 
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

435 if(
s32Rë
 !
HI_SUCCESS
)

437 
SAMPLE_PRT
("err!\n");

438  
s32Rë
;

442 
s32Rë
 = 
HI_MPI_VDA_SèπRecvPic
(
VdaChn
);

443 if(
s32Rë
 !
HI_SUCCESS
)

445 
SAMPLE_PRT
("err!\n");

446 (
s32Rë
);

450 
gs_°OdP¨am
.
bThªadSèπ
 = 
HI_TRUE
;

451 
gs_°OdP¨am
.
VdaChn
 = VdaChn;

453 
±hªad_¸óã
(&
gs_VdaPid
[
SAMPLE_VDA_OD_CHN
], 0, 
SAMPLE_COMM_VDA_OdGëResu…
, (
HI_VOID
 *)&
gs_°OdP¨am
);

455  
HI_SUCCESS
;

460 
HI_VOID
 
SAMPLE_COMM_VDA_MdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
)

462 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

464 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

467 i‡(
HI_TRUE
 =
gs_°MdP¨am
.
bThªadSèπ
)

469 
gs_°MdP¨am
.
bThªadSèπ
 = 
HI_FALSE
;

470 
±hªad_joö
(
gs_VdaPid
[
SAMPLE_VDA_MD_CHN
], 0);

474 
s32Rë
 = 
HI_MPI_VDA_St›RecvPic
(
VdaChn
);

475 if(
s32Rë
 !
HI_SUCCESS
)

477 
SAMPLE_PRT
("îr(0x%x)!!!!\n",
s32Rë
);

482 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

483 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

484 
°SrcChn
.
s32DevId
 = 0;

485 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

486 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

487 
°De°Chn
.
s32DevId
 = 0;

489 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

490 if(
s32Rë
 !
HI_SUCCESS
)

492 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

496 
s32Rë
 = 
HI_MPI_VDA_De°royChn
(
VdaChn
);

497 if(
s32Rë
 !
HI_SUCCESS
)

499 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

508 
HI_VOID
 
SAMPLE_COMM_VDA_OdSt›
(
VDA_CHN
 
VdaChn
, 
HI_U32
 
u32Chn
)

510 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

511 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

514 i‡(
HI_TRUE
 =
gs_°OdP¨am
.
bThªadSèπ
)

516 
gs_°OdP¨am
.
bThªadSèπ
 = 
HI_FALSE
;

517 
±hªad_joö
(
gs_VdaPid
[
SAMPLE_VDA_OD_CHN
], 0);

521 
s32Rë
 = 
HI_MPI_VDA_St›RecvPic
(
VdaChn
);

522 if(
s32Rë
 !
HI_SUCCESS
)

524 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

528 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

529 
°SrcChn
.
s32ChnId
 = 
u32Chn
;

530 
°SrcChn
.
s32DevId
 = 0;

531 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

532 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

533 
°De°Chn
.
s32DevId
 = 0;

534 
s32Rë
 = 
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

535 if(
s32Rë
 !
HI_SUCCESS
)

537 
SAMPLE_PRT
("îr(0x%x)!!!!\n", 
s32Rë
);

541 
s32Rë
 = 
HI_MPI_VDA_De°royChn
(
VdaChn
);

542 if(
s32Rë
 !
HI_SUCCESS
)

544 
SAMPLE_PRT
("îr(0x%x)!!!!\n",
s32Rë
);

549 #ifde‡
__˝lu•lus


550 #i‡
__˝lu•lus


	@HiSDK/common/sample_comm_vdec.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/pﬁl.h
>

21 
	~<sys/time.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<±hªad.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

27 
	~<sig«l.h
>

28 
	~"ßm∂e_comm.h
"

29 
	~"../../shm/shm_buf.h
"

33 
HI_BOOL
 
g_ModCommVB
 = 
HI_TRUE
;

35 
	#PRINTF_VDEC_CHN_STATE
(
Chn
, 
°ChnSèt
Ë\

	)

37 
¥ötf
(" chn:%2d, bStart:%2d, DecodeFrames:%4d, LeftPics:%3d, LeftBytes:%10d, LeftFrames:%4d, RecvFrames:%6d\n",\

38 
Chn
,\

39 
°ChnSèt
.
bSèπRecvSåóm
,\

40 
°ChnSèt
.
u32DecodeSåómFømes
,\

41 
°ChnSèt
.
u32Le·Pics
,\

42 
°ChnSèt
.
u32Le·SåómByãs
,\

43 
°ChnSèt
.
u32Le·SåómFømes
,\

44 
°ChnSèt
.
u32RecvSåómFømes
);\

50 
HI_VOID
 
SAMPLE_COMM_VDEC_Sysc⁄f
(
VB_CONF_S
 *
p°VbC⁄f
, 
SIZE_S
 *
p°Size
)

52 
mem£t
(
p°VbC⁄f
, 0, (
VB_CONF_S
));

53 
p°VbC⁄f
->
u32MaxPoﬁC¡
 = 2;

54 
p°VbC⁄f
->
a°CommPoﬁ
[0].
u32BlkSize
 = (1920 * 1080 * 3) >> 1;

55 
p°VbC⁄f
->
a°CommPoﬁ
[0].
u32BlkC¡
 = 5;

59 
HI_VOID
 
SAMPLE_COMM_VDEC_ModCommPoﬁC⁄f
(
VB_CONF_S
 *
p°ModVbC⁄f
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
SIZE_S
 *
p°Size
)

61 
HI_S32
 
PicSize
;

62 
HI_S32
 
PmvSize
;

64 
mem£t
(
p°ModVbC⁄f
, 0, (
VB_CONF_S
));

65 
p°ModVbC⁄f
->
u32MaxPoﬁC¡
 = 2;

66 
VB_PIC_BLK_SIZE
(1920, 1080, 
íTy≥
, 
PicSize
);

67 
p°ModVbC⁄f
->
a°CommPoﬁ
[0].
u32BlkSize
 = 
PicSize
;

68 
p°ModVbC⁄f
->
a°CommPoﬁ
[0].
u32BlkC¡
 = 20;

70 
VB_PMV_BLK_SIZE
(
p°Size
->
u32Width
,Ö°Size->
u32Height
, 
PmvSize
);

71 
p°ModVbC⁄f
->
a°CommPoﬁ
[1].
u32BlkSize
 = 
PmvSize
;

72 
p°ModVbC⁄f
->
a°CommPoﬁ
[1].
u32BlkC¡
 = 0;

75 
HI_VOID
 
SAMPLE_COMM_VDEC_ChnAâr
(
HI_S32
 
s32ChnNum
, 
VDEC_CHN_ATTR_S
 *
p°VdecChnAâr
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
SIZE_S
 *
p°Size
)

77 
p°VdecChnAâr
->
íTy≥
 =ÉnType;

78 
p°VdecChnAâr
->
u32BufSize
 = 2 * 
p°Size
->
u32Width
 *Ö°Size->
u32Height
;

79 
p°VdecChnAâr
->
u32Pri‹ôy
 = 1;

80 
p°VdecChnAâr
->
u32PicWidth
 = 
p°Size
->
u32Width
;

81 
p°VdecChnAâr
->
u32PicHeight
 = 
p°Size
->
u32Height
;

82 i‡(
PT_H264
 =
íTy≥
 || 
PT_MP4VIDEO
 ==ÉnType)

84 
p°VdecChnAâr
->
°VdecVideoAâr
.
íMode
=
VIDEO_MODE_FRAME
;

85 
p°VdecChnAâr
->
°VdecVideoAâr
.
u32RefFømeNum
 = 1;

86 
p°VdecChnAâr
->
°VdecVideoAâr
.
s32Suµ‹tBFøme
=0;

88 i‡(
PT_JPEG
 =
íTy≥
 || 
PT_MJPEG
 ==ÉnType)

90 
p°VdecChnAâr
->
°VdecJ≥gAâr
.
íMode
 = 
VIDEO_MODE_FRAME
;

94 
HI_VOID
 
SAMPLE_COMM_VDEC_VpssGΩAâr
(
HI_S32
 
s32ChnNum
, 
VPSS_GRP_ATTR_S
 *
p°VpssGΩAâr
, 
SIZE_S
 *
p°Size
)

96 
p°VpssGΩAâr
->
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

97 
p°VpssGΩAâr
->
bIeEn
 = 
HI_FALSE
;

98 
p°VpssGΩAâr
->
bDciEn
 = 
HI_TRUE
;

99 
p°VpssGΩAâr
->
bNrEn
 = 
HI_TRUE
;

100 
p°VpssGΩAâr
->
bHi°En
 = 
HI_FALSE
;

101 
p°VpssGΩAâr
->
íPixFmt
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

102 
p°VpssGΩAâr
->
u32MaxW
 = 
ALIGN_UP
(
p°Size
->
u32Width
, 16);

103 
p°VpssGΩAâr
->
u32MaxH
 = 
ALIGN_UP
(
p°Size
->
u32Height
, 16);

108 
HI_VOID
 
SAMPLE_COMM_VDEC_VoAâr
(
HI_S32
 
s32ChnNum
, 
VO_DEV
 
VoDev
 ,
VO_PUB_ATTR_S
 *
p°VoPubAâr
, 
VO_VIDEO_LAYER_ATTR_S
 *
p°VoLayîAâr
)

110 
HI_S32
 
u32Width
 = 0, 
u32Height
 = 0;

113 i‡(0 =
VoDev
)

115 
p°VoPubAâr
->
íI¡fSync
 = 
VO_OUTPUT_720P50
;

116 
p°VoPubAâr
->
íI¡fTy≥
 = 
VO_INTF_BT1120
 | 
VO_INTF_VGA
;

118 i‡(1 =
VoDev
)

120 
p°VoPubAâr
->
íI¡fSync
 = 
VO_OUTPUT_720P50
;

121 
p°VoPubAâr
->
íI¡fTy≥
 = 
VO_INTF_VGA
;

123 i‡(
VoDev
>=2 && VoDev <=3)

125 
p°VoPubAâr
->
íI¡fSync
 = 
VO_OUTPUT_PAL
;

126 
p°VoPubAâr
->
íI¡fTy≥
 = 
VO_INTF_CVBS
;

129 
p°VoPubAâr
->
u32BgCﬁ‹
 = 
VO_BKGRD_BLACK
;

133 if(
p°VoPubAâr
->
íI¡fSync
 =
VO_OUTPUT_720P50
)

135 
u32Width
 = 1280;

136 
u32Height
 = 720;

138 i‡(
p°VoPubAâr
->
íI¡fSync
 =
VO_OUTPUT_PAL
)

140 
u32Width
 = 720;

141 
u32Height
 = 576;

143 
p°VoLayîAâr
->
°Di•Re˘
.
s32X
 = 0;

144 
p°VoLayîAâr
->
°Di•Re˘
.
s32Y
 = 0;

145 
p°VoLayîAâr
->
°Di•Re˘
.
u32Width
 = u32Width;

146 
p°VoLayîAâr
->
°Di•Re˘
.
u32Height
 = u32Height;

147 
p°VoLayîAâr
->
°ImageSize
.
u32Width
 = u32Width;

148 
p°VoLayîAâr
->
°ImageSize
.
u32Height
 = u32Height;

149 
p°VoLayîAâr
->
bDoubÀFøme
 = 
HI_FALSE
;

150 
p°VoLayîAâr
->
bClu°îMode
 = 
HI_FALSE
;

151 
p°VoLayîAâr
->
u32Di•FrmRt
 = 30;

152 
p°VoLayîAâr
->
íPixF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

158 
HI_VOID
 
SAMPLE_COMM_VDEC_ThªadP¨am
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
,

159 
VDEC_CHN_ATTR_S
 *
p°VdecChnAâr
, *
pSåómFûeName
)

161 
i
;

163 
i
=0; i<
s32ChnNum
; i++)

165 
•rötf
(
p°VdecSíd
[
i
].
cFûeName
, 
pSåómFûeName
, i);

166 
p°VdecSíd
[
i
].
s32MûliSec
 = 0;

167 
p°VdecSíd
[
i
].
s32ChnId
 = i;

168 
p°VdecSíd
[
i
].
s32I¡îvÆTime
 = 1;

169 
p°VdecSíd
[
i
].
u64PtsInô
 = 0;

170 
p°VdecSíd
[
i
].
u64PtsIn¸ó£
 = 0;

171 
p°VdecSíd
[
i
].
eCålSöÆ
 = 
VDEC_CTRL_START
;

172 
p°VdecSíd
[
i
].
bLo›Síd
 = 
HI_TRUE
;

173 
p°VdecSíd
[
i
].
íTy≥
 = 
PT_H264
;

174 
p°VdecSíd
[
i
].
s32MöBufSize
 = 
p°VdecChnAâr
[i].
u32PicWidth
 *Ö°VdecChnAâr[i].
u32PicHeight
;

175 i‡(
PT_H264
 =
p°VdecChnAâr
[
i
].
íTy≥
 || 
PT_MP4VIDEO
 ==ÖstVdecChnAttr[i].enType)

177 
p°VdecSíd
[
i
].
s32SåómMode
 = 
p°VdecChnAâr
[i].
°VdecVideoAâr
.
íMode
;

181 
p°VdecSíd
[
i
].
s32SåómMode
 = 
VIDEO_MODE_FRAME
;

186 
HI_S32
 
SAMPLE_COMM_VDEC_InôModCommVb
(
VB_CONF_S
 *
p°ModVbC⁄f
)

188 
HI_MPI_VB_ExôModCommPoﬁ
(
VB_UID_VDEC
);

190 if(
HI_TRUE
=
g_ModCommVB
)

192 
CHECK_RET
(
HI_MPI_VB_SëModPoﬁC⁄f
(
VB_UID_VDEC
, 
p°ModVbC⁄f
), "HI_MPI_VB_SetModPoolConf");

193 
CHECK_RET
(
HI_MPI_VB_InôModCommPoﬁ
(
VB_UID_VDEC
), "HI_MPI_VB_InitModCommPool");

195  
HI_SUCCESS
;

199 
HI_VOID
 * 
SAMPLE_COMM_VDEC_SídSåóm
(HI_VOID *
pArgs
)

201 
VdecThªadP¨am
 *
p°VdecThªadP¨am
 =(VdecThªadP¨am *)
pArgs
;

202 
FILE
 *
ÂSåm
=
NULL
;

203 *
pu8Buf
 = 
NULL
;

204 
VDEC_STREAM_S
 
°Såóm
;

205 
HI_BOOL
 
bFödSèπ
, 
bFödEnd
;

206 
HI_S32
 
s32Rë
, 
i
, 
°¨t
 = 0;

207 
HI_S32
 
s32U£dByãs
 = 0, 
s32RódLí
 = 0;

208 
HI_U64
 
u64±s
 = 0;

209 
HI_S32
 
Àn
;

211 if(
p°VdecThªadP¨am
->
cFûeName
 != 0)

213 
ÂSåm
 = 
f›í
(
p°VdecThªadP¨am
->
cFûeName
, "rb");

214 if(
ÂSåm
 =
NULL
)

216 
¥ötf
("SAMPLE_TEST:ˇn'à›í fûê%†ö síd såómÅhªad:%d\n",
p°VdecThªadP¨am
->
cFûeName
,Ö°VdecThªadP¨am->
s32ChnId
);

217  (
HI_VOID
 *)(
HI_FAILURE
);

221 
pu8Buf
 = 
mÆloc
(
p°VdecThªadP¨am
->
s32MöBufSize
);

222 if(
pu8Buf
 =
NULL
)

224 
¥ötf
("SAMPLE_TEST:ˇn'àÆlo¯%d i¿£nd såómÅhªad:%d\n", 
p°VdecThªadP¨am
->
s32MöBufSize
,Ö°VdecThªadP¨am->
s32ChnId
);

225 
f˛o£
(
ÂSåm
);

226  (
HI_VOID
 *)(
HI_FAILURE
);

228 
fÊush
(
°dout
);

230 
u64±s
 = 
p°VdecThªadP¨am
->
u64PtsInô
;

233 i‡(
p°VdecThªadP¨am
->
eCålSöÆ
 =
VDEC_CTRL_STOP
)

237 i‡(
p°VdecThªadP¨am
->
eCålSöÆ
 =
VDEC_CTRL_PAUSE
)

239 
¶ìp
(
MIN2
(
p°VdecThªadP¨am
->
s32I¡îvÆTime
,1000));

243 i‡–(
p°VdecThªadP¨am
->
s32SåómMode
==
VIDEO_MODE_FRAME
Ë&& (p°VdecThªadP¨am->
íTy≥
 =
PT_MP4VIDEO
) )

245 
bFödSèπ
 = 
HI_FALSE
;

246 
bFödEnd
 = 
HI_FALSE
;

247 
f£ek
(
ÂSåm
, 
s32U£dByãs
, 
SEEK_SET
);

248 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

249 i‡(
s32RódLí
 == 0)

251 i‡(
p°VdecThªadP¨am
->
bLo›Síd
)

253 
s32U£dByãs
 = 0;

254 
f£ek
(
ÂSåm
, 0, 
SEEK_SET
);

255 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

263 
i
=0; i<
s32RódLí
-4; i++)

265 i‡(
pu8Buf
[
i
] == 0 &&Öu8Buf[i+1] == 0 &&Öu8Buf[i+2] == 1 &&Öu8Buf[i+3] == 0xB6)

267 
bFödSèπ
 = 
HI_TRUE
;

268 
i
 += 4;

273 ; 
i
<
s32RódLí
-4; i++)

275 i‡(
pu8Buf
[
i
 ] == 0 &&Öu8Buf[i+1] == 0 &&Öu8Buf[i+2] == 1 &&Öu8Buf[i+3] == 0xB6)

277 
bFödEnd
 = 
HI_TRUE
;

282 
s32RódLí
 = 
i
;

283 i‡(
bFödSèπ
 =
HI_FALSE
)

285 
¥ötf
("SAMPLE_TEST: chn %d canÇot find start code! s32ReadLen %d, s32UsedBytes %d. \n",

286 
p°VdecThªadP¨am
->
s32ChnId
, 
s32RódLí
, 
s32U£dByãs
);

288 i‡(
bFödEnd
 =
HI_FALSE
)

290 
s32RódLí
 = 
i
+4;

294 i‡–(
p°VdecThªadP¨am
->
s32SåómMode
==
VIDEO_MODE_FRAME
Ë&& (p°VdecThªadP¨am->
íTy≥
 =
PT_H264
) )

296 
bFödSèπ
 = 
HI_FALSE
;

297 
bFödEnd
 = 
HI_FALSE
;

298 
f£ek
(
ÂSåm
, 
s32U£dByãs
, 
SEEK_SET
);

299 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

300 i‡(
s32RódLí
 == 0)

302 i‡(
p°VdecThªadP¨am
->
bLo›Síd
)

304 
s32U£dByãs
 = 0;

305 
f£ek
(
ÂSåm
, 0, 
SEEK_SET
);

306 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

314 
i
=0; i<
s32RódLí
-5; i++)

316 i‡–
pu8Buf
[
i
 ] == 0 &&Öu8Buf[i+1] == 0 &&Öu8Buf[i+2] == 1 &&

317 –(
pu8Buf
[
i
+3]&0x1F) == 0x5 || (pu8Buf[i+3]&0x1F) == 0x1 ) &&

318 –(
pu8Buf
[
i
+4]&0x80) == 0x80)

321 
bFödSèπ
 = 
HI_TRUE
;

322 
i
 += 4;

327 ; 
i
<
s32RódLí
-5; i++)

329 i‡–
pu8Buf
[
i
] == 0 &&Öu8Buf[i+1] == 0 &&Öu8Buf[i+2] == 1 &&

330 –(
pu8Buf
[
i
+3]&0x1F) == 0x5 || (pu8Buf[i+3]&0x1F) == 0x1 ) &&

331 –(
pu8Buf
[
i
+4]&0x80) == 0x80 )

334 
bFödEnd
 = 
HI_TRUE
;

339 
s32RódLí
 = 
i
;

340 i‡(
bFödSèπ
 =
HI_FALSE
)

342 
¥ötf
("SAMPLE_TEST: chn %d canÇot find start code!s32ReadLen %d, s32UsedBytes %d. \n",

343 
p°VdecThªadP¨am
->
s32ChnId
, 
s32RódLí
, 
s32U£dByãs
);

345 i‡(
bFödEnd
 =
HI_FALSE
)

347 
s32RódLí
 = 
i
+5;

351 i‡–(
p°VdecThªadP¨am
->
íTy≥
 =
PT_MJPEG
Ë|| (p°VdecThªadP¨am->íTy≥ =
PT_JPEG
) )

353 
bFödSèπ
 = 
HI_FALSE
;

354 
bFödEnd
 = 
HI_FALSE
;

355 
f£ek
(
ÂSåm
, 
s32U£dByãs
, 
SEEK_SET
);

356 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

357 i‡(
s32RódLí
 == 0)

359 i‡(
p°VdecThªadP¨am
->
bLo›Síd
)

361 
s32U£dByãs
 = 0;

362 
f£ek
(
ÂSåm
, 0, 
SEEK_SET
);

363 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

372 
i
=0; i<
s32RódLí
-2; i++)

374 i‡(
pu8Buf
[
i
] == 0xFF &&Öu8Buf[i+1] == 0xD8)

376 
°¨t
 = 
i
;

377 
bFödSèπ
 = 
HI_TRUE
;

378 
i
 = i + 2;

383 ; 
i
<
s32RódLí
-4; i++)

385 i‡–(
pu8Buf
[
i
] == 0xFF) && (pu8Buf[i+1]& 0xF0) == 0xE0 )

387 
Àn
 = (
pu8Buf
[
i
+2]<<8) +Öu8Buf[i+3];

388 
i
 +1 + 
Àn
;

396 ; 
i
<
s32RódLí
-2; i++)

398 i‡(
pu8Buf
[
i
] == 0xFF &&Öu8Buf[i+1] == 0xD8)

400 
bFödEnd
 = 
HI_TRUE
;

404 
s32RódLí
 = 
i
;

405 i‡(
bFödSèπ
 =
HI_FALSE
)

407 
¥ötf
("SAMPLE_TEST: chn %d canÇot find start code! s32ReadLen %d, s32UsedBytes %d. \n",

408 
p°VdecThªadP¨am
->
s32ChnId
, 
s32RódLí
, 
s32U£dByãs
);

410 i‡(
bFödEnd
 =
HI_FALSE
)

412 
s32RódLí
 = 
i
+2;

417 
f£ek
(
ÂSåm
, 
s32U£dByãs
, 
SEEK_SET
);

418 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

419 i‡(
s32RódLí
 == 0)

421 i‡(
p°VdecThªadP¨am
->
bLo›Síd
)

423 
s32U£dByãs
 = 0;

424 
f£ek
(
ÂSåm
, 0, 
SEEK_SET
);

425 
s32RódLí
 = 
‰ód
(
pu8Buf
, 1, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

434 
°Såóm
.
u64PTS
 = 
u64±s
;

435 
°Såóm
.
pu8Addr
 = 
pu8Buf
 + 
°¨t
;

436 
°Såóm
.
u32Lí
 = 
s32RódLí
;

437 
°Såóm
.
bEndOfFøme
 = (
p°VdecThªadP¨am
->
s32SåómMode
==
VIDEO_MODE_FRAME
)? 
HI_TRUE
: 
HI_FALSE
;

438 
°Såóm
.
bEndOfSåóm
 = 
HI_FALSE
;

439 
s32Rë
=
HI_MPI_VDEC_SídSåóm
(
p°VdecThªadP¨am
->
s32ChnId
, &
°Såóm
,Ö°VdecThªadP¨am->
s32MûliSec
);

440 i‡(
HI_SUCCESS
 !
s32Rë
)

442 
u¶ìp
(100);

446 
s32U£dByãs
 = s32U£dByã†+
s32RódLí
 + 
°¨t
;

447 
u64±s
 +
p°VdecThªadP¨am
->
u64PtsIn¸ó£
;

449 
u¶ìp
(20000);

453 
mem£t
(&
°Såóm
, 0, (
VDEC_STREAM_S
) );

454 
°Såóm
.
bEndOfSåóm
 = 
HI_TRUE
;

455 
HI_MPI_VDEC_SídSåóm
(
p°VdecThªadP¨am
->
s32ChnId
, &
°Såóm
, -1);

457 
¥ötf
("SAMPLE_TEST:£nd sãamÅhªad %dÑëu∫ ...\n", 
p°VdecThªadP¨am
->
s32ChnId
);

458 
fÊush
(
°dout
);

459 i‡(
pu8Buf
 !
HI_NULL
)

461 
‰ì
(
pu8Buf
);

463 
f˛o£
(
ÂSåm
);

465  (
HI_VOID
 *)
HI_SUCCESS
;

469 
HI_VOID
 * 
SAMPLE_COMM_VDEC_GëChnLuma
(HI_VOID *
pArgs
)

471 
VDEC_CHN_LUM_S
 
°LumaPix
;

472 
VdecThªadP¨am
 *
p°VdecThªadP¨am
 =(VdecThªadP¨am *)
pArgs
;

473 
HI_BOOL
 
bRunFœg
 = 
HI_TRUE
;

474 
HI_S32
 
s32Rë
;

475 
FILE
 *
ÂLuma
 = 
HI_NULL
;

476 
HI_CHAR
 
FûeName
[128];

477 
HI_CHAR
 
acSåög
[128];

479 
¢¥ötf
(
FûeName
, 128, "LumaPixChn%d.txt", 
p°VdecThªadP¨am
->
s32ChnId
);

480 
ÂLuma
=
f›í
(
FûeName
, "w+");

481 if(
ÂLuma
 =
NULL
)

483 
¥ötf
("SAMPLE_TEST:ˇn'à›í fûê%†ö gëÜum®thªad:%d\n", 
p°VdecThªadP¨am
->
cFûeName
,Ö°VdecThªadP¨am->
s32ChnId
);

484  (
HI_VOID
 *)(
HI_FAILURE
);

489 
p°VdecThªadP¨am
->
eCålSöÆ
)

491 
VDEC_CTRL_START
:

492 
s32Rë
 = 
HI_MPI_VDEC_GëChnLuma
(
p°VdecThªadP¨am
->
s32ChnId
, &
°LumaPix
);

493 i‡(
HI_SUCCESS
 =
s32Rë
)

495 
mem£t
(
acSåög
, 0, 128);

496 
•rötf
(
acSåög
, "chn %d, Pts = %lld, LumPixSum = %lld, LumPixAverage=%d! \n",

497 
p°VdecThªadP¨am
->
s32ChnId
, 
°LumaPix
.
u64Pts
, stLumaPix.
u64LumPixSum
,°LumaPix.
u32LumPixAvîage
);

498 
Ârötf
(
ÂLuma
, "%s\n", 
acSåög
);

502 
VDEC_CTRL_PAUSE
:

503 
¶ìp
(
MIN2
(
p°VdecThªadP¨am
->
s32I¡îvÆTime
,1000));

506 
VDEC_CTRL_STOP
:

507 
bRunFœg
=
HI_FALSE
;

511 
¥ötf
("SAMPLE_TEST:unknow comm™d i¿gëÜum®thªad %d\n", 
p°VdecThªadP¨am
->
s32ChnId
);

512 
bRunFœg
=
HI_FALSE
;

515 
u¶ìp
(40000);

516 if(
bRunFœg
==
HI_FALSE
)

521 
¥ötf
("SAMPLE_TEST:gë LumaPixÅhªad %dÑëu∫ ...\n", 
p°VdecThªadP¨am
->
s32ChnId
);

522 
f˛o£
(
ÂLuma
);

524  (
HI_VOID
 *)
HI_SUCCESS
;

530 
HI_VOID
 
SAMPLE_COMM_VDEC_CmdCål
(
HI_S32
 
s32ChnNum
,
VdecThªadP¨am
 *
p°VdecSíd
)

534 
¶ìp
(30);

539 
HI_VOID
 
SAMPLE_COMM_VDEC_SèπSídSåóm
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
)

541 
HI_S32
 
i
;

543 
i
=0; i<
s32ChnNum
; i++)

545 
±hªad_¸óã
(&
pVdecThªad
[
i
], 0, 
SAMPLE_COMM_VDEC_SídSåóm
, (
HI_VOID
 *)&
p°VdecSíd
[i]);

549 
HI_VOID
 
SAMPLE_COMM_VDEC_St›SídSåóm
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
)

551 
HI_S32
 
i
;

553 
i
=0; i<
s32ChnNum
; i++)

555 
p°VdecSíd
[
i
].
eCålSöÆ
=
VDEC_CTRL_STOP
;

556 
±hªad_joö
(
pVdecThªad
[
i
], 
HI_NULL
);

561 
HI_VOID
 
SAMPLE_COMM_VDEC_SèπGëLuma
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
)

563 
HI_S32
 
i
;

565 
i
=0; i<
s32ChnNum
; i++)

567 
±hªad_¸óã
(&
pVdecThªad
[
i
+
VDEC_MAX_CHN_NUM
], 0, 
SAMPLE_COMM_VDEC_GëChnLuma
, (
HI_VOID
 *)&
p°VdecSíd
[i]);

571 
HI_VOID
 
SAMPLE_COMM_VDEC_St›GëLuma
(
HI_S32
 
s32ChnNum
, 
VdecThªadP¨am
 *
p°VdecSíd
, 
±hªad_t
 *
pVdecThªad
)

573 
HI_S32
 
i
;

575 
i
=0; i<
s32ChnNum
; i++)

577 
p°VdecSíd
[
i
].
eCålSöÆ
 = 
VDEC_CTRL_STOP
;

578 
±hªad_joö
(
pVdecThªad
[
i
+
VDEC_MAX_CHN_NUM
], 
HI_NULL
);

583 
HI_S32
 
SAMPLE_COMM_VDEC_Sèπ
(HI_S32 
s32ChnNum
, 
VDEC_CHN_ATTR_S
 *
p°Aâr
)

585 
HI_U32
 
u32BlkC¡
 = 10;

587 if(
HI_FALSE
=
g_ModCommVB
)

589 
CHECK_CHN_RET
(
HI_MPI_VDEC_SëChnVBC¡
(
s32ChnNum
, 
u32BlkC¡
),s32ChnNum, "HI_MPI_VDEC_SetChnVBCnt");

591 
CHECK_CHN_RET
(
HI_MPI_VDEC_Cª©eChn
(
s32ChnNum
, 
p°Aâr
), s32ChnNum, "HI_MPI_VDEC_CreateChn");

592 
CHECK_CHN_RET
(
HI_MPI_VDEC_SèπRecvSåóm
(
s32ChnNum
), s32ChnNum, "HI_MPI_VDEC_StartRecvStream");

594  
HI_SUCCESS
;

598 
HI_S32
 
SAMPLE_COMM_VDEC_St›
(HI_S32 
s32ChnNum
)

600 
CHECK_CHN_RET
(
HI_MPI_VDEC_St›RecvSåóm
(
s32ChnNum
), s32ChnNum, "HI_MPI_VDEC_StopRecvStream");

601 
CHECK_CHN_RET
(
HI_MPI_VDEC_De°royChn
(
s32ChnNum
), s32ChnNum, "HI_MPI_VDEC_DestroyChn");

603  
HI_SUCCESS
;

609 
HI_S32
 
SAMPLE_COMM_VDEC_BödVpss
(
VDEC_CHN
 
VdChn
, 
VPSS_GRP
 
VpssGΩ
)

611 
MPP_CHN_S
 
°SrcChn
;

612 
MPP_CHN_S
 
°De°Chn
;

614 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

615 
°SrcChn
.
s32DevId
 = 0;

616 
°SrcChn
.
s32ChnId
 = 
VdChn
;

618 
°De°Chn
.
íModId
 = 
HI_ID_VPSS
;

619 
°De°Chn
.
s32DevId
 = 
VpssGΩ
;

620 
°De°Chn
.
s32ChnId
 = 0;

622 
CHECK_RET
(
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
), "HI_MPI_SYS_Bind");

624  
HI_SUCCESS
;

629 
HI_S32
 
SAMPLE_COMM_VDEC_BödVo
(
VDEC_CHN
 
VdChn
, 
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
)

631 
MPP_CHN_S
 
°SrcChn
;

632 
MPP_CHN_S
 
°De°Chn
;

634 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

635 
°SrcChn
.
s32DevId
 = 0;

636 
°SrcChn
.
s32ChnId
 = 
VdChn
;

638 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

639 
°De°Chn
.
s32DevId
 = 
VoLayî
;

640 
°De°Chn
.
s32ChnId
 = 
VoChn
;

642 
CHECK_RET
(
HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
), "HI_MPI_SYS_Bind");

644  
HI_SUCCESS
;

649 
HI_S32
 
SAMPLE_COMM_VDEC_UnBödVpss
(
VDEC_CHN
 
VdChn
, 
VPSS_GRP
 
VpssGΩ
)

651 
MPP_CHN_S
 
°SrcChn
;

652 
MPP_CHN_S
 
°De°Chn
;

654 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

655 
°SrcChn
.
s32DevId
 = 0;

656 
°SrcChn
.
s32ChnId
 = 
VdChn
;

658 
°De°Chn
.
íModId
 = 
HI_ID_VPSS
;

659 
°De°Chn
.
s32DevId
 = 
VpssGΩ
;

660 
°De°Chn
.
s32ChnId
 = 0;

662 
CHECK_RET
(
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
), "HI_MPI_SYS_UnBind");

664  
HI_SUCCESS
;

667 
HI_S32
 
SAMPLE_COMM_VDEC_UnBödVo
(
VDEC_CHN
 
VdChn
, 
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
)

669 
MPP_CHN_S
 
°SrcChn
;

670 
MPP_CHN_S
 
°De°Chn
;

672 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

673 
°SrcChn
.
s32DevId
 = 0;

674 
°SrcChn
.
s32ChnId
 = 
VdChn
;

676 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

677 
°De°Chn
.
s32DevId
 = 
VoLayî
;

678 
°De°Chn
.
s32ChnId
 = 
VoChn
;

680 
CHECK_RET
(
HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
), "HI_MPI_SYS_UnBind");

682  
HI_SUCCESS
;

689 
HI_S32
 
SAMPLE_COMM_VDEC_MemC⁄fig
(
HI_VOID
)

691 
HI_S32
 
i
 = 0;

692 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

694 
HI_CHAR
 * 
pcMmzName
;

695 
MPP_CHN_S
 
°MµChnVDEC
;

698 
i
=0; i<80; i++)

700 
°MµChnVDEC
.
íModId
 = 
HI_ID_VDEC
;

701 
°MµChnVDEC
.
s32DevId
 = 0;

702 
°MµChnVDEC
.
s32ChnId
 = 
i
;

704 if(0 =(
i
%2))

706 
pcMmzName
 = 
NULL
;

710 
pcMmzName
 = "ddr1";

713 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVDEC
,
pcMmzName
);

714 i‡(
s32Rë
)

716 
SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

717  
HI_FAILURE
;

721  
HI_SUCCESS
;

724 #ifde‡
__˝lu•lus


725 #i‡
__˝lu•lus


	@HiSDK/common/sample_comm_venc.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/°©.h
>

13 
	~<sys/io˘l.h
>

14 
	~<sys/pﬁl.h
>

15 
	~<sys/time.h
>

16 
	~<f˙é.h
>

17 
	~<î∫o.h
>

18 
	~<±hªad.h
>

19 
	~<m©h.h
>

20 
	~<uni°d.h
>

21 
	~<sig«l.h
>

23 
	~"ßm∂e_comm.h
"

25 c⁄° 
HI_U8
 
	gg_SOI
[2] = {0xFF, 0xD8};

26 c⁄° 
HI_U8
 
	gg_EOI
[2] = {0xFF, 0xD9};

27 
±hªad_t
 
	ggs_VícPid
;

28 
SAMPLE_VENC_GETSTREAM_PARA_S
 
	ggs_°P¨a
;

29 
HI_S32
 
	ggs_s32S«pC¡
 = 0;

34 
HI_S32
 
	$SAMPLE_COMM_VENC_MemC⁄fig
(
HI_VOID
)

36 
HI_S32
 
i
 = 0;

37 
HI_S32
 
s32Rë
;

39 
HI_CHAR
 * 
pcMmzName
;

40 
MPP_CHN_S
 
°MµChnVENC
;

43 
i
=0;i<64;i++)

46 
°MµChnVENC
.
íModId
 = 
HI_ID_VENC
;

47 
°MµChnVENC
.
s32DevId
 = 0;

48 
°MµChnVENC
.
s32ChnId
 = 
i
;

51 
pcMmzName
 = 
NULL
;

56 
s32Rë
 = 
	`HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVENC
,
pcMmzName
);

57 i‡(
HI_SUCCESS
 !
s32Rë
)

59 
	`SAMPLE_PRT
("HI_MPI_SYS_SëMemC⁄‡wôh %#x!\n", 
s32Rë
);

60  
HI_FAILURE
;

64  
HI_SUCCESS
;

65 
	}
}

70 
HI_S32
 
	$SAMPLE_COMM_VENC_BödVpss
(
VENC_CHN
 
VeChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
)

72 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

73 
MPP_CHN_S
 
°SrcChn
;

74 
MPP_CHN_S
 
°De°Chn
;

76 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

77 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

78 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

80 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

81 
°De°Chn
.
s32DevId
 = 0;

82 
°De°Chn
.
s32ChnId
 = 
VeChn
;

84 
s32Rë
 = 
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

85 i‡(
s32Rë
 !
HI_SUCCESS
)

87 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

88  
HI_FAILURE
;

91  
s32Rë
;

92 
	}
}

97 
HI_S32
 
	$SAMPLE_COMM_VENC_UnBödVpss
(
VENC_CHN
 
VeChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
)

99 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

100 
MPP_CHN_S
 
°SrcChn
;

101 
MPP_CHN_S
 
°De°Chn
;

103 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

104 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

105 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

107 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

108 
°De°Chn
.
s32DevId
 = 0;

109 
°De°Chn
.
s32ChnId
 = 
VeChn
;

111 
s32Rë
 = 
	`HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

112 i‡(
s32Rë
 !
HI_SUCCESS
)

114 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

115  
HI_FAILURE
;

118  
s32Rë
;

119 
	}
}

125 
HI_S32
 
	$SAMPLE_COMM_VENC_BödVo
(
VO_DEV
 
VoDev
,
VO_CHN
 
VoChn
,
VENC_CHN
 
VeChn
)

127 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

128 
MPP_CHN_S
 
°SrcChn
;

129 
MPP_CHN_S
 
°De°Chn
;

131 
°SrcChn
.
íModId
 = 
HI_ID_VOU
;

132 
°SrcChn
.
s32DevId
 = 
VoDev
;

133 
°SrcChn
.
s32ChnId
 = 
VoChn
;

135 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

136 
°De°Chn
.
s32DevId
 = 0;

137 
°De°Chn
.
s32ChnId
 = 
VeChn
;

139 
s32Rë
 = 
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

140 i‡(
s32Rë
 !
HI_SUCCESS
)

142 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

143  
HI_FAILURE
;

146  
s32Rë
;

147 
	}
}

152 
HI_S32
 
	$SAMPLE_COMM_VENC_UnBödVo
(
VENC_CHN
 
GΩChn
,
VO_DEV
 
VoDev
,
VO_CHN
 
VoChn
)

154 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

155 
MPP_CHN_S
 
°SrcChn
;

156 
MPP_CHN_S
 
°De°Chn
;

158 
°SrcChn
.
íModId
 = 
HI_ID_VOU
;

159 
°SrcChn
.
s32DevId
 = 
VoDev
;

160 
°SrcChn
.
s32ChnId
 = 
VoChn
;

162 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

163 
°De°Chn
.
s32DevId
 = 0;

164 
°De°Chn
.
s32ChnId
 = 
GΩChn
;

166 
s32Rë
 = 
	`HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

167 i‡(
s32Rë
 !
HI_SUCCESS
)

169 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

170  
HI_FAILURE
;

173  
s32Rë
;

174 
	}
}

180 
HI_S32
 
	$SAMPLE_COMM_VDEC_BödVíc
(
VDEC_CHN
 
VdChn
,
VENC_CHN
 
VeChn
)

182 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

183 
MPP_CHN_S
 
°SrcChn
;

184 
MPP_CHN_S
 
°De°Chn
;

186 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

187 
°SrcChn
.
s32DevId
 = 0;

188 
°SrcChn
.
s32ChnId
 = 
VdChn
;

190 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

191 
°De°Chn
.
s32DevId
 = 0;

192 
°De°Chn
.
s32ChnId
 = 
VeChn
;

194 
s32Rë
 = 
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

195 i‡(
s32Rë
 !
HI_SUCCESS
)

197 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

198  
HI_FAILURE
;

201  
s32Rë
;

202 
	}
}

207 
HI_S32
 
	$SAMPLE_COMM_VDEC_UnBödVíc
(
VDEC_CHN
 
VdChn
,
VENC_CHN
 
VeChn
)

209 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

210 
MPP_CHN_S
 
°SrcChn
;

211 
MPP_CHN_S
 
°De°Chn
;

213 
°SrcChn
.
íModId
 = 
HI_ID_VDEC
;

214 
°SrcChn
.
s32DevId
 = 0;

215 
°SrcChn
.
s32ChnId
 = 
VdChn
;

217 
°De°Chn
.
íModId
 = 
HI_ID_VENC
;

218 
°De°Chn
.
s32DevId
 = 0;

219 
°De°Chn
.
s32ChnId
 = 
VeChn
;

222 
s32Rë
 = 
	`HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

223 i‡(
s32Rë
 !
HI_SUCCESS
)

225 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

226  
HI_FAILURE
;

229  
s32Rë
;

230 
	}
}

236 
HI_S32
 
	$SAMPLE_COMM_VENC_GëFûePo°fix
(
PAYLOAD_TYPE_E
 
íPaylﬂd
, *
szFûePo°fix
)

238 i‡(
PT_H264
 =
íPaylﬂd
)

240 
	`°r˝y
(
szFûePo°fix
, ".h264");

242 i‡(
PT_JPEG
 =
íPaylﬂd
)

244 
	`°r˝y
(
szFûePo°fix
, ".jpg");

246 i‡(
PT_MJPEG
 =
íPaylﬂd
)

248 
	`°r˝y
(
szFûePo°fix
, ".mjp");

250 i‡(
PT_MP4VIDEO
 =
íPaylﬂd
)

252 
	`°r˝y
(
szFûePo°fix
, ".mp4");

256 
	`SAMPLE_PRT
("payloadÅypeÉrr!\n");

257  
HI_FAILURE
;

259  
HI_SUCCESS
;

260 
	}
}

265 
HI_S32
 
	$SAMPLE_COMM_VENC_SaveMJ≥g
(
FILE
* 
ÂJ≥gFûe
, 
VENC_STREAM_S
 *
p°Såóm
)

267 
VENC_PACK_S
* 
p°D©a
;

268 
HI_U32
 
i
;

272 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

274 
p°D©a
 = &
p°Såóm
->
p°Pack
[
i
];

275 
	`fwrôe
(
p°D©a
->
pu8Addr
+p°D©a->
u32Off£t
,Ö°D©a->
u32Lí
-p°D©a->u32Off£t, 1, 
ÂJ≥gFûe
);

276 
	`fÊush
(
ÂJ≥gFûe
);

279  
HI_SUCCESS
;

280 
	}
}

285 
HI_S32
 
	$SAMPLE_COMM_VENC_SaveH264
(
FILE
* 
ÂH264Fûe
, 
VENC_STREAM_S
 *
p°Såóm
)

287 
HI_S32
 
i
;

290 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

292 
	`fwrôe
(
p°Såóm
->
p°Pack
[
i
].
pu8Addr
+p°Såóm->p°Pack[i].
u32Off£t
,

293 
p°Såóm
->
p°Pack
[
i
].
u32Lí
-p°Såóm->p°Pack[i].
u32Off£t
, 1, 
ÂH264Fûe
);

295 
	`fÊush
(
ÂH264Fûe
);

299  
HI_SUCCESS
;

300 
	}
}

305 
HI_S32
 
	$SAMPLE_COMM_VENC_SaveJPEG
(
FILE
 *
ÂJ≥gFûe
, 
VENC_STREAM_S
 *
p°Såóm
)

307 
VENC_PACK_S
* 
p°D©a
;

308 
HI_U32
 
i
;

310 
i
 = 0; i < 
p°Såóm
->
u32PackCou¡
; i++)

312 
p°D©a
 = &
p°Såóm
->
p°Pack
[
i
];

313 
	`fwrôe
(
p°D©a
->
pu8Addr
+p°D©a->
u32Off£t
,Ö°D©a->
u32Lí
-p°D©a->u32Off£t, 1, 
ÂJ≥gFûe
);

314 
	`fÊush
(
ÂJ≥gFûe
);

317  
HI_SUCCESS
;

318 
	}
}

322 
HI_S32
 
	$SAMPLE_COMM_VENC_SaveS«p
(
VENC_STREAM_S
 *
p°Såóm
)

324 
acFûe
[128] = {0};

325 
FILE
 *
pFûe
;

326 
HI_S32
 
s32Rë
;

328 
	`•rötf
(
acFûe
, "¢≠_%d.jpg", 
gs_s32S«pC¡
);

329 
pFûe
 = 
	`f›í
(
acFûe
, "wb");

330 i‡(
pFûe
 =
NULL
)

332 
	`SAMPLE_PRT
("open fileÉrr\n");

333  
HI_FAILURE
;

335 
s32Rë
 = 
	`SAMPLE_COMM_VENC_SaveJPEG
(
pFûe
, 
p°Såóm
);

336 i‡(
HI_SUCCESS
 !
s32Rë
)

338 
	`SAMPLE_PRT
("save snapÖicture failed!\n");

339  
HI_FAILURE
;

341 
	`f˛o£
(
pFûe
);

342 
gs_s32S«pC¡
++;

343  
HI_SUCCESS
;

344 
	}
}

349 
HI_S32
 
	$SAMPLE_COMM_VENC_SaveSåóm
(
PAYLOAD_TYPE_E
 
íTy≥
,
FILE
 *
pFd
, 
VENC_STREAM_S
 *
p°Såóm
)

351 
HI_S32
 
s32Rë
;

353 i‡(
PT_H264
 =
íTy≥
)

355 
s32Rë
 = 
	`SAMPLE_COMM_VENC_SaveH264
(
pFd
, 
p°Såóm
);

357 i‡(
PT_MJPEG
 =
íTy≥
)

359 
s32Rë
 = 
	`SAMPLE_COMM_VENC_SaveMJ≥g
(
pFd
, 
p°Såóm
);

363  
HI_FAILURE
;

365  
s32Rë
;

366 
	}
}

372 
HI_S32
 
	$SAMPLE_COMM_VENC_Sèπ
(
VENC_CHN
 
VícChn
, 
PAYLOAD_TYPE_E
 
íTy≥
, 
VIDEO_NORM_E
 
íN‹m
, 
PIC_SIZE_E
 
íSize
, 
SAMPLE_RC_E
 
íRcMode
)

374 
HI_S32
 
s32Rë
;

375 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

376 
VENC_ATTR_H264_S
 
°H264Aâr
;

377 
VENC_ATTR_H264_CBR_S
 
°H264Cbr
;

378 
VENC_ATTR_H264_VBR_S
 
°H264Vbr
;

379 
VENC_ATTR_H264_FIXQP_S
 
°H264FixQp
;

380 
VENC_ATTR_MJPEG_S
 
°Mj≥gAâr
;

381 
VENC_ATTR_MJPEG_FIXQP_S
 
°Mj≥geFixQp
;

382 
VENC_ATTR_JPEG_S
 
°J≥gAâr
;

383 
SIZE_S
 
°PicSize
;

385 
s32Rë
 = 
	`SAMPLE_COMM_SYS_GëPicSize
(
íN‹m
, 
íSize
, &
°PicSize
);

386 i‡(
HI_SUCCESS
 !
s32Rë
)

388 
	`SAMPLE_PRT
("GetÖicture size failed!\n");

389  
HI_FAILURE
;

395 
°VícChnAâr
.
°VeAâr
.
íTy≥
 =ÉnType;

396 
íTy≥
)

398 
PT_H264
:

400 
°H264Aâr
.
u32MaxPicWidth
 = 
°PicSize
.
u32Width
;

401 
°H264Aâr
.
u32MaxPicHeight
 = 
°PicSize
.
u32Height
;

402 
°H264Aâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

403 
°H264Aâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

404 
°H264Aâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

405 
°H264Aâr
.
u32Profûe
 = 0;

406 
°H264Aâr
.
bByFøme
 = 
HI_TRUE
;

407 
	`mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârH264e
, &
°H264Aâr
, (
VENC_ATTR_H264_S
));

409 if(
SAMPLE_RC_CBR
 =
íRcMode
)

411 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264CBR
;

412 
°H264Cbr
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

413 
°H264Cbr
.
u32SètTime
 = 1;

414 
°H264Cbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

415 
°H264Cbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

416 
íSize
)

418 
PIC_QCIF
:

419 
°H264Cbr
.
u32BôR©e
 = 256;

421 
PIC_QVGA
:

422 
PIC_CIF
:

424 
°H264Cbr
.
u32BôR©e
 = 512;

427 
PIC_D1
:

428 
PIC_VGA
:

429 
°H264Cbr
.
u32BôR©e
 = 1024*2;

431 
PIC_HD720
:

432 
°H264Cbr
.
u32BôR©e
 = 1024*3;

434 
PIC_HD1080
:

435 
°H264Cbr
.
u32BôR©e
 = 1024*6;

438 
°H264Cbr
.
u32BôR©e
 = 1024*4;

442 
°H264Cbr
.
u32Flu˘u©eLevñ
 = 0;

443 
	`mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH264Cbr
, &
°H264Cbr
, (
VENC_ATTR_H264_CBR_S
));

445 i‡(
SAMPLE_RC_FIXQP
 =
íRcMode
)

447 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264FIXQP
;

448 
°H264FixQp
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

449 
°H264FixQp
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

450 
°H264FixQp
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

451 
°H264FixQp
.
u32IQp
 = 20;

452 
°H264FixQp
.
u32PQp
 = 23;

453 
	`mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH264FixQp
, &
°H264FixQp
,(
VENC_ATTR_H264_FIXQP_S
));

455 i‡(
SAMPLE_RC_VBR
 =
íRcMode
)

457 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_H264VBR
;

458 
°H264Vbr
.
u32G›
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

459 
°H264Vbr
.
u32SètTime
 = 1;

460 
°H264Vbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

461 
°H264Vbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

462 
°H264Vbr
.
u32MöQp
 = 10;

463 
°H264Vbr
.
u32MaxQp
 = 40;

464 
íSize
)

466 
PIC_QCIF
:

467 
°H264Vbr
.
u32MaxBôR©e
= 256*3;

469 
PIC_QVGA
:

470 
PIC_CIF
:

471 
°H264Vbr
.
u32MaxBôR©e
 = 512*3;

473 
PIC_D1
:

474 
PIC_VGA
:

475 
°H264Vbr
.
u32MaxBôR©e
 = 1024*2;

477 
PIC_HD720
:

478 
°H264Vbr
.
u32MaxBôR©e
 = 1024*3;

480 
PIC_HD1080
:

481 
°H264Vbr
.
u32MaxBôR©e
 = 1024*6;

484 
°H264Vbr
.
u32MaxBôR©e
 = 1024*4*3;

487 
	`mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârH264Vbr
, &
°H264Vbr
, (
VENC_ATTR_H264_VBR_S
));

491  
HI_FAILURE
;

496 
PT_MJPEG
:

498 
°Mj≥gAâr
.
u32MaxPicWidth
 = 
°PicSize
.
u32Width
;

499 
°Mj≥gAâr
.
u32MaxPicHeight
 = 
°PicSize
.
u32Height
;

500 
°Mj≥gAâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

501 
°Mj≥gAâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

502 
°Mj≥gAâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

503 
°Mj≥gAâr
.
bByFøme
 = 
HI_TRUE
;

504 
	`mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârMj≥g
, &
°Mj≥gAâr
, (
VENC_ATTR_MJPEG_S
));

506 if(
SAMPLE_RC_FIXQP
 =
íRcMode
)

508 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_MJPEGFIXQP
;

509 
°Mj≥geFixQp
.
u32QÁ˘‹
 = 90;

510 
°Mj≥geFixQp
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

511 
°Mj≥geFixQp
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

512 
	`mem˝y
(&
°VícChnAâr
.
°RcAâr
.
°AârMj≥geFixQp
, &
°Mj≥geFixQp
,

513 (
VENC_ATTR_MJPEG_FIXQP_S
));

515 i‡(
SAMPLE_RC_CBR
 =
íRcMode
)

517 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_MJPEGCBR
;

518 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32SètTime
 = 1;

519 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

520 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
‰32D°FrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
=
íN‹m
)?25:30;

521 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32Flu˘u©eLevñ
 = 0;

522 
íSize
)

524 
PIC_QCIF
:

525 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 384*3;

527 
PIC_QVGA
:

528 
PIC_CIF
:

529 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 768*3;

531 
PIC_D1
:

532 
PIC_VGA
:

533 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024*3*3;

535 
PIC_HD720
:

536 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024*5*3;

538 
PIC_HD1080
:

539 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024*10*3;

542 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geCbr
.
u32BôR©e
 = 1024*7*3;

546 i‡(
SAMPLE_RC_VBR
 =
íRcMode
)

548 
°VícChnAâr
.
°RcAâr
.
íRcMode
 = 
VENC_RC_MODE_MJPEGVBR
;

549 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32SètTime
 = 1;

550 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32SrcFrmR©e
 = (
VIDEO_ENCODING_MODE_PAL
 =
íN‹m
)?25:30;

551 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
‰32D°FrmR©e
 = 5;

552 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MöQÁ˘‹
 = 50;

553 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxQÁ˘‹
 = 95;

554 
íSize
)

556 
PIC_QCIF
:

557 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
= 256*3;

559 
PIC_QVGA
:

560 
PIC_CIF
:

561 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 512*3;

563 
PIC_D1
:

564 
PIC_VGA
:

565 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024*2*3;

567 
PIC_HD720
:

568 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024*3*3;

570 
PIC_HD1080
:

571 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024*6*3;

574 
°VícChnAâr
.
°RcAâr
.
°AârMj≥geVbr
.
u32MaxBôR©e
 = 1024*4*3;

580 
	`SAMPLE_PRT
("cann't support other mode inÅhis version!\n");

582  
HI_FAILURE
;

587 
PT_JPEG
:

588 
°J≥gAâr
.
u32PicWidth
 = 
°PicSize
.
u32Width
;

589 
°J≥gAâr
.
u32PicHeight
 = 
°PicSize
.
u32Height
;

590 
°J≥gAâr
.
u32BufSize
 = 
°PicSize
.
u32Width
 * stPicSize.
u32Height
 * 2;

591 
°J≥gAâr
.
bByFøme
 = 
HI_TRUE
;

594 
	`mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârMj≥g
, &
°J≥gAâr
, (
VENC_ATTR_MJPEG_S
));

597  
HI_ERR_VENC_NOT_SUPPORT
;

600 
s32Rë
 = 
	`HI_MPI_VENC_Cª©eChn
(
VícChn
, &
°VícChnAâr
);

601 i‡(
HI_SUCCESS
 !
s32Rë
)

603 
	`SAMPLE_PRT
("HI_MPI_VENC_CreateChn [%d] faild with %#x!\n",\

604 
VícChn
, 
s32Rë
);

605  
s32Rë
;

611 
s32Rë
 = 
	`HI_MPI_VENC_SèπRecvPic
(
VícChn
);

612 i‡(
HI_SUCCESS
 !
s32Rë
)

614 
	`SAMPLE_PRT
("HI_MPI_VENC_SèπRecvPi¯Áûd wôh%#x!\n", 
s32Rë
);

615  
HI_FAILURE
;

618  
HI_SUCCESS
;

620 
	}
}

625 
HI_S32
 
	$SAMPLE_COMM_VENC_St›
(
VENC_CHN
 
VícChn
)

627 
HI_S32
 
s32Rë
;

632 
s32Rë
 = 
	`HI_MPI_VENC_St›RecvPic
(
VícChn
);

633 i‡(
HI_SUCCESS
 !
s32Rë
)

635 
	`SAMPLE_PRT
("HI_MPI_VENC_StopRecvPic vechn[%d] failed with %#x!\n",\

636 
VícChn
, 
s32Rë
);

637  
HI_FAILURE
;

643 
s32Rë
 = 
	`HI_MPI_VENC_De°royChn
(
VícChn
);

644 i‡(
HI_SUCCESS
 !
s32Rë
)

646 
	`SAMPLE_PRT
("HI_MPI_VENC_DestroyChn vechn[%d] failed with %#x!\n",\

647 
VícChn
, 
s32Rë
);

648  
HI_FAILURE
;

651  
HI_SUCCESS
;

652 
	}
}

657 
HI_S32
 
	$SAMPLE_COMM_VENC_S«pSèπ
(
VENC_CHN
 
VícChn
, 
SIZE_S
 *
p°Size
)

659 
HI_S32
 
s32Rë
;

660 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

661 
VENC_ATTR_JPEG_S
 
°J≥gAâr
;

666 
°VícChnAâr
.
°VeAâr
.
íTy≥
 = 
PT_JPEG
;

668 
°J≥gAâr
.
u32MaxPicWidth
 = 
p°Size
->
u32Width
;

669 
°J≥gAâr
.
u32MaxPicHeight
 = 
p°Size
->
u32Height
;

670 
°J≥gAâr
.
u32PicWidth
 = 
p°Size
->
u32Width
;

671 
°J≥gAâr
.
u32PicHeight
 = 
p°Size
->
u32Height
;

672 
°J≥gAâr
.
u32BufSize
 = 
p°Size
->
u32Width
 *Ö°Size->
u32Height
 * 2;

673 
°J≥gAâr
.
bByFøme
 = 
HI_TRUE
;

674 
	`mem˝y
(&
°VícChnAâr
.
°VeAâr
.
°AârJ≥g
, &
°J≥gAâr
, (
VENC_ATTR_JPEG_S
));

676 
s32Rë
 = 
	`HI_MPI_VENC_Cª©eChn
(
VícChn
, &
°VícChnAâr
);

677 i‡(
HI_SUCCESS
 !
s32Rë
)

679 
	`SAMPLE_PRT
("HI_MPI_VENC_CreateChn [%d] faild with %#x!\n",\

680 
VícChn
, 
s32Rë
);

681  
s32Rë
;

683  
HI_SUCCESS
;

684 
	}
}

689 
HI_S32
 
	$SAMPLE_COMM_VENC_S«pSt›
(
VENC_CHN
 
VícChn
)

691 
HI_S32
 
s32Rë
;

693 
s32Rë
 = 
	`HI_MPI_VENC_St›RecvPic
(
VícChn
);

694 i‡(
HI_SUCCESS
 !
s32Rë
)

696 
	`SAMPLE_PRT
("HI_MPI_VENC_St›RecvPi¯vechn[%d] faûed wôh %#x!\n", 
VícChn
, 
s32Rë
);

697  
HI_FAILURE
;

700 
s32Rë
 = 
	`HI_MPI_VENC_De°royChn
(
VícChn
);

701 i‡(
HI_SUCCESS
 !
s32Rë
)

703 
	`SAMPLE_PRT
("HI_MPI_VENC_De°royCh¿vechn[%d] faûed wôh %#x!\n", 
VícChn
, 
s32Rë
);

704  
HI_FAILURE
;

707  
HI_SUCCESS
;

708 
	}
}

713 
HI_S32
 
	$SAMPLE_COMM_VENC_S«pPro˚ss
(
VENC_CHN
 
VícChn
, 
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
)

715 
timevÆ
 
TimeoutVÆ
;

716 
fd_£t
 
ªad_fds
;

717 
HI_S32
 
s32VícFd
;

718 
VENC_CHN_STAT_S
 
°Sèt
;

719 
VENC_STREAM_S
 
°Såóm
;

720 
HI_S32
 
s32Rë
;

722 
	`¥ötf
("pressány keyÅo snap oneÖic\n");

723 
	`gëch¨
();

728 
s32Rë
 = 
	`SAMPLE_COMM_VENC_BödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

729 i‡(
HI_SUCCESS
 !
s32Rë
)

731 
	`SAMPLE_PRT
("SAMPLE_COMM_VENC_BindVpss failed!\n");

732  
HI_FAILURE
;

737 
s32Rë
 = 
	`HI_MPI_VENC_SèπRecvPic
(
VícChn
);

738 i‡(
HI_SUCCESS
 !
s32Rë
)

740 
	`SAMPLE_PRT
("HI_MPI_VENC_SèπRecvPi¯Áûd wôh%#x!\n", 
s32Rë
);

741  
HI_FAILURE
;

746 
s32VícFd
 = 
	`HI_MPI_VENC_GëFd
(
VícChn
);

747 i‡(
s32VícFd
 < 0)

749 
	`SAMPLE_PRT
("HI_MPI_VENC_GëFd faûd wôh%#x!\n", 
s32VícFd
);

750  
HI_FAILURE
;

753 
	`FD_ZERO
(&
ªad_fds
);

754 
	`FD_SET
(
s32VícFd
, &
ªad_fds
);

756 
TimeoutVÆ
.
tv_£c
 = 2;

757 
TimeoutVÆ
.
tv_u£c
 = 0;

758 
s32Rë
 = 
	`£À˘
(
s32VícFd
+1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

759 i‡(
s32Rë
 < 0)

761 
	`SAMPLE_PRT
("snap select failed!\n");

762  
HI_FAILURE
;

764 i‡(0 =
s32Rë
)

766 
	`SAMPLE_PRT
("snapÅime out!\n");

767  
HI_FAILURE
;

771 i‡(
	`FD_ISSET
(
s32VícFd
, &
ªad_fds
))

773 
s32Rë
 = 
	`HI_MPI_VENC_Quîy
(
VícChn
, &
°Sèt
);

774 i‡(
s32Rë
 !
HI_SUCCESS
)

776 
	`SAMPLE_PRT
("HI_MPI_VENC_Quîy faûed wôh %#x!\n", 
s32Rë
);

777  
HI_FAILURE
;

780 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*)
	`mÆloc
((VENC_PACK_SË* 
°Sèt
.
u32CurPacks
);

781 i‡(
NULL
 =
°Såóm
.
p°Pack
)

783 
	`SAMPLE_PRT
("malloc memory failed!\n");

784  
HI_FAILURE
;

787 
°Såóm
.
u32PackCou¡
 = 
°Sèt
.
u32CurPacks
;

788 
s32Rë
 = 
	`HI_MPI_VENC_GëSåóm
(
VícChn
, &
°Såóm
, -1);

789 i‡(
HI_SUCCESS
 !
s32Rë
)

791 
	`SAMPLE_PRT
("HI_MPI_VENC_GëSåóm faûed wôh %#x!\n", 
s32Rë
);

792 
	`‰ì
(
°Såóm
.
p°Pack
);

793 
°Såóm
.
p°Pack
 = 
NULL
;

794  
HI_FAILURE
;

797 
s32Rë
 = 
	`SAMPLE_COMM_VENC_SaveS«p
(&
°Såóm
);

798 i‡(
HI_SUCCESS
 !
s32Rë
)

800 
	`SAMPLE_PRT
("HI_MPI_VENC_GëSåóm faûed wôh %#x!\n", 
s32Rë
);

801 
	`‰ì
(
°Såóm
.
p°Pack
);

802 
°Såóm
.
p°Pack
 = 
NULL
;

803  
HI_FAILURE
;

806 
s32Rë
 = 
	`HI_MPI_VENC_Rñó£Såóm
(
VícChn
, &
°Såóm
);

807 i‡(
s32Rë
)

809 
	`SAMPLE_PRT
("HI_MPI_VENC_Rñó£Såóm faûed wôh %#x!\n", 
s32Rë
);

810 
	`‰ì
(
°Såóm
.
p°Pack
);

811 
°Såóm
.
p°Pack
 = 
NULL
;

812  
HI_FAILURE
;

815 
	`‰ì
(
°Såóm
.
p°Pack
);

816 
°Såóm
.
p°Pack
 = 
NULL
;

822 
s32Rë
 = 
	`HI_MPI_VENC_St›RecvPic
(
VícChn
);

823 i‡(
s32Rë
 !
HI_SUCCESS
)

825 
	`SAMPLE_PRT
("HI_MPI_VENC_St›RecvPi¯Áûed wôh %#x!\n", 
s32Rë
);

826  
HI_FAILURE
;

831 
s32Rë
 = 
	`SAMPLE_COMM_VENC_UnBödVpss
(
VícChn
, 
VpssGΩ
, 
VpssChn
);

832 i‡(
HI_SUCCESS
 !
s32Rë
)

834 
	`SAMPLE_PRT
("SAMPLE_COMM_VENC_UnBindVpss failed!\n");

835  
HI_FAILURE
;

838  
HI_SUCCESS
;

839 
	}
}

844 
HI_VOID
* 
	$SAMPLE_COMM_VENC_GëVícSåómProc
(
HI_VOID
 *
p
)

846 
HI_S32
 
i
;

847 
HI_S32
 
s32ChnTŸÆ
;

848 
VENC_CHN_ATTR_S
 
°VícChnAâr
;

849 
SAMPLE_VENC_GETSTREAM_PARA_S
 *
p°P¨a
;

850 
HI_S32
 
maxfd
 = 0;

851 
timevÆ
 
TimeoutVÆ
;

852 
fd_£t
 
ªad_fds
;

853 
HI_S32
 
VícFd
[
VENC_MAX_CHN_NUM
];

854 
HI_CHAR
 
aszFûeName
[
VENC_MAX_CHN_NUM
][64];

855 
FILE
 *
pFûe
[
VENC_MAX_CHN_NUM
];

856 
szFûePo°fix
[10];

857 
VENC_CHN_STAT_S
 
°Sèt
;

858 
VENC_STREAM_S
 
°Såóm
;

859 
HI_S32
 
s32Rë
;

860 
VENC_CHN
 
VícChn
;

861 
PAYLOAD_TYPE_E
 
íPayLﬂdTy≥
[
VENC_MAX_CHN_NUM
];

863 
p°P¨a
 = (
SAMPLE_VENC_GETSTREAM_PARA_S
*)
p
;

864 
s32ChnTŸÆ
 = 
p°P¨a
->
s32C¡
;

869 i‡(
s32ChnTŸÆ
 >
VENC_MAX_CHN_NUM
)

871 
	`SAMPLE_PRT
("input count invaild\n");

872  
NULL
;

874 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

877 
VícChn
 = 
i
;

878 
s32Rë
 = 
	`HI_MPI_VENC_GëChnAâr
(
VícChn
, &
°VícChnAâr
);

879 if(
s32Rë
 !
HI_SUCCESS
)

881 
	`SAMPLE_PRT
("HI_MPI_VENC_GetChnAttr chn[%d] failed with %#x!\n", \

882 
VícChn
, 
s32Rë
);

883  
NULL
;

885 
íPayLﬂdTy≥
[
i
] = 
°VícChnAâr
.
°VeAâr
.
íTy≥
;

887 
s32Rë
 = 
	`SAMPLE_COMM_VENC_GëFûePo°fix
(
íPayLﬂdTy≥
[
i
], 
szFûePo°fix
);

888 if(
s32Rë
 !
HI_SUCCESS
)

890 
	`SAMPLE_PRT
("SAMPLE_COMM_VENC_GetFilePostfix [%d] failed with %#x!\n", \

891 
°VícChnAâr
.
°VeAâr
.
íTy≥
, 
s32Rë
);

892  
NULL
;

894 
	`•rötf
(
aszFûeName
[
i
], "°ªam_chn%d%s", i, 
szFûePo°fix
);

895 
pFûe
[
i
] = 
	`f›í
(
aszFûeName
[i], "wb");

896 i‡(!
pFûe
[
i
])

898 
	`SAMPLE_PRT
("open file[%s] failed!\n",

899 
aszFûeName
[
i
]);

900  
NULL
;

904 
VícFd
[
i
] = 
	`HI_MPI_VENC_GëFd
(i);

905 i‡(
VícFd
[
i
] < 0)

907 
	`SAMPLE_PRT
("HI_MPI_VENC_GetFd failed with %#x!\n",

908 
VícFd
[
i
]);

909  
NULL
;

911 i‡(
maxfd
 <
VícFd
[
i
])

913 
maxfd
 = 
VícFd
[
i
];

920 
HI_TRUE
 =
p°P¨a
->
bThªadSèπ
)

922 
	`FD_ZERO
(&
ªad_fds
);

923 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

925 
	`FD_SET
(
VícFd
[
i
], &
ªad_fds
);

928 
TimeoutVÆ
.
tv_£c
 = 2;

929 
TimeoutVÆ
.
tv_u£c
 = 0;

930 
s32Rë
 = 
	`£À˘
(
maxfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

931 i‡(
s32Rë
 < 0)

933 
	`SAMPLE_PRT
("select failed!\n");

936 i‡(
s32Rë
 == 0)

938 
	`SAMPLE_PRT
("get venc streamÅime out,ÉxitÅhread\n");

943 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

945 i‡(
	`FD_ISSET
(
VícFd
[
i
], &
ªad_fds
))

950 
	`mem£t
(&
°Såóm
, 0, (stStream));

951 
s32Rë
 = 
	`HI_MPI_VENC_Quîy
(
i
, &
°Sèt
);

952 i‡(
HI_SUCCESS
 !
s32Rë
)

954 
	`SAMPLE_PRT
("HI_MPI_VENC_Quîy chn[%d] faûed wôh %#x!\n", 
i
, 
s32Rë
);

961 
°Såóm
.
p°Pack
 = (
VENC_PACK_S
*)
	`mÆloc
((VENC_PACK_SË* 
°Sèt
.
u32CurPacks
);

962 i‡(
NULL
 =
°Såóm
.
p°Pack
)

964 
	`SAMPLE_PRT
("malloc streamÖack failed!\n");

971 
°Såóm
.
u32PackCou¡
 = 
°Sèt
.
u32CurPacks
;

972 
s32Rë
 = 
	`HI_MPI_VENC_GëSåóm
(
i
, &
°Såóm
, 
HI_TRUE
);

973 i‡(
HI_SUCCESS
 !
s32Rë
)

975 
	`‰ì
(
°Såóm
.
p°Pack
);

976 
°Såóm
.
p°Pack
 = 
NULL
;

977 
	`SAMPLE_PRT
("HI_MPI_VENC_GetStream failed with %#x!\n", \

978 
s32Rë
);

985 
s32Rë
 = 
	`SAMPLE_COMM_VENC_SaveSåóm
(
íPayLﬂdTy≥
[
i
], 
pFûe
[i], &
°Såóm
);

986 i‡(
HI_SUCCESS
 !
s32Rë
)

988 
	`‰ì
(
°Såóm
.
p°Pack
);

989 
°Såóm
.
p°Pack
 = 
NULL
;

990 
	`SAMPLE_PRT
("save stream failed!\n");

996 
s32Rë
 = 
	`HI_MPI_VENC_Rñó£Såóm
(
i
, &
°Såóm
);

997 i‡(
HI_SUCCESS
 !
s32Rë
)

999 
	`‰ì
(
°Såóm
.
p°Pack
);

1000 
°Såóm
.
p°Pack
 = 
NULL
;

1006 
	`‰ì
(
°Såóm
.
p°Pack
);

1007 
°Såóm
.
p°Pack
 = 
NULL
;

1016 
i
 = 0; i < 
s32ChnTŸÆ
; i++)

1018 
	`f˛o£
(
pFûe
[
i
]);

1021  
NULL
;

1022 
	}
}

1027 
HI_S32
 
	$SAMPLE_COMM_VENC_SèπGëSåóm
(
HI_S32
 
s32C¡
)

1029 
gs_°P¨a
.
bThªadSèπ
 = 
HI_TRUE
;

1030 
gs_°P¨a
.
s32C¡
 = s32Cnt;

1032  
	`±hªad_¸óã
(&
gs_VícPid
, 0, 
SAMPLE_COMM_VENC_GëVícSåómProc
, (
HI_VOID
*)&
gs_°P¨a
);

1033 
	}
}

1038 
HI_S32
 
	$SAMPLE_COMM_VENC_St›GëSåóm
()

1040 i‡(
HI_TRUE
 =
gs_°P¨a
.
bThªadSèπ
)

1042 
gs_°P¨a
.
bThªadSèπ
 = 
HI_FALSE
;

1043 
	`±hªad_joö
(
gs_VícPid
, 0);

1045  
HI_SUCCESS
;

1046 
	}
}

1049 
HI_VOID
 
	$SAMPLE_COMM_VENC_RódO√Føme
–
FILE
 * 
Â
, 
HI_U8
 * 
pY
, HI_U8 * 
pU
, HI_U8 * 
pV
,

1050 
HI_U32
 
width
, HI_U32 
height
, HI_U32 
°ride
, HI_U32 
°ride2
)

1052 
HI_U8
 * 
pD°
;

1054 
HI_U32
 
u32Row
;

1057 
pD°
 = 
pY
;

1058  
u32Row
 = 0; u32Row < 
height
; u32Row++ )

1060 
	`‰ód
–
pD°
, 
width
, 1, 
Â
 );

1061 
pD°
 +
°ride
;

1064 
pD°
 = 
pU
;

1065  
u32Row
 = 0; u32Row < 
height
/2; u32Row++ )

1067 
	`‰ód
–
pD°
, 
width
/2, 1, 
Â
 );

1068 
pD°
 +
°ride2
;

1071 
pD°
 = 
pV
;

1072  
u32Row
 = 0; u32Row < 
height
/2; u32Row++ )

1074 
	`‰ód
–
pD°
, 
width
/2, 1, 
Â
 );

1075 
pD°
 +
°ride2
;

1078 
	}
}

1080 
HI_S32
 
	$SAMPLE_COMM_VENC_PœnToSemi
(
HI_U8
 *
pY
, 
HI_S32
 
ySåide
,

1081 
HI_U8
 *
pU
, 
HI_S32
 
uSåide
,

1082 
HI_U8
 *
pV
, 
HI_S32
 
vSåide
,

1083 
HI_S32
 
picWidth
, HI_S32 
picHeight
)

1085 
HI_S32
 
i
;

1086 
HI_U8
* 
pTmpU
, *
±u
;

1087 
HI_U8
* 
pTmpV
, *
±v
;

1089 
HI_S32
 
s32HafW
 = 
uSåide
 >>1 ;

1090 
HI_S32
 
s32HafH
 = 
picHeight
 >>1 ;

1091 
HI_S32
 
s32Size
 = 
s32HafW
*
s32HafH
;

1093 
pTmpU
 = 
	`mÆloc
–
s32Size
 ); 
±u
 =ÖTmpU;

1094 
pTmpV
 = 
	`mÆloc
–
s32Size
 ); 
±v
 =ÖTmpV;

1095 if((
pTmpU
==
HI_NULL
)||(
pTmpV
==HI_NULL))

1097 
	`¥ötf
("malloc buf failed\n");

1098  
HI_FAILURE
;

1101 
	`mem˝y
(
pTmpU
,
pU
,
s32Size
);

1102 
	`mem˝y
(
pTmpV
,
pV
,
s32Size
);

1104 
i
 = 0;i<
s32Size
>>1;i++)

1106 *
pU
++ = *
pTmpV
++;

1107 *
pU
++ = *
pTmpU
++;

1110 
i
 = 0;i<
s32Size
>>1;i++)

1112 *
pV
++ = *
pTmpV
++;

1113 *
pV
++ = *
pTmpU
++;

1116 
	`‰ì
–
±u
 );

1117 
	`‰ì
–
±v
 );

1119  
HI_SUCCESS
;

1120 
	}
}

	@HiSDK/common/sample_comm_vo.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

14 
	~<sys/io˘l.h
>

15 
	~<sys/pﬁl.h
>

16 
	~<sys/time.h
>

17 
	~<f˙é.h
>

18 
	~<î∫o.h
>

19 
	~<±hªad.h
>

20 
	~<m©h.h
>

21 
	~<uni°d.h
>

22 
	~<sig«l.h
>

24 
	~"ßm∂e_comm.h
"

27 
HI_S32
 
	$SAMPLE_COMM_VO_GëWH
(
VO_INTF_SYNC_E
 
íI¡fSync
, 
HI_U32
 *
pu32W
,HI_U32 *
pu32H
, HI_U32 *
pu32Frm
)

29 
íI¡fSync
)

31 
VO_OUTPUT_PAL
 : *
pu32W
 = 720; *
pu32H
 = 576; *
pu32Frm
 = 25; ;

32 
VO_OUTPUT_NTSC
 : *
pu32W
 = 720; *
pu32H
 = 480; *
pu32Frm
 = 30; ;

33 
VO_OUTPUT_576P50
 : *
pu32W
 = 720; *
pu32H
 = 576; *
pu32Frm
 = 50; ;

34 
VO_OUTPUT_480P60
 : *
pu32W
 = 720; *
pu32H
 = 480; *
pu32Frm
 = 60; ;

35 
VO_OUTPUT_800x600_60
: *
pu32W
 = 800; *
pu32H
 = 600; *
pu32Frm
 = 60; ;

36 
VO_OUTPUT_720P50
 : *
pu32W
 = 1280; *
pu32H
 = 720; *
pu32Frm
 = 50; ;

37 
VO_OUTPUT_720P60
 : *
pu32W
 = 1280; *
pu32H
 = 720; *
pu32Frm
 = 60; ;

38 
VO_OUTPUT_1080I50
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 50; ;

39 
VO_OUTPUT_1080I60
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 60; ;

40 
VO_OUTPUT_1080P24
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 24; ;

41 
VO_OUTPUT_1080P25
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 25; ;

42 
VO_OUTPUT_1080P30
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 30; ;

43 
VO_OUTPUT_1080P50
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 50; ;

44 
VO_OUTPUT_1080P60
 : *
pu32W
 = 1920; *
pu32H
 = 1080; *
pu32Frm
 = 60; ;

45 
VO_OUTPUT_1024x768_60
: *
pu32W
 = 1024; *
pu32H
 = 768; *
pu32Frm
 = 60; ;

46 
VO_OUTPUT_1280x1024_60
: *
pu32W
 = 1280; *
pu32H
 = 1024; *
pu32Frm
 = 60; ;

47 
VO_OUTPUT_1366x768_60
: *
pu32W
 = 1366; *
pu32H
 = 768; *
pu32Frm
 = 60; ;

48 
VO_OUTPUT_1440x900_60
: *
pu32W
 = 1440; *
pu32H
 = 900; *
pu32Frm
 = 60; ;

49 
VO_OUTPUT_1280x800_60
: *
pu32W
 = 1280; *
pu32H
 = 800; *
pu32Frm
 = 60; ;

50 
VO_OUTPUT_1600x1200_60
: *
pu32W
 = 1600; *
pu32H
 = 1200; *
pu32Frm
 = 60; ;

51 
VO_OUTPUT_1680x1050_60
: *
pu32W
 = 1680; *
pu32H
 = 1050; *
pu32Frm
 = 60; ;

52 
VO_OUTPUT_1920x1200_60
: *
pu32W
 = 1920; *
pu32H
 = 1200; *
pu32Frm
 = 60; ;

53 
VO_OUTPUT_USER
 : *
pu32W
 = 720; *
pu32H
 = 576; *
pu32Frm
 = 25; ;

55 
	`SAMPLE_PRT
("voÉnIntfSyncÇot support!\n");

56  
HI_FAILURE
;

58  
HI_SUCCESS
;

59 
	}
}

65 
HI_S32
 
	$SAMPLE_COMM_VO_MemC⁄fig
(
VO_DEV
 
VoDev
, 
HI_CHAR
 *
pcMmzName
)

67 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

68 
MPP_CHN_S
 
°MµChnVO
;

71 
°MµChnVO
.
íModId
 = 
HI_ID_VOU
;

72 
°MµChnVO
.
s32DevId
 = 
VoDev
;

73 
°MµChnVO
.
s32ChnId
 = 0;

74 
s32Rë
 = 
	`HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVO
, 
pcMmzName
);

75 i‡(
s32Rë
)

77 
	`SAMPLE_PRT
("HI_MPI_SYS_SetMemConf ERR !\n");

78  
HI_FAILURE
;

81  
HI_SUCCESS
;

82 
	}
}

84 
HI_S32
 
	$SAMPLE_COMM_VO_SèπDev
(
VO_DEV
 
VoDev
, 
VO_PUB_ATTR_S
 *
p°PubAâr
)

86 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

88 
s32Rë
 = 
	`HI_MPI_VO_SëPubAâr
(
VoDev
, 
p°PubAâr
);

89 i‡(
s32Rë
 !
HI_SUCCESS
)

91 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

92  
HI_FAILURE
;

95 
s32Rë
 = 
	`HI_MPI_VO_E«bÀ
(
VoDev
);

96 i‡(
s32Rë
 !
HI_SUCCESS
)

98 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

99  
HI_FAILURE
;

102  
s32Rë
;

103 
	}
}

105 
HI_S32
 
	$SAMPLE_COMM_VO_St›Dev
(
VO_DEV
 
VoDev
)

107 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

109 
s32Rë
 = 
	`HI_MPI_VO_DißbÀ
(
VoDev
);

110 i‡(
s32Rë
 !
HI_SUCCESS
)

112 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

113  
HI_FAILURE
;

115  
s32Rë
;

116 
	}
}

118 
HI_S32
 
	$SAMPLE_COMM_VO_SèπLayî
(
VO_LAYER
 
VoLayî
,c⁄° 
VO_VIDEO_LAYER_ATTR_S
 *
p°LayîAâr
)

120 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

121 
s32Rë
 = 
	`HI_MPI_VO_SëVideoLayîAâr
(
VoLayî
, 
p°LayîAâr
);

122 i‡(
s32Rë
 !
HI_SUCCESS
)

124 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

125  
HI_FAILURE
;

128 
s32Rë
 = 
	`HI_MPI_VO_E«bÀVideoLayî
(
VoLayî
);

129 i‡(
s32Rë
 !
HI_SUCCESS
)

131 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

132  
HI_FAILURE
;

135  
s32Rë
;

136 
	}
}

138 
HI_S32
 
	$SAMPLE_COMM_VO_St›Layî
(
VO_LAYER
 
VoLayî
)

140 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

142 
s32Rë
 = 
	`HI_MPI_VO_DißbÀVideoLayî
(
VoLayî
);

143 i‡(
s32Rë
 !
HI_SUCCESS
)

145 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

146  
HI_FAILURE
;

148  
s32Rë
;

149 
	}
}

151 
HI_S32
 
	$SAMPLE_COMM_VO_SèπChn
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
)

153 
HI_S32
 
i
;

154 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

155 
HI_U32
 
u32WndNum
 = 0;

156 
HI_U32
 
u32Squ¨e
 = 0;

157 
HI_U32
 
u32Width
 = 0;

158 
HI_U32
 
u32Height
 = 0;

159 
VO_CHN_ATTR_S
 
°ChnAâr
;

160 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

162 
íMode
)

164 
VO_MODE_1MUX
:

165 
u32WndNum
 = 1;

166 
u32Squ¨e
 = 1;

168 
VO_MODE_4MUX
:

169 
u32WndNum
 = 4;

170 
u32Squ¨e
 = 2;

172 
VO_MODE_9MUX
:

173 
u32WndNum
 = 9;

174 
u32Squ¨e
 = 3;

176 
VO_MODE_16MUX
:

177 
u32WndNum
 = 16;

178 
u32Squ¨e
 = 4;

180 
VO_MODE_25MUX
:

181 
u32WndNum
 = 25;

182 
u32Squ¨e
 = 5;

184 
VO_MODE_36MUX
:

185 
u32WndNum
 = 36;

186 
u32Squ¨e
 = 6;

188 
VO_MODE_64MUX
:

189 
u32WndNum
 = 64;

190 
u32Squ¨e
 = 8;

193 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

194  
HI_FAILURE
;

197 
s32Rë
 = 
	`HI_MPI_VO_GëVideoLayîAâr
(
VoLayî
, &
°LayîAâr
);

198 i‡(
s32Rë
 !
HI_SUCCESS
)

200 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

201  
HI_FAILURE
;

203 
u32Width
 = 
°LayîAâr
.
°ImageSize
.u32Width;

204 
u32Height
 = 
°LayîAâr
.
°ImageSize
.u32Height;

205 
	`¥ötf
("u32Width:%d, u32Squ¨e:%d\n", 
u32Width
, 
u32Squ¨e
);

206 
i
=0; i<
u32WndNum
; i++)

208 
°ChnAâr
.
°Re˘
.
s32X
 = 
	`ALIGN_BACK
((
u32Width
/
u32Squ¨e
Ë* (
i
%u32Square), 2);

209 
°ChnAâr
.
°Re˘
.
s32Y
 = 
	`ALIGN_BACK
((
u32Height
/
u32Squ¨e
Ë* (
i
/u32Square), 2);

210 
°ChnAâr
.
°Re˘
.
u32Width
 = 
	`ALIGN_BACK
(u32Width/
u32Squ¨e
, 2);

211 
°ChnAâr
.
°Re˘
.
u32Height
 = 
	`ALIGN_BACK
(u32Height/
u32Squ¨e
, 2);

212 
°ChnAâr
.
u32Pri‹ôy
 = 0;

213 
°ChnAâr
.
bDeÊickî
 = 
HI_FALSE
;

215 
s32Rë
 = 
	`HI_MPI_VO_SëChnAâr
(
VoLayî
, 
i
, &
°ChnAâr
);

216 i‡(
s32Rë
 !
HI_SUCCESS
)

218 
	`¥ötf
("%s(%d):failed with %#x!\n",\

219 
__FUNCTION__
,
__LINE__
, 
s32Rë
);

220  
HI_FAILURE
;

223  
HI_SUCCESS
;

224 
	}
}

226 
HI_S32
 
	$SAMPLE_COMM_VO_SèπFuŒSªí
(
VO_LAYER
 
VoLayî
, 
SAMPLE_VO_MODE_E
 
íMode
,
HI_S32
 
s32ChnNum
)

228 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

229 
HI_U32
 
u32WndNum
 = 0;

230 
HI_U32
 
u32Squ¨e
 = 0;

231 
HI_U32
 
u32Width
 = 0;

232 
HI_U32
 
u32Height
 = 0;

233 
VO_CHN_ATTR_S
 
°ChnAâr
;

234 
VO_VIDEO_LAYER_ATTR_S
 
°LayîAâr
;

235 if(
íMode
 !
VO_MODE_1MUX
)

237 
	`¥ötf
("Start Full Print Fail!\n");

238  
HI_FAILURE
;

242 
u32WndNum
 = 1;

243 
u32Squ¨e
 = 1;

246 
s32Rë
 = 
	`HI_MPI_VO_GëVideoLayîAâr
(
VoLayî
, &
°LayîAâr
);

247 i‡(
s32Rë
 !
HI_SUCCESS
)

249 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

250  
HI_FAILURE
;

252 
u32Width
 = 
°LayîAâr
.
°ImageSize
.u32Width;

253 
u32Height
 = 
°LayîAâr
.
°ImageSize
.u32Height;

254 
	`¥ötf
("u32Width:%d, u32Squ¨e:%d\n", 
u32Width
, 
u32Squ¨e
);

257 
°ChnAâr
.
°Re˘
.
s32X
 = 
	`ALIGN_BACK
((
u32Width
/
u32Squ¨e
) * (0%u32Square), 2);

258 
°ChnAâr
.
°Re˘
.
s32Y
 = 
	`ALIGN_BACK
((
u32Height
/
u32Squ¨e
) * (0/u32Square), 2);

259 
°ChnAâr
.
°Re˘
.
u32Width
 = 
	`ALIGN_BACK
(u32Width/
u32Squ¨e
, 2);

260 
°ChnAâr
.
°Re˘
.
u32Height
 = 
	`ALIGN_BACK
(u32Height/
u32Squ¨e
, 2);

261 
°ChnAâr
.
u32Pri‹ôy
 = 0;

262 
°ChnAâr
.
bDeÊickî
 = 
HI_FALSE
;

264 
s32Rë
 = 
	`HI_MPI_VO_SëChnAâr
(
VoLayî
, 
s32ChnNum
, &
°ChnAâr
);

265 i‡(
s32Rë
 !
HI_SUCCESS
)

267 
	`¥ötf
("%s(%d):failed with %#x!\n",\

268 
__FUNCTION__
,
__LINE__
, 
s32Rë
);

269  
HI_FAILURE
;

272  
HI_SUCCESS
;

274 
	}
}

276 
HI_S32
 
	$SAMPLE_COMM_VO_St›Chn
(
VO_LAYER
 
VoLayî
, 
HI_S32
 
s32ChnNum
 )

278 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

279 
s32Rë
 = 
	`HI_MPI_VO_DißbÀChn
(
VoLayî
, 
s32ChnNum
);

280 i‡(
s32Rë
 !
HI_SUCCESS
)

282 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

283  
HI_FAILURE
;

285  
s32Rë
;

286 
	}
}

288 
HI_S32
 
	$SAMPLE_COMM_VO_SèπWbc
(
VO_WBC
 
VoWbc
,c⁄° 
VO_WBC_ATTR_S
 *
p°WbcAâr
)

290 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

291 
s32Rë
 = 
	`HI_MPI_VO_SëWbcAâr
(
VoWbc
, 
p°WbcAâr
);

292 i‡(
s32Rë
 !
HI_SUCCESS
)

294 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

295  
HI_FAILURE
;

298 
s32Rë
 = 
	`HI_MPI_VO_E«bÀWbc
(
VoWbc
);

299 i‡(
s32Rë
 !
HI_SUCCESS
)

301 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

302  
HI_FAILURE
;

305  
s32Rë
;

306 
	}
}

308 
HI_S32
 
	$SAMPLE_COMM_VO_St›Wbc
(
VO_WBC
 
VoWbc
)

310 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

312 
s32Rë
 = 
	`HI_MPI_VO_DißbÀWbc
(
VoWbc
);

313 i‡(
s32Rë
 !
HI_SUCCESS
)

315 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

316  
HI_FAILURE
;

318  
s32Rë
;

319 
	}
}

321 
HI_S32
 
	$SAMPLE_COMM_VO_BödVpss
(
VO_LAYER
 
VoLayî
,
VO_CHN
 
VoChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
)

323 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

324 
MPP_CHN_S
 
°SrcChn
;

325 
MPP_CHN_S
 
°De°Chn
;

327 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

328 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

329 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

331 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

332 
°De°Chn
.
s32DevId
 = 
VoLayî
;

333 
°De°Chn
.
s32ChnId
 = 
VoChn
;

335 
s32Rë
 = 
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

336 i‡(
s32Rë
 !
HI_SUCCESS
)

338 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

339  
HI_FAILURE
;

342  
s32Rë
;

343 
	}
}

344 
HI_S32
 
	$SAMPLE_COMM_VO_UnBödVpss
(
VO_LAYER
 
VoLayî
,
VO_CHN
 
VoChn
,
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
)

346 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

347 
MPP_CHN_S
 
°SrcChn
;

348 
MPP_CHN_S
 
°De°Chn
;

350 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

351 
°SrcChn
.
s32DevId
 = 
VpssGΩ
;

352 
°SrcChn
.
s32ChnId
 = 
VpssChn
;

354 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

355 
°De°Chn
.
s32DevId
 = 
VoLayî
;

356 
°De°Chn
.
s32ChnId
 = 
VoChn
;

358 
s32Rë
 = 
	`HI_MPI_SYS_UnBöd
(&
°SrcChn
, &
°De°Chn
);

359 i‡(
s32Rë
 !
HI_SUCCESS
)

361 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

362  
HI_FAILURE
;

364  
s32Rë
;

365 
	}
}

367 
HI_S32
 
	$SAMPLE_COMM_WBC_BödVo
(
VO_WBC
 
VoWbc
,
VO_WBC_SOURCE_S
 *
p°WbcSour˚
)

369 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

370 
s32Rë
 = 
	`HI_MPI_VO_SëWbcSour˚
(
VoWbc
, 
p°WbcSour˚
);

371 i‡(
s32Rë
 !
HI_SUCCESS
)

373 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

374  
HI_FAILURE
;

376  
s32Rë
;

377 
	}
}

378 
HI_S32
 
	$SAMPLE_COMM_VO_BödVoWbc
(
VO_DEV
 
VoWbcDev
, 
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
)

380 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

382 
°SrcChn
.
íModId
 = 
HI_ID_VOU
;

383 
°SrcChn
.
s32DevId
 = 
VoWbcDev
;

384 
°SrcChn
.
s32ChnId
 = 0;

386 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

387 
°De°Chn
.
s32ChnId
 = 
VoChn
;

388 
°De°Chn
.
s32DevId
 = 
VoLayî
;

390  
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

391 
	}
}

393 
HI_S32
 
	$SAMPLE_COMM_VO_UnBödVoWbc
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
)

395 
MPP_CHN_S
 
°De°Chn
;

397 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

398 
°De°Chn
.
s32DevId
 = 
VoLayî
;

399 
°De°Chn
.
s32ChnId
 = 
VoChn
;

401  
	`HI_MPI_SYS_UnBöd
(
NULL
, &
°De°Chn
);

402 
	}
}

404 
HI_S32
 
	$SAMPLE_COMM_VO_BödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VI_CHN
 
ViChn
)

406 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

408 
°SrcChn
.
íModId
 = 
HI_ID_VIU
;

409 
°SrcChn
.
s32DevId
 = 0;

410 
°SrcChn
.
s32ChnId
 = 
ViChn
;

412 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

413 
°De°Chn
.
s32ChnId
 = 
VoChn
;

414 
°De°Chn
.
s32DevId
 = 
VoLayî
;

416  
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

417 
	}
}

419 
HI_S32
 
	$SAMPLE_COMM_VO_UnBödVi
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
)

421 
MPP_CHN_S
 
°De°Chn
;

423 
°De°Chn
.
íModId
 = 
HI_ID_VOU
;

424 
°De°Chn
.
s32DevId
 = 
VoLayî
;

425 
°De°Chn
.
s32ChnId
 = 
VoChn
;

427  
	`HI_MPI_SYS_UnBöd
(
NULL
, &
°De°Chn
);

428 
	}
}

431 
HI_VOID
 
	$SAMPLE_COMM_VO_HdmiC⁄vîtSync
(
VO_INTF_SYNC_E
 
íI¡fSync
,

432 
HI_HDMI_VIDEO_FMT_E
 *
≥nVideoFmt
)

434 
íI¡fSync
)

436 
VO_OUTPUT_PAL
:

437 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_PAL
;

439 
VO_OUTPUT_NTSC
:

440 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_NTSC
;

442 
VO_OUTPUT_1080P24
:

443 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080P_24
;

445 
VO_OUTPUT_1080P25
:

446 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080P_25
;

448 
VO_OUTPUT_1080P30
:

449 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080P_30
;

451 
VO_OUTPUT_720P50
:

452 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_720P_50
;

454 
VO_OUTPUT_720P60
:

455 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_720P_60
;

457 
VO_OUTPUT_1080I50
:

458 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080i_50
;

460 
VO_OUTPUT_1080I60
:

461 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080i_60
;

463 
VO_OUTPUT_1080P50
:

464 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080P_50
;

466 
VO_OUTPUT_1080P60
:

467 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080P_60
;

469 
VO_OUTPUT_576P50
:

470 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_576P_50
;

472 
VO_OUTPUT_480P60
:

473 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_480P_60
;

475 
VO_OUTPUT_800x600_60
:

476 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_VESA_800X600_60
;

478 
VO_OUTPUT_1024x768_60
:

479 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_VESA_1024X768_60
;

481 
VO_OUTPUT_1280x1024_60
:

482 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_VESA_1280X1024_60
;

484 
VO_OUTPUT_1366x768_60
:

485 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_VESA_1366X768_60
;

487 
VO_OUTPUT_1440x900_60
:

488 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_VESA_1440X900_60
;

490 
VO_OUTPUT_1280x800_60
:

491 *
≥nVideoFmt
 = 
HI_HDMI_VIDEO_FMT_VESA_1280X800_60
;

494 
	`SAMPLE_PRT
("Unkonw VO_INTF_SYNC_E value!\n");

499 
	}
}

501 
HI_S32
 
	$SAMPLE_COMM_VO_HdmiSèπ
(
VO_INTF_SYNC_E
 
íI¡fSync
)

503 
HI_HDMI_INIT_PARA_S
 
°HdmiP¨a
;

504 
HI_HDMI_ATTR_S
 
°Aâr
;

506 
HI_HDMI_VIDEO_FMT_E
 
íVideoFmt
 = 
HI_HDMI_VIDEO_FMT_1080P_60
;

508 
	`SAMPLE_COMM_VO_HdmiC⁄vîtSync
(
íI¡fSync
, &
íVideoFmt
);

510 
°HdmiP¨a
.
íF‹˚Mode
 = 
HI_HDMI_FORCE_HDMI
;

511 
°HdmiP¨a
.
pCÆlBackArgs
 = 
NULL
;

512 
°HdmiP¨a
.
p‚HdmiEvítCÆlback
 = 
NULL
;

513 
	`HI_MPI_HDMI_Inô
(&
°HdmiP¨a
);

515 
	`HI_MPI_HDMI_O≥n
(
HI_HDMI_ID_0
);

517 
	`HI_MPI_HDMI_GëAâr
(
HI_HDMI_ID_0
, &
°Aâr
);

519 
°Aâr
.
bE«bÀHdmi
 = 
HI_TRUE
;

521 
°Aâr
.
bE«bÀVideo
 = 
HI_TRUE
;

522 
°Aâr
.
íVideoFmt
 =ÉnVideoFmt;

524 
°Aâr
.
íVidOutMode
 = 
HI_HDMI_VIDEO_MODE_YCBCR444
;

525 
°Aâr
.
íDìpCﬁ‹Mode
 = 
HI_HDMI_DEEP_COLOR_OFF
;

526 
°Aâr
.
bxvYCCMode
 = 
HI_FALSE
;

528 
°Aâr
.
bE«bÀAudio
 = 
HI_FALSE
;

529 
°Aâr
.
íSoundI¡f
 = 
HI_HDMI_SND_INTERFACE_I2S
;

530 
°Aâr
.
bIsMu…iCh™√l
 = 
HI_FALSE
;

532 
°Aâr
.
íBôDïth
 = 
HI_HDMI_BIT_DEPTH_16
;

534 
°Aâr
.
bE«bÀAviInfoFøme
 = 
HI_TRUE
;

535 
°Aâr
.
bE«bÀAudInfoFøme
 = 
HI_TRUE
;

536 
°Aâr
.
bE«bÀSpdInfoFøme
 = 
HI_FALSE
;

537 
°Aâr
.
bE«bÀM≥gInfoFøme
 = 
HI_FALSE
;

539 
°Aâr
.
bDebugFœg
 = 
HI_FALSE
;

540 
°Aâr
.
bHDCPE«bÀ
 = 
HI_FALSE
;

542 
°Aâr
.
b3DE«bÀ
 = 
HI_FALSE
;

544 
	`HI_MPI_HDMI_SëAâr
(
HI_HDMI_ID_0
, &
°Aâr
);

546 
	`HI_MPI_HDMI_Sèπ
(
HI_HDMI_ID_0
);

548 
	`¥ötf
("HDMI start success.\n");

549  
HI_SUCCESS
;

550 
	}
}

552 
HI_S32
 
	$SAMPLE_COMM_VO_HdmiSt›
(
HI_VOID
)

554 
	`HI_MPI_HDMI_St›
(
HI_HDMI_ID_0
);

555 
	`HI_MPI_HDMI_Clo£
(
HI_HDMI_ID_0
);

556 
	`HI_MPI_HDMI_DeInô
();

558  
HI_SUCCESS
;

559 
	}
}

	@HiSDK/common/sample_comm_vpss.c

8 #ifde‡
__˝lu•lus


9 #i‡
__˝lu•lus


14 
	~<°dio.h
>

15 
	~<°dlib.h
>

16 
	~<°rög.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/°©.h
>

19 
	~<sys/io˘l.h
>

20 
	~<sys/pﬁl.h
>

21 
	~<sys/time.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<±hªad.h
>

25 
	~<m©h.h
>

26 
	~<uni°d.h
>

27 
	~<sig«l.h
>

29 
	~"ßm∂e_comm.h
"

34 
HI_S32
 
SAMPLE_COMM_VPSS_MemC⁄fig
()

36 
HI_CHAR
 * 
pcMmzName
;

37 
MPP_CHN_S
 
°MµChnVpss
;

38 
HI_S32
 
s32Rë
, 
i
;

41 
i
=0;i<64;i++)

43 
°MµChnVpss
.
íModId
 = 
HI_ID_VPSS
;

44 
°MµChnVpss
.
s32DevId
 = 
i
;

45 
°MµChnVpss
.
s32ChnId
 = 0;

47 if(0 =(
i
%2))

49 
pcMmzName
 = 
NULL
;

53 
pcMmzName
 = "ddr1";

57 
s32Rë
 = 
HI_MPI_SYS_SëMemC⁄f
(&
°MµChnVpss
, 
pcMmzName
);

58 i‡(
HI_SUCCESS
 !
s32Rë
)

60 
SAMPLE_PRT
("Vpss HI_MPI_SYS_SetMemConf ERR !\n");

61  
HI_FAILURE
;

64  
HI_SUCCESS
;

70 
HI_S32
 
SAMPLE_COMM_VPSS_Sèπ
(HI_S32 
s32GΩC¡
, 
SIZE_S
 *
p°Size
, HI_S32 
s32ChnC¡
,
VPSS_GRP_ATTR_S
 *
p°VpssGΩAâr
)

72 
VPSS_GRP
 
VpssGΩ
;

73 
VPSS_CHN
 
VpssChn
;

74 
VPSS_GRP_ATTR_S
 
°GΩAâr
 = {0};

75 
VPSS_CHN_ATTR_S
 
°ChnAâr
 = {0};

76 
VPSS_GRP_PARAM_S
 
°VpssP¨am
 = {0};

77 
HI_S32
 
s32Rë
;

78 
HI_S32
 
j
;

82 if(
NULL
 =
p°VpssGΩAâr
)

84 
°GΩAâr
.
u32MaxW
 = 
p°Size
->
u32Width
;

85 
°GΩAâr
.
u32MaxH
 = 
p°Size
->
u32Height
;

86 
°GΩAâr
.
bIeEn
 = 
HI_FALSE
;

87 
°GΩAâr
.
bNrEn
 = 
HI_TRUE
;

88 
°GΩAâr
.
bHi°En
 = 
HI_FALSE
;

89 
°GΩAâr
.
íDõMode
 = 
VPSS_DIE_MODE_NODIE
;

90 
°GΩAâr
.
íPixFmt
 = 
SAMPLE_PIXEL_FORMAT
;

94 
mem˝y
(&
°GΩAâr
,
p°VpssGΩAâr
,(
VPSS_GRP_ATTR_S
));

96 
VpssGΩ
 = 
s32GΩC¡
;

98 
s32Rë
 = 
HI_MPI_VPSS_Cª©eGΩ
(
VpssGΩ
, &
°GΩAâr
);

99 i‡(
s32Rë
 !
HI_SUCCESS
)

101 
SAMPLE_PRT
("HI_MPI_VPSS_Cª©eGΩ faûed wôh %#x!\n", 
s32Rë
);

102  
HI_FAILURE
;

106 
s32Rë
 = 
HI_MPI_VPSS_GëGΩP¨am
(
VpssGΩ
, &
°VpssP¨am
);

107 i‡(
s32Rë
 !
HI_SUCCESS
)

109 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

110  
HI_FAILURE
;

113 
°VpssP¨am
.
u32IeSåígth
 = 0;

114 
s32Rë
 = 
HI_MPI_VPSS_SëGΩP¨am
(
VpssGΩ
, &
°VpssP¨am
);

115 i‡(
s32Rë
 !
HI_SUCCESS
)

117 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

118  
HI_FAILURE
;

122 
j
=0; j<
s32ChnC¡
 ; j++)

124 
VpssChn
 = 
j
;

126 
°ChnAâr
.
bSpEn
 = 
HI_FALSE
;

127 
°ChnAâr
.
bB‹dîEn
 = 
HI_FALSE
;

128 
°ChnAâr
.
°B‹dî
.
u32Cﬁ‹
 = 0xff00;

129 
°ChnAâr
.
°B‹dî
.
u32Le·Width
 = 2;

130 
°ChnAâr
.
°B‹dî
.
u32RightWidth
 = 2;

131 
°ChnAâr
.
°B‹dî
.
u32T›Width
 = 2;

132 
°ChnAâr
.
°B‹dî
.
u32BŸtomWidth
 = 2;

135 
s32Rë
 = 
HI_MPI_VPSS_SëChnAâr
(
VpssGΩ
, 
VpssChn
, &
°ChnAâr
);

136 i‡(
s32Rë
 !
HI_SUCCESS
)

138 
SAMPLE_PRT
("HI_MPI_VPSS_SëChnAâ∏Áûed wôh %#x\n", 
s32Rë
);

139  
HI_FAILURE
;

142 
s32Rë
 = 
HI_MPI_VPSS_E«bÀChn
(
VpssGΩ
, 
VpssChn
);

143 i‡(
s32Rë
 !
HI_SUCCESS
)

145 
SAMPLE_PRT
("HI_MPI_VPSS_E«bÀCh¿Áûed wôh %#x\n", 
s32Rë
);

146  
HI_FAILURE
;

151 
s32Rë
 = 
HI_MPI_VPSS_SèπGΩ
(
VpssGΩ
);

152 i‡(
s32Rë
 !
HI_SUCCESS
)

154 
SAMPLE_PRT
("HI_MPI_VPSS_SèπGΩ faûed wôh %#x\n", 
s32Rë
);

155  
HI_FAILURE
;

157  
HI_SUCCESS
;

163 
HI_S32
 
SAMPLE_COMM_VPSS_St›
(HI_S32 
s32GΩC¡
, HI_S32 
s32ChnC¡
)

165 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

166 
VPSS_GRP
 
VpssGΩ
;

168 
VpssGΩ
 = 
s32GΩC¡
;

169 
s32Rë
 = 
HI_MPI_VPSS_St›GΩ
(
VpssGΩ
);

170 i‡(
s32Rë
 !
HI_SUCCESS
)

172 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

173  
HI_FAILURE
;

176 
s32Rë
 = 
HI_MPI_VPSS_De°royGΩ
(
VpssGΩ
);

177 i‡(
s32Rë
 !
HI_SUCCESS
)

179 
SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

180  
HI_FAILURE
;

183  
HI_SUCCESS
;

185 
HI_S32
 
SAMPLE_COMM_DißbÀVpssPªSˇÀ
(
VPSS_GRP
 
VpssGΩ
,
SIZE_S
 
°Size
)

187 
HI_S32
 
s32Rë
;

188 
VPSS_PRESCALE_INFO_S
 
°PªSˇÀInfo
;

190 
°PªSˇÀInfo
.
bPªSˇÀ
 = 
HI_FALSE
;

191 
°PªSˇÀInfo
.
°De°Size
.
u32Width
 = 
°Size
.u32Width;

192 
°PªSˇÀInfo
.
°De°Size
.
u32Height
 = 
°Size
.u32Height;

193 
s32Rë
 = 
HI_MPI_VPSS_SëPªSˇÀ
(
VpssGΩ
, &
°PªSˇÀInfo
);

194 i‡(
s32Rë
 !
HI_SUCCESS
)

196 
SAMPLE_PRT
("HI_MPI_VPSS_SëPªSˇÀ faûed wôh %#x!\n", 
s32Rë
);

197  
HI_FAILURE
;

200  
s32Rë
;

202 
HI_S32
 
SAMPLE_COMM_E«bÀVpssPªSˇÀ
(
VPSS_GRP
 
VpssGΩ
,
SIZE_S
 
°Size
)

204 
HI_S32
 
s32Rë
;

205 
VPSS_PRESCALE_INFO_S
 
°PªSˇÀInfo
;

207 
°PªSˇÀInfo
.
bPªSˇÀ
 = 
HI_TRUE
;

208 
°PªSˇÀInfo
.
°De°Size
.
u32Width
 = 
°Size
.u32Width;

209 
°PªSˇÀInfo
.
°De°Size
.
u32Height
 = 
°Size
.u32Height;

210 
s32Rë
 = 
HI_MPI_VPSS_SëPªSˇÀ
(
VpssGΩ
, &
°PªSˇÀInfo
);

211 i‡(
s32Rë
 !
HI_SUCCESS
)

213 
SAMPLE_PRT
("HI_MPI_VPSS_SëPªSˇÀ faûed wôh %#x!\n", 
s32Rë
);

214  
HI_FAILURE
;

217  
s32Rë
;

220 #ifde‡
__˝lu•lus


221 #i‡
__˝lu•lus


	@HiSDK/extdrv/gpio_i2c/gpio_i2c.c

2 
	~<löux/moduÀ.h
>

3 
	~<löux/î∫o.h
>

4 
	~<löux/miscdevi˚.h
>

5 
	~<löux/f˙é.h
>

7 
	~<löux/öô.h
>

8 
	~<löux/dñay.h
>

9 
	~<löux/¥oc_fs.h
>

10 
	~<löux/w‹kqueue.h
>

12 
	~<asm/uac˚ss.h
>

13 
	~<asm/sy°em.h
>

14 
	~<asm/io.h
>

16 
	~"gpio_i2c.h
"

18 #ifde‡
HI_FPGA


20 
	#GPIO_0_BASE
 0x20150000

	)

21 
	#SCL_SHIFT_NUM
 2

	)

22 
	#SDA_SHIFT_NUM
 3

	)

23 
	#SCL
 (0x1 << 
SCL_SHIFT_NUM
Ë

	)

24 
	#SDA
 (0x1 << 
SDA_SHIFT_NUM
Ë

	)

25 
	#GPIO_I2C_SCL_REG
 
	`IO_ADDRESS
(
GPIO_0_BASE
 + (0x1<<(
SCL_SHIFT_NUM
+2))Ë

	)

26 
	#GPIO_I2C_SDA_REG
 
	`IO_ADDRESS
(
GPIO_0_BASE
 + (0x1<<(
SDA_SHIFT_NUM
+2))Ë

	)

27 
	#GPIO_I2C_SCLSDA_REG
 
	`IO_ADDRESS
(
GPIO_0_BASE
 +((0x1<<(
SCL_SHIFT_NUM
+2))+(0x1<<(
SDA_SHIFT_NUM
+2)))Ë

	)

31 
	#GPIO_0_BASE
 0x201A0000

	)

32 
	#SCL_SHIFT_NUM
 7

	)

33 
	#SDA_SHIFT_NUM
 6

	)

34 
	#SCL
 (0x1 << 
SCL_SHIFT_NUM
Ë

	)

35 
	#SDA
 (0x1 << 
SDA_SHIFT_NUM
Ë

	)

36 
	#GPIO_I2C_SCL_REG
 
	`IO_ADDRESS
(
GPIO_0_BASE
 + (0x1<<(
SCL_SHIFT_NUM
+2))Ë

	)

37 
	#GPIO_I2C_SDA_REG
 
	`IO_ADDRESS
(
GPIO_0_BASE
 + (0x1<<(
SDA_SHIFT_NUM
+2))Ë

	)

38 
	#GPIO_I2C_SCLSDA_REG
 
	`IO_ADDRESS
(
GPIO_0_BASE
 +((0x1<<(
SCL_SHIFT_NUM
+2))+(0x1<<(
SDA_SHIFT_NUM
+2)))Ë

	)

42 
	#GPIO_0_DIR
 
	`IO_ADDRESS
(
GPIO_0_BASE
 + 0x400)

	)

43 
	#HW_REG
(
ªg
Ë*((vﬁ©ûê*)‘eg))

	)

44 
	#DELAY
(
us
Ë
	`time_dñay_us
(us)

	)

55 
	$i2c_˛r
(
whichlöe
)

57 
ªgvÆue
;

59 if(
whichlöe
 =
SCL
)

61 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

62 
ªgvÆue
 |
SCL
;

63 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

65 
	`HW_REG
(
GPIO_I2C_SCL_REG
) = 0;

68 if(
whichlöe
 =
SDA
)

70 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

71 
ªgvÆue
 |
SDA
;

72 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

74 
	`HW_REG
(
GPIO_I2C_SDA_REG
) = 0;

77 if(
whichlöe
 =(
SDA
|
SCL
))

79 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

80 
ªgvÆue
 |(
SDA
|
SCL
);

81 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

83 
	`HW_REG
(
GPIO_I2C_SCLSDA_REG
) = 0;

88 
	`¥ötk
("Error input.\n");

92 
	}
}

100 
	$i2c_£t
(
whichlöe
)

102 
ªgvÆue
;

104 if(
whichlöe
 =
SCL
)

106 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

107 
ªgvÆue
 |
SCL
;

108 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

110 
	`HW_REG
(
GPIO_I2C_SCL_REG
Ë
SCL
;

113 if(
whichlöe
 =
SDA
)

115 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

116 
ªgvÆue
 |
SDA
;

117 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

119 
	`HW_REG
(
GPIO_I2C_SDA_REG
Ë
SDA
;

122 if(
whichlöe
 =(
SDA
|
SCL
))

124 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

125 
ªgvÆue
 |(
SDA
|
SCL
);

126 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

128 
	`HW_REG
(
GPIO_I2C_SCLSDA_REG
Ë(
SDA
|
SCL
);

133 
	`¥ötk
("Error input.\n");

136 
	}
}

144 
	$time_dñay_us
(
u£c
)

146 vﬁ©ûê
i
,
j
;

148 #ifde‡
HI_FPGA


149 
i
 = 0 ; i< 
u£c
 * 5 ;i++)

151 
j
=0;j<47;j++)

156 
i
 = 0 ; i< 
u£c
 * 5 ;i++)

158 
j
 = 0 ; j < 50 * 6 ; j++)

163 
	}
}

174 
byã
 
	$siiRódSegmítBlockEDID
(
byã
 
SœveAddr
, byã 
Segmít
, byã 
Off£t
, byã *
Buf„r
, byã 
Lígth
)

202 
	}
}

203 
EXPORT_SYMBOL
(
siiRódSegmítBlockEDID
);

213 
	$i2c_d©a_ªad
()

215 
ªgvÆue
;

217 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

218 
ªgvÆue
 &(~
SDA
);

219 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

220 
	`DELAY
(1);

222 
ªgvÆue
 = 
	`HW_REG
(
GPIO_I2C_SDA_REG
);

223 if((
ªgvÆue
&
SDA
) != 0)

227 
	}
}

235 
	$i2c_°¨t_bô
()

237 
	`DELAY
(1);

238 
	`i2c_£t
(
SDA
 | 
SCL
);

239 
	`DELAY
(1);

240 
	`i2c_˛r
(
SDA
);

241 
	`DELAY
(1);

242 
	}
}

248 
	$i2c_°›_bô
()

251 
	`DELAY
(1);

252 
	`i2c_£t
(
SCL
);

253 
	`DELAY
(1);

254 
	`i2c_˛r
(
SCL
);

257 
	`DELAY
(1);

258 
	`i2c_˛r
(
SDA
);

259 
	`DELAY
(1);

260 
	`i2c_£t
(
SCL
);

261 
	`DELAY
(1);

262 
	`i2c_£t
(
SDA
);

263 
	`DELAY
(1);

264 
	}
}

272 
	$i2c_£nd_byã
(
c
)

274 
i
;

275 
	`loˇl_úq_dißbÀ
();

276 
i
=0; i<8; i++)

278 
	`DELAY
(1);

279 
	`i2c_˛r
(
SCL
);

280 
	`DELAY
(1);

282 i‡(
c
 & (1<<(7-
i
)))

283 
	`i2c_£t
(
SDA
);

285 
	`i2c_˛r
(
SDA
);

287 
	`DELAY
(1);

288 
	`i2c_£t
(
SCL
);

289 
	`DELAY
(1);

290 
	`i2c_˛r
(
SCL
);

292 
	`DELAY
(1);

294 
	`loˇl_úq_íabÀ
();

295 
	}
}

302 
	$i2c_ª˚ive_byã
()

304 
j
=0;

305 
i
;

306 
ªgvÆue
;

308 
	`loˇl_úq_dißbÀ
();

309 
i
=0; i<8; i++)

311 
	`DELAY
(1);

312 
	`i2c_˛r
(
SCL
);

313 
	`DELAY
(1);

314 
	`i2c_£t
(
SCL
);

316 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

317 
ªgvÆue
 &(~
SDA
);

318 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

319 
	`DELAY
(1);

321 i‡(
	`i2c_d©a_ªad
())

322 
j
+=(1<<(7-
i
));

324 
	`DELAY
(1);

325 
	`i2c_˛r
(
SCL
);

327 
	`loˇl_úq_íabÀ
();

328 
	`DELAY
(1);

332  
j
;

333 
	}
}

340 
	$i2c_ª˚ive_ack
()

342 
«ck
;

343 
ªgvÆue
;

345 
	`DELAY
(1);

347 
ªgvÆue
 = 
	`HW_REG
(
GPIO_0_DIR
);

348 
ªgvÆue
 &(~
SDA
);

349 
	`HW_REG
(
GPIO_0_DIR
Ë
ªgvÆue
;

351 
	`DELAY
(1);

352 
	`i2c_˛r
(
SCL
);

353 
	`DELAY
(1);

354 
	`i2c_£t
(
SCL
);

355 
	`DELAY
(1);

359 
«ck
 = 
	`i2c_d©a_ªad
();

361 
	`DELAY
(1);

362 
	`i2c_˛r
(
SCL
);

363 
	`DELAY
(1);

367 i‡(
«ck
 == 0)

371 
	}
}

374 
	$i2c_£nd_ack
()

376 
	`DELAY
(1);

377 
	`i2c_˛r
(
SCL
);

378 
	`DELAY
(1);

379 
	`i2c_£t
(
SDA
);

380 
	`DELAY
(1);

381 
	`i2c_£t
(
SCL
);

382 
	`DELAY
(1);

383 
	`i2c_˛r
(
SCL
);

384 
	`DELAY
(1);

385 
	`i2c_˛r
(
SDA
);

386 
	`DELAY
(1);

387 
	}
}

390 
EXPORT_SYMBOL
(
gpio_i2c_ªad
);

391 
	$gpio_i2c_ªad
(
devaddªss
, 
addªss
)

393 
rxd©a
;

395 
	`i2c_°¨t_bô
();

396 
	`i2c_£nd_byã
(()(
devaddªss
));

397 
	`i2c_ª˚ive_ack
();

398 
	`i2c_£nd_byã
(
addªss
);

399 
	`i2c_ª˚ive_ack
();

400 
	`i2c_°¨t_bô
();

401 
	`i2c_£nd_byã
(()(
devaddªss
) | 1);

402 
	`i2c_ª˚ive_ack
();

403 
rxd©a
 = 
	`i2c_ª˚ive_byã
();

405 
	`i2c_°›_bô
();

407  
rxd©a
;

408 
	}
}

411 
EXPORT_SYMBOL
(
gpio_i2c_wrôe
);

412 
	$gpio_i2c_wrôe
(
devaddªss
, 
addªss
, 
d©a
)

414 
	`i2c_°¨t_bô
();

415 
	`i2c_£nd_byã
(()(
devaddªss
));

416 
	`i2c_ª˚ive_ack
();

417 
	`i2c_£nd_byã
(
addªss
);

418 
	`i2c_ª˚ive_ack
();

419 
	`i2c_£nd_byã
(
d©a
);

421 
	`i2c_°›_bô
();

422 
	}
}

425 
	$gpioi2c_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

427 
vÆ
;

429 
devi˚_addr
, 
ªg_addr
;

430 
ªg_vÆ
;

433 
cmd
)

435 
GPIO_I2C_READ
:

436 
vÆ
 = *(*)
¨g
;

437 
devi˚_addr
 = (
vÆ
&0xff000000)>>24;

438 
ªg_addr
 = (
vÆ
&0xff0000)>>16;

440 
ªg_vÆ
 = 
	`gpio_i2c_ªad
(
devi˚_addr
, 
ªg_addr
);

441 *(*)
¨g
 = (
vÆ
&0xffff0000)|
ªg_vÆ
;

444 
GPIO_I2C_WRITE
:

445 
vÆ
 = *(*)
¨g
;

446 
devi˚_addr
 = (
vÆ
&0xff000000)>>24;

447 
ªg_addr
 = (
vÆ
&0xff0000)>>16;

449 
ªg_vÆ
 = 
vÆ
&0xffff;

450 
	`gpio_i2c_wrôe
(
devi˚_addr
, 
ªg_addr
, 
ªg_vÆ
);

457 
	}
}

459 
	$gpioi2c_›í
(
öode
 * inode, 
fûe
 * file)

462 
	}
}

463 
	$gpioi2c_˛o£
(
öode
 * inode, 
fûe
 * file)

466 
	}
}

469 
fûe_›î©i⁄s
 
	ggpioi2c_f›s
 = {

470 .
ow√r
 = 
THIS_MODULE
,

472 .
	gu∆ocked_io˘l
 = 
gpioi2c_io˘l
,

473 .
	g›í
 = 
gpioi2c_›í
,

474 .
	gªÀa£
 = 
gpioi2c_˛o£


478 
miscdevi˚
 
	ggpioi2c_dev
 = {

479 .
mö‹
 = 
MISC_DYNAMIC_MINOR
,

480 .
	g«me
 = "gpioi2c",

481 .
	gf›s
 = &
gpioi2c_f›s
,

484 
__öô
 
	$gpio_i2c_öô
()

486 
ªt
;

489 
ªt
 = 
	`misc_ªgi°î
(&
gpioi2c_dev
);

490 if(0 !
ªt
)

498 
	`i2c_£t
(
SCL
 | 
SDA
);

501 
	}
}

503 
__exô
 
	$gpio_i2c_exô
()

505 
	`misc_dîegi°î
(&
gpioi2c_dev
);

506 
	}
}

509 
moduÀ_öô
(
gpio_i2c_öô
);

510 
moduÀ_exô
(
gpio_i2c_exô
);

512 #ifde‡
MODULE


516 
MODULE_LICENSE
("GPL");

	@HiSDK/extdrv/gpio_i2c/gpio_i2c.h

2 #i‚de‡
_GPIO_I2C_H_


3 
	#_GPIO_I2C_H_


	)

6 
	#GPIO_I2C_READ
 0x01

	)

7 
	#GPIO_I2C_WRITE
 0x03

	)

10 
gpio_i2c_ªad
(
devaddªss
, 
addªss
);

11 
gpio_i2c_wrôe
(
devaddªss
, 
addªss
, 
vÆue
);

	@HiSDK/extdrv/gpio_i2c/gpioi2c.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@HiSDK/extdrv/gpio_i2c/i2c_read.c

1 
	~<°dio.h
>

2 
	~<uni°d.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/io˘l.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

9 
	~"°rfunc.h
"

10 
	~"gpio_i2c.h
"

13 
	$maö
(
¨gc
 , * 
¨gv
[])

15 
fd
 = -1;

16 
ªt
;

17 
devi˚_addr
, 
ªg_addr
, 
ªg_addr_íd
,
ªg_vÆue
, 
vÆue
;

20 i‡((
¨gc
 != 3) && (argc != 4))

22 
	`¥ötf
("ußge: %†<devi˚_addr> <ªg_addr>. sam∂e: %†0x56 0x0\n", 
¨gv
[0],árgv[0]);

26 i‡(
	`SåToNumbî
(
¨gv
[1], &
devi˚_addr
))

31 i‡(
	`SåToNumbî
(
¨gv
[2], &
ªg_addr
))

36 
fd
 = 
	`›í
("/dev/gpioi2c", 0);

37 i‡(
fd
<0)

39 
	`¥ötf
("Open gpioi2c devÉrror!\n");

43 i‡(3 =
¨gc
)

45 
	`¥ötf
("devi˚_addr:0x%2x;Ñeg_addr:0x%2x.\n", 
devi˚_addr
, 
ªg_addr
);

46 
vÆue
 = ((
devi˚_addr
&0xff)<<24Ë| ((
ªg_addr
&0xff)<<16);

47 
ªt
 = 
	`io˘l
(
fd
, 
GPIO_I2C_READ
, &
vÆue
);

48 
ªg_vÆue
 = 
vÆue
&0xff;

49 
	`¥ötf
("0x%2x\n", 
ªg_vÆue
);

51 i‡(4 =
¨gc
)

53 
cur_addr
;

54 i‡(
	`SåToNumbî
(
¨gv
[3], &
ªg_addr_íd
))

56 
	`˛o£
(
fd
);

59 i‡(
ªg_addr_íd
 < 
ªg_addr
)

61 
	`¥ötf
("endáddr(0x%2x) should biggerÅhan startáddr(0x%2x)\n",

62 
ªg_addr_íd
, 
ªg_addr
);

63 
	`˛o£
(
fd
);

66 
	`¥ötf
("device_addr:0x%2x;Ñeg_addr_start:0x%2x;Ñeg_addr_end:0x%2x.\n",

67 
devi˚_addr
, 
ªg_addr
, 
ªg_addr_íd
);

68 
cur_addr
=
ªg_addr
; cur_addr<
ªg_addr_íd
+1; cur_addr++)

70 
vÆue
 = ((
devi˚_addr
&0xff)<<24Ë| ((
cur_addr
&0xff)<<16);

71 
ªt
 = 
	`io˘l
(
fd
, 
GPIO_I2C_READ
, &
vÆue
);

72 
ªg_vÆue
 = 
vÆue
&0xff;

73 
	`¥ötf
("0x%x 0x%x\n", 
cur_addr
, 
ªg_vÆue
);

77 
	`˛o£
(
fd
);

80 
	}
}

	@HiSDK/extdrv/gpio_i2c/i2c_write.c

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<sys/io˘l.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/°©.h
>

8 
	~<f˙é.h
>

10 
	~"°rfunc.h
"

11 
	~"gpio_i2c.h
"

14 
	$maö
(
¨gc
 , * 
¨gv
[])

16 
fd
 = -1;

17 
ªt
 =0;

18 
devi˚_addr
, 
ªg_addr
, 
ªg_vÆue
, 
vÆue
;

20 if(
¨gc
 != 4)

22 
	`¥ötf
("ußge: %†<devi˚_addr> <ªg_addr> <vÆue>. sam∂e: %†0x56 0x0 0x28\n", 
¨gv
[0],árgv[0]);

26 i‡(
	`SåToNumbî
(
¨gv
[1], &
devi˚_addr
))

31 i‡(
	`SåToNumbî
(
¨gv
[2], &
ªg_addr
))

36 i‡(
	`SåToNumbî
(
¨gv
[3], &
ªg_vÆue
))

41 
fd
 = 
	`›í
("/dev/gpioi2c", 0);

42 if(
fd
<0)

44 
	`¥ötf
("Open gpioi2cÉrror!\n");

48 
	`¥ötf
("devi˚_addr:0x%2x;Ñeg_addr:0x%2x;Ñeg_vÆue:0x%2x.\n", 
devi˚_addr
, 
ªg_addr
, 
ªg_vÆue
);

50 
vÆue
 = ((
devi˚_addr
&0xff)<<24Ë| ((
ªg_addr
&0xff)<<16Ë| (
ªg_vÆue
&0xffff);

52 
ªt
 = 
	`io˘l
(
fd
, 
GPIO_I2C_WRITE
, &
vÆue
);

54 
	`˛o£
(
fd
);

57 
	}
}

	@HiSDK/extdrv/gpio_i2c/strfunc.c

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~"°rfunc.h
"

24 
©oul
(*
°r
,* 
pulVÆue
);

25 
©oulx
(*
°r
,* 
pulVÆue
);

48 
	$SåToNumbî
(*
°r
 , * 
pulVÆue
)

51 i‡–*
°r
 == '0' && (*(str+1) == 'x' || *(str+1) == 'X') )

53 i‡(*(
°r
+2) == '\0')

59  
	`©oulx
(
°r
+2,
pulVÆue
);

64  
	`©oul
(
°r
,
pulVÆue
);

66 
	}
}

85 
	$©oul
(*
°r
,* 
pulVÆue
)

87 
ulResu…
=0;

89 *
°r
)

91 i‡(
	`isdigô
(()*
°r
))

96 i‡((
ulResu…
<429496729Ë|| ((ulResu…==429496729Ë&& (*
°r
<'6')))

98 
ulResu…
 = ulResu…*10 + (*
°r
)-48;

102 *
pulVÆue
 = 
ulResu…
;

108 *
pulVÆue
=
ulResu…
;

111 
°r
++;

113 *
pulVÆue
=
ulResu…
;

115 
	}
}

136 
	#ASC2NUM
(
ch
Ë(ch - '0')

	)

137 
	#HEXASC2NUM
(
ch
Ë(ch - 'A' + 10)

	)

139 
	$©oulx
(*
°r
,* 
pulVÆue
)

141 
ulResu…
=0;

142 
ch
;

144 *
°r
)

146 
ch
=
	`touµî
(*
°r
);

147 i‡(
	`isdigô
(
ch
) || ((ch >= 'A') && (ch <= 'F' )))

149 i‡(
ulResu…
 < 0x10000000)

151 
ulResu…
 = (ulResu… << 4Ë+ ((
ch
<='9')?(
	`ASC2NUM
(ch)):(
	`HEXASC2NUM
(ch)));

155 *
pulVÆue
=
ulResu…
;

161 *
pulVÆue
=
ulResu…
;

164 
°r
++;

167 *
pulVÆue
=
ulResu…
;

169 
	}
}

	@HiSDK/extdrv/gpio_i2c/strfunc.h

20 #i‚de‡
__STRFUNC_H__


21 
	#__STRFUNC_H__


	)

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


30 
	#STRFMT_ADDR32
 "%#010lX"

	)

31 
	#STRFMT_ADDR32_2
 "0x%08lX"

	)

33 
SåToNumbî
(*
°r
 , * 
ulVÆue
);

37 #ifde‡
__˝lu•lus


38 #i‡
__˝lu•lus


	@HiSDK/extdrv/i2c/i2c.c

22 
	~<löux/moduÀ.h
>

23 
	~<löux/î∫o.h
>

24 
	~<löux/miscdevi˚.h
>

25 
	~<löux/f˙é.h
>

27 
	~<löux/öô.h
>

28 
	~<löux/dñay.h
>

29 
	~<löux/¥oc_fs.h
>

30 
	~<löux/w‹kqueue.h
>

32 
	~<asm/uac˚ss.h
>

33 
	~<asm/sy°em.h
>

34 
	~<asm/io.h
>

36 
	~"i2c.h
"

38 
	#READ_OPERATION
 (1)

	)

39 
	#WRITE_OPERATION
 0x„

	)

43 
	#I2C_ENABLE
 (1 << 8)

	)

44 
	#I2C_UNMASK_TOTAL
 (1 << 7)

	)

45 
	#I2C_UNMASK_START
 (1 << 6)

	)

46 
	#I2C_UNMASK_END
 (1 << 5)

	)

47 
	#I2C_UNMASK_SEND
 (1 << 4)

	)

48 
	#I2C_UNMASK_RECEIVE
 (1 << 3)

	)

49 
	#I2C_UNMASK_ACK
 (1 << 2)

	)

50 
	#I2C_UNMASK_ARBITRATE
 (1<< 1)

	)

51 
	#I2C_UNMASK_OVER
 (1 << 0)

	)

52 
	#I2C_UNMASK_ALL
 (
I2C_UNMASK_START
 | 
I2C_UNMASK_END
 | \

53 
I2C_UNMASK_SEND
 | 
I2C_UNMASK_RECEIVE
 | \

54 
I2C_UNMASK_ACK
 | 
I2C_UNMASK_ARBITRATE
 | \

55 
I2C_UNMASK_OVER
)

	)

58 
	#I2C_SEND_ACK
 (~(1 << 4))

	)

59 
	#I2C_START
 (1 << 3)

	)

60 
	#I2C_READ
 (1 << 2)

	)

61 
	#I2C_WRITE
 (1 << 1)

	)

62 
	#I2C_STOP
 (1 << 0)

	)

65 
	#I2C_CLEAR_START
 (1 << 6)

	)

66 
	#I2C_CLEAR_END
 (1 << 5)

	)

67 
	#I2C_CLEAR_SEND
 (1 << 4)

	)

68 
	#I2C_CLEAR_RECEIVE
 (1 << 3)

	)

69 
	#I2C_CLEAR_ACK
 (1 << 2)

	)

70 
	#I2C_CLEAR_ARBITRATE
 (1 << 1)

	)

71 
	#I2C_CLEAR_OVER
 (1 << 0)

	)

72 
	#I2C_CLEAR_ALL
 (
I2C_CLEAR_START
 | 
I2C_CLEAR_END
 | \

73 
I2C_CLEAR_SEND
 | 
I2C_CLEAR_RECEIVE
 | \

74 
I2C_CLEAR_ACK
 | 
I2C_CLEAR_ARBITRATE
 | \

75 
I2C_CLEAR_OVER
)

	)

78 
	#I2C_BUSY
 (1 << 7)

	)

79 
	#I2C_START_INTR
 (1 << 6)

	)

80 
	#I2C_END_INTR
 (1 << 5)

	)

81 
	#I2C_SEND_INTR
 (1 << 4)

	)

82 
	#I2C_RECEIVE_INTR
 (1 << 3)

	)

83 
	#I2C_ACK_INTR
 (1 << 2)

	)

84 
	#I2C_ARBITRATE_INTR
 (1 << 1)

	)

85 
	#I2C_OVER_INTR
 (1 << 0)

	)

88 
	#I2C_WAIT_TIME_OUT
 0x1000

	)

89 
	#I2C_ADRESS_BASE
 0x200D0000

	)

91 #ifde‡
HI_FPGA


92 
	#I2C_DFT_CLK
 (50000000)

	)

94 
	#I2C_DFT_CLK
 (110000000)

	)

97 
	#I2C_DFT_RATE
 (100000)

	)

100 
__iomem
 *
	gªg_i2c_ba£_va
 = 0;

101 
	#HI_IO_ADDRESS
(
x
Ë(
ªg_i2c_ba£_va
 + ((x)-(
I2C_ADRESS_BASE
)))

	)

104 
	#I2C_CTRL_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x000)

	)

105 
	#I2C_COM_REB
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x004)

	)

106 
	#I2C_ICR_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x008)

	)

107 
	#I2C_SR_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x00C)

	)

108 
	#I2C_SCL_H_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x010)

	)

109 
	#I2C_SCL_L_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x014)

	)

110 
	#I2C_TXR_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x018)

	)

111 
	#I2C_RXR_REG
 
	`IO_ADDRESS
(
I2C_ADRESS_BASE
 + 0x01C)

	)

114 
	#I2C_WRITE_REG
(
Addr
, 
VÆue
Ë((*(vﬁ©ûê*)(Addr)Ë(VÆue))

	)

115 
	#I2C_READ_REG
(
Addr
Ë(*(vﬁ©ûê*)(Addr))

	)

117 
•ölock_t
 
	ggpioi2c_lock
;

119 
	$I2C_DRV_SëR©e
(
I2cR©e
)

121 
VÆue
 = 0;

122 
S˛H
 = 0;

123 
S˛L
 = 0;

127 
VÆue
 = 
	`I2C_READ_REG
(
I2C_CTRL_REG
);

130 
	`I2C_WRITE_REG
(
I2C_CTRL_REG
, (
VÆue
 & (~
I2C_UNMASK_TOTAL
)));

132 
S˛H
 = (
I2C_DFT_CLK
 / (
I2cR©e
 * 2)) / 2 - 1;

133 
	`I2C_WRITE_REG
(
I2C_SCL_H_REG
, 
S˛H
);

135 
S˛L
 = (
I2C_DFT_CLK
 / (
I2cR©e
 * 2)) / 2 - 1;

136 
	`I2C_WRITE_REG
(
I2C_SCL_L_REG
, 
S˛L
);

139 
	`I2C_WRITE_REG
(
I2C_CTRL_REG
, 
VÆue
);

142 
	}
}

144 
	$I2C_DRV_WaôWrôeEnd
(
I2cNum
)

146 
I2cSrReg
;

147 
i
 = 0;

151 
I2cSrReg
 = 
	`I2C_READ_REG
(
I2C_SR_REG
);

153 i‡(
i
 > 
I2C_WAIT_TIME_OUT
)

158 
i
++;

159 }(
I2cSrReg
 & 
I2C_OVER_INTR
) != I2C_OVER_INTR);

161 
	`I2C_WRITE_REG
(
I2C_ICR_REG
, 
I2C_CLEAR_ALL
);

164 
	}
}

166 
	$I2C_DRV_WaôRód
(
I2cNum
)

168 
I2cSrReg
;

169 
i
 = 0;

173 
I2cSrReg
 = 
	`I2C_READ_REG
(
I2C_SR_REG
);

175 i‡(
i
 > 
I2C_WAIT_TIME_OUT
)

180 
i
++;

181 }(
I2cSrReg
 & 
I2C_RECEIVE_INTR
) != I2C_RECEIVE_INTR);

184 
	}
}

193 
	$I2C_DRV_WrôeC⁄fig
(
I2cDevAddr
)

195 
i
 = 0;

196 
j
 = 0;

197 
I2cSrReg
;

201 
	`I2C_WRITE_REG
(
I2C_TXR_REG
,(
I2cDevAddr
 & 
WRITE_OPERATION
));

202 
	`I2C_WRITE_REG
(
I2C_COM_REB
, (
I2C_WRITE
 | 
I2C_START
));

204 
j
 = 0;

207 
I2cSrReg
 = 
	`I2C_READ_REG
(
I2C_SR_REG
);

209 i‡(
j
 > 
I2C_WAIT_TIME_OUT
)

214 
j
++;

215 }(
I2cSrReg
 & 
I2C_OVER_INTR
) != I2C_OVER_INTR);

217 
I2cSrReg
 = 
	`I2C_READ_REG
–
I2C_SR_REG
);

218 
	`I2C_WRITE_REG
(
I2C_ICR_REG
, 
I2C_CLEAR_ALL
);

220 
i
++;

222 i‡(
i
 > 0x200000)

224 
	`¥ötk
("wait writeáck okÅimeout!\n");

227 }(
I2cSrReg
 & 
I2C_ACK_INTR
));

230 
	}
}

232 
	$I2C_DRV_Wrôe
(
I2cNum
, 
I2cDevAddr
, 
I2cRegAddr
, 
I2cRegAddrByãNum
, 
D©a
, 
D©aLí
)

234 
i
 ;

235 
RegAddr
 ;

236 
TXR_d©a
;

238 
	`•ö_lock
(&
gpioi2c_lock
);

243 
	`I2C_WRITE_REG
(
I2C_ICR_REG
 , 0x03 );

244 
	`I2C_WRITE_REG
(
I2C_CTRL_REG
, 0x187);

246 
	`I2C_WRITE_REG
(
I2C_TXR_REG
, (
I2cDevAddr
 & 
WRITE_OPERATION
));

247 
	`I2C_WRITE_REG
(
I2C_COM_REB
, (
I2C_WRITE
 | 
I2C_START
));

249 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

255 
i
=0; i<
I2cRegAddrByãNum
; i++)

257 
RegAddr
 = 
I2cRegAddr
 >> ((
I2cRegAddrByãNum
 -
i
 -1) * 8);

258 
	`I2C_WRITE_REG
(
I2C_TXR_REG
, 
RegAddr
 );

259 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_WRITE
);

261 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

271 
i
=0; i<
D©aLí
; i++)

273 
TXR_d©a
 = 
D©a
 >> ((
D©aLí
 -
i
 -1) * 8);

274 
	`I2C_WRITE_REG
(
I2C_TXR_REG
, 
TXR_d©a
 );

275 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_WRITE
);

277 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

281 
	`I2C_WRITE_REG
(
I2C_ICR_REG
, 
I2C_CLEAR_ALL
);

285 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_STOP
);

286 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

290 
	`I2C_WRITE_REG
(
I2C_ICR_REG
, 0x01);

292 
	`•ö_u∆ock
(&
gpioi2c_lock
);

295 
	}
}

298 
	$I2C_DRV_Ród
(
I2cNum
, 
I2cDevAddr
, 
I2cRegAddr
, 
I2cRegAddrByãNum
, 
D©aLí
)

300 
d©aTmp
 = 0xff;

301 
i
 ;

302 
RegAddr
 ;

303 
D©a
=0 ;

305 
	`•ö_lock
(&
gpioi2c_lock
);

309 
	`I2C_WRITE_REG
(
I2C_ICR_REG
 , 0x03 );

310 
	`I2C_WRITE_REG
(
I2C_CTRL_REG
, 0x187);

313 
	`I2C_WRITE_REG
(
I2C_TXR_REG
, (
I2cDevAddr
 & 
WRITE_OPERATION
));

314 
	`I2C_WRITE_REG
(
I2C_COM_REB
,(
I2C_WRITE
 | 
I2C_START
));

316 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

324 
i
=0; i<
I2cRegAddrByãNum
; i++)

326 
RegAddr
 = 
I2cRegAddr
 >> ((
I2cRegAddrByãNum
 -
i
 -1) * 8);

327 
	`I2C_WRITE_REG
(
I2C_TXR_REG
, 
RegAddr
 );

328 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_WRITE
);

330 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

339 
	`I2C_WRITE_REG
(
I2C_TXR_REG
, (
I2cDevAddr
 | 
READ_OPERATION
));

340 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_WRITE
 | 
I2C_START
);

342 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

351 
i
=0; i<
D©aLí
; i++)

354 i‡(
i
 =(
D©aLí
 - 1))

356 
	`I2C_WRITE_REG
(
I2C_COM_REB
, (
I2C_READ
 | (~
I2C_SEND_ACK
)));

361 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_READ
);

364 i‡(
	`I2C_DRV_WaôRód
(
I2cNum
))

370 
d©aTmp
 = 
	`I2C_READ_REG
(
I2C_RXR_REG
);

371 
D©a
D©®| (
d©aTmp
<<((
D©aLí
-
i
-1)*8)) ;

373 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

382 
	`I2C_WRITE_REG
(
I2C_COM_REB
, 
I2C_STOP
);

383 i‡(
	`I2C_DRV_WaôWrôeEnd
(
I2cNum
))

391 
	`•ö_u∆ock
(&
gpioi2c_lock
);

392  
D©a
 ;

394 
	}
}

399 
	$i2c_wrôe_c⁄fig
(
dev_addr
)

401  
	`I2C_DRV_WrôeC⁄fig
(
dev_addr
);

402 
	}
}

404 
	$i2c_wrôe
(
dev_addr
, 
ªg_addr
, 
d©a
)

406  
	`I2C_DRV_Wrôe
(1, 
dev_addr
, 
ªg_addr
, 1, 
d©a
, 1);

407 
	}
}

409 
	$i2c_ªad
(
dev_addr
, 
ªg_addr
)

411  
	`I2C_DRV_Ród
(1, 
dev_addr
, 
ªg_addr
, 1, 1);

412 
	}
}

414 
	$i2c_wrôe_ex
(
dev_addr
, 
ªg_addr
, 
addr_byã
, 
d©a
, 
d©a_byã
)

416  
	`I2C_DRV_Wrôe
(1, 
dev_addr
, 
ªg_addr
, 
addr_byã
, 
d©a
, 
d©a_byã
);

417 
	}
}

419 
	$i2c_ªad_ex
(
dev_addr
, 
ªg_addr
, 
addr_byã
, 
d©a_byã
)

421  
	`I2C_DRV_Ród
(1, 
dev_addr
, 
ªg_addr
, 
addr_byã
, 
d©a_byã
);

422 
	}
}

427 
	$I2C_O≥n
(
öode
 * inode, 
fûe
 * file)

431 
	}
}

433 
	$I2C_Clo£
(
öode
 * inode, 
fûe
 * file)

436 
	}
}

439 
	$I2C_Io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

441 
I2C_DATA_S
 
__u£r
 *
¨gp
 = (I2C_DATA_S __u£r*)
¨g
;

443 
devAdd
 ;

444 
RegAddr
;

445 
Reg_Lí
;

446 
D©aLí
;

447 
Wd©a
 ;

449 
cmd
)

451 
I2C_CMD_WRITE
:

453 
devAdd
 = 
¨gp
->
dev_addr
;

454 
RegAddr

¨gp
->
ªg_addr
;

455 
Reg_Lí

¨gp
->
addr_byã
 ;

456 
Wd©a
 = 
¨gp
->
d©a
 ;

457 
D©aLí

¨gp
->
d©a_byã
 ;

459 
	`I2C_DRV_Wrôe
(1, 
devAdd
, 
RegAddr
, 
Reg_Lí
, 
Wd©a
, 
D©aLí
);

463 
I2C_CMD_READ
:

465 
devAdd
 = 
¨gp
->
dev_addr
;

466 
RegAddr

¨gp
->
ªg_addr
;

467 
Reg_Lí

¨gp
->
addr_byã
 ;

468 
D©aLí

¨gp
->
d©a_byã
 ;

470 
¨gp
->
d©a
 = 
	`I2C_DRV_Ród
(1, 
devAdd
, 
RegAddr
, 
Reg_Lí
, 
D©aLí
);

476 
	`¥ötk
("invalid ioctl command!\n");

477  -
ENOIOCTLCMD
;

482 
	}
}

484 
fûe_›î©i⁄s
 
	gi2c_f›s
 = {

485 .
ow√r
 = 
THIS_MODULE
,

486 .
	gu∆ocked_io˘l

I2C_Io˘l
 ,

487 .
	g›í
 = 
I2C_O≥n
 ,

488 .
	gªÀa£
 = 
I2C_Clo£
 ,

491 
miscdevi˚
 
	gi2c_dev
 = {

492 .
mö‹
 = 
MISC_DYNAMIC_MINOR
,

493 .
	g«me
 = "i2c" ,

494 .
	gf›s
 = &
i2c_f›s
,

500 
__öô
 
	$i2c_öô
()

502 
ªt
 = 
	`misc_ªgi°î
(&
i2c_dev
);

503 if(
ªt
 != 0)

505 
	`¥ötk
("ªgi°î i2¯devi˚ faûed wôh %#x!\n", 
ªt
);

509 
	`I2C_DRV_SëR©e
(
I2C_DFT_RATE
);

511 
	`•ö_lock_öô
(&
gpioi2c_lock
);

514 
	}
}

516 
__exô
 
	$i2c_exô
()

518 
	`I2C_WRITE_REG
(
I2C_CTRL_REG
, (~
I2C_ENABLE
));

519 
	`misc_dîegi°î
(&
i2c_dev
);

520 
	}
}

523 
EXPORT_SYMBOL
(
i2c_wrôe_c⁄fig
);

524 
EXPORT_SYMBOL
(
i2c_wrôe
);

525 
EXPORT_SYMBOL
(
i2c_ªad
);

526 
EXPORT_SYMBOL
(
i2c_wrôe_ex
);

527 
EXPORT_SYMBOL
(
i2c_ªad_ex
);

530 
moduÀ_öô
(
i2c_öô
);

531 
moduÀ_exô
(
i2c_exô
);

533 
MODULE_DESCRIPTION
("IIC Driver");

534 
MODULE_AUTHOR
("Hisilicon");

535 
MODULE_LICENSE
("GPL");

	@HiSDK/extdrv/i2c/i2c.h

1 #i‚de‡
__HI_I2C_H__


2 
	#__HI_I2C_H__


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


11 
	shiI2C_DATA_S


13 
dev_addr
;

14 
ªg_addr
;

15 
addr_byã
;

16 
d©a
;

17 
d©a_byã
;

19 } 
	tI2C_DATA_S
;

21 
	#I2C_CMD_WRITE
 0x01

	)

22 
	#I2C_CMD_READ
 0x03

	)

25 
i2c_wrôe
(
dev_addr
, 
ªg_addr
, 
d©a
);

26 
i2c_ªad
(
dev_addr
, 
ªg_addr
);

28 
i2c_wrôe_ex
(
dev_addr
, 
ªg_addr
, 
addr_byã
, 
d©a
, 
d©a_byã
);

29 
i2c_ªad_ex
(
dev_addr
, 
ªg_addr
, 
addr_byã
, 
d©a_byã
);

32 #ifde‡
__˝lu•lus


33 #i‡
__˝lu•lus


	@HiSDK/extdrv/i2c/i2c_read.c

1 
	~<°dio.h
>

2 
	~<˘y≥.h
>

3 
	~<sys/io˘l.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

9 
	~"°rfunc.h
"

10 
	~"i2c.h
"

13 
	$maö
(
¨gc
 , * 
¨gv
[])

15 
fd
 = -1;

16 
ªt
;

17 
devi˚_addr
, 
ªg_addr
, 
ªg_vÆue
;

18 
addr_Àn
 = 1;

19 
d©a_Àn
 = 1;

21 
I2C_DATA_S
 
i2c_d©a
;

23 i‡(
¨gc
 < 3)

25 
	`¥ötf
("ußge: %†<devi˚_addr> <ªg_addr> (addr_ÀnË(d©a_Àn).\n", 
¨gv
[0]);

29 i‡(
	`SåToNumbî
(
¨gv
[1], &
devi˚_addr
))

34 i‡(
	`SåToNumbî
(
¨gv
[2], &
ªg_addr
))

39 i‡(
¨gc
 == 4)

41 i‡(
	`SåToNumbî
(
¨gv
[3], &
addr_Àn
))

45 
addr_Àn
 = (addr_len > 2)? 1:áddr_len;

48 i‡(
¨gc
 == 5)

50 i‡(
	`SåToNumbî
(
¨gv
[4], &
d©a_Àn
))

54 
d©a_Àn
 = (data_len > 2)? 1: data_len;

57 
fd
 = 
	`›í
("/dev/i2c", 0);

58 if(
fd
 < 0)

60 
	`¥ötf
("Open i2c deviceÉrror!\n");

64 
i2c_d©a
.
dev_addr
 = 
devi˚_addr
;

65 
i2c_d©a
.
ªg_addr
 =Ñeg_addr;

66 
i2c_d©a
.
addr_byã
 = 
addr_Àn
;

67 
i2c_d©a
.
d©a_byã
 = 
d©a_Àn
;

69 
ªt
 = 
	`io˘l
(
fd
, 
I2C_CMD_READ
, &
i2c_d©a
);

70 if(
ªt
)

72 
	`¥ötf
("i2cÑead failed!\n");

73 
	`˛o£
(
fd
);

77 
ªg_vÆue
 = 
i2c_d©a
.
d©a
;

79 
	`¥ötf
("ªad: devi˚_addr:0x%x;Ñeg_addr:0x%x;Ñeg_vÆue:0x%x.\n", 
devi˚_addr
, 
ªg_addr
, 
ªg_vÆue
);

81 
	`˛o£
(
fd
);

84 
	}
}

	@HiSDK/extdrv/i2c/i2c_write.c

2 
	~<°dio.h
>

3 
	~<˘y≥.h
>

4 
	~<sys/io˘l.h
>

5 
	~<sys/ty≥s.h
>

6 
	~<sys/°©.h
>

7 
	~<f˙é.h
>

8 
	~<uni°d.h
>

10 
	~"°rfunc.h
"

11 
	~"i2c.h
"

14 
	$maö
(
¨gc
 , * 
¨gv
[])

16 
fd
 = -1;

17 
ªt
 = 0;

18 
I2C_DATA_S
 
i2c_d©a
;

19 
devi˚_addr
, 
ªg_addr
, 
ªg_vÆue
;

21 if(
¨gc
 != 4)

23 
	`¥ötf
("ußge: %†<devi˚_addr> <ªg_addr> <vÆue>. sam∂e: %†0x56 0x0 0x28\n", 
¨gv
[0],árgv[0]);

27 i‡(
	`SåToNumbî
(
¨gv
[1], &
devi˚_addr
))

32 i‡(
	`SåToNumbî
(
¨gv
[2], &
ªg_addr
))

37 i‡(
	`SåToNumbî
(
¨gv
[3], &
ªg_vÆue
))

42 
fd
 = 
	`›í
("/dev/i2c", 0);

43 if(
fd
 < 0)

45 
	`¥ötf
("Open i2c deviceÉrror!\n");

49 
i2c_d©a
.
dev_addr
 = 
devi˚_addr
;

50 
i2c_d©a
.
ªg_addr
 =Ñeg_addr;

51 
i2c_d©a
.
addr_byã
 = 1;

52 
i2c_d©a
.
d©a
 = 
ªg_vÆue
;

53 
i2c_d©a
.
d©a_byã
 = 1;

55 
	`¥ötf
("wrôe: devi˚_addr:0x%2x;Ñeg_addr:0x%2x;Ñeg_vÆue:0x%2x.\n", 
devi˚_addr
, 
ªg_addr
, 
ªg_vÆue
);

57 
ªt
 = 
	`io˘l
(
fd
, 
I2C_CMD_WRITE
, &
i2c_d©a
);

58 if(
ªt
)

60 
	`¥ötf
("i2c write failed!\n");

61 
	`˛o£
(
fd
);

65 
	`˛o£
(
fd
);

68 
	}
}

	@HiSDK/extdrv/i2c/strfunc.c

20 
	~<°dio.h
>

21 
	~<˘y≥.h
>

22 
	~"°rfunc.h
"

24 
©oul
(*
°r
,* 
pulVÆue
);

25 
©oulx
(*
°r
,* 
pulVÆue
);

48 
	$SåToNumbî
(*
°r
 , * 
pulVÆue
)

51 i‡–*
°r
 == '0' && (*(str+1) == 'x' || *(str+1) == 'X') )

53 i‡(*(
°r
+2) == '\0')

59  
	`©oulx
(
°r
+2,
pulVÆue
);

64  
	`©oul
(
°r
,
pulVÆue
);

66 
	}
}

85 
	$©oul
(*
°r
,* 
pulVÆue
)

87 
ulResu…
=0;

89 *
°r
)

91 i‡(
	`isdigô
(()*
°r
))

96 i‡((
ulResu…
<429496729Ë|| ((ulResu…==429496729Ë&& (*
°r
<'6')))

98 
ulResu…
 = ulResu…*10 + (*
°r
)-48;

102 *
pulVÆue
 = 
ulResu…
;

108 *
pulVÆue
=
ulResu…
;

111 
°r
++;

113 *
pulVÆue
=
ulResu…
;

115 
	}
}

136 
	#ASC2NUM
(
ch
Ë(ch - '0')

	)

137 
	#HEXASC2NUM
(
ch
Ë(ch - 'A' + 10)

	)

139 
	$©oulx
(*
°r
,* 
pulVÆue
)

141 
ulResu…
=0;

142 
ch
;

144 *
°r
)

146 
ch
=
	`touµî
(*
°r
);

147 i‡(
	`isdigô
(
ch
) || ((ch >= 'A') && (ch <= 'F' )))

149 i‡(
ulResu…
 < 0x10000000)

151 
ulResu…
 = (ulResu… << 4Ë+ ((
ch
<='9')?(
	`ASC2NUM
(ch)):(
	`HEXASC2NUM
(ch)));

155 *
pulVÆue
=
ulResu…
;

161 *
pulVÆue
=
ulResu…
;

164 
°r
++;

167 *
pulVÆue
=
ulResu…
;

169 
	}
}

	@HiSDK/extdrv/i2c/strfunc.h

20 #i‚de‡
__STRFUNC_H__


21 
	#__STRFUNC_H__


	)

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


30 
	#STRFMT_ADDR32
 "%#010lX"

	)

31 
	#STRFMT_ADDR32_2
 "0x%08lX"

	)

33 
SåToNumbî
(*
°r
 , * 
ulVÆue
);

37 #ifde‡
__˝lu•lus


38 #i‡
__˝lu•lus


	@HiSDK/extdrv/tlv320aic31/tlv320aic31.c

25 
	~<löux/kî√l.h
>

26 
	~<löux/vîsi⁄.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/ty≥s.h
>

29 
	~<löux/î∫o.h
>

30 
	~<löux/f˙é.h
>

31 
	~<löux/mm.h
>

32 
	~<löux/¥oc_fs.h
>

33 
	~<löux/fs.h
>

34 
	~<löux/¶ab.h
>

36 
	~<löux/öô.h
>

37 
	~<asm/uac˚ss.h
>

38 
	~<mach/h¨dw¨e.h
>

39 
	~<asm/io.h
>

40 
	~<asm/sy°em.h
>

41 
	~<löux/miscdevi˚.h
>

42 
	~<löux/dñay.h
>

44 
	~<löux/¥oc_fs.h
>

45 
	~<löux/pﬁl.h
>

47 
	~<mach/h¨dw¨e.h
>

48 
	~<asm/bô›s.h
>

49 
	~<asm/uac˚ss.h
>

50 
	~<asm/úq.h
>

52 
	~<löux/moduÀ∑øm.h
>

53 
	~<löux/i›‹t.h
>

54 
	~<löux/öãºu±.h
>

56 #i‚de‡
HI_GPIO_I2C


57 
	#HI_GPIO_I2C


	)

60 #ifde‡
HI_GPIO_I2C


61 
	~"gpio_i2c.h
"

63 
	~"i2c.h
"

67 
	~"év320aic31.h
"

68 
	~"év320aic31_def.h
"

71 
	#CHIP_NUM
 1

	)

72 
	#DEV_NAME
 "év320aic31"

	)

73 
	#DEBUG_LEVEL
 1

	)

74 
	#DPRINTK
(
Àvñ
,
fmt
,
¨gs
...Ëdo{ if÷evñ < 
DEBUG_LEVEL
)\

	)

75 
¥ötk
(
KERN_INFO
 "%†[%†,%d]: " 
fmt
 "\n",
DEV_NAME
,
__FUNCTION__
,
__LINE__
,##
¨gs
);\

78 
IIC_devi˚_addr
[
CHIP_NUM
] = {0x30
	}
};

80 
	g›í_˙t
 = 0;

83 
	$év320aic31_wrôe
(
chù_addr
,
ªg_addr
,
vÆue
)

85 #ifde‡
HI_GPIO_I2C


86 
	`gpio_i2c_wrôe
(
chù_addr
,
ªg_addr
,
vÆue
);

88 
	`i2c_wrôe
(
chù_addr
,
ªg_addr
,
vÆue
);

90 
	}
}

91 
	$év320aic31_ªad
(
chù_addr
,
ªg_addr
)

93 #ifde‡
HI_GPIO_I2C


94  
	`gpio_i2c_ªad
(
chù_addr
,
ªg_addr
);

96  
	`i2c_ªad
(
chù_addr
,
ªg_addr
);

98 
	}
}

99 
	$év320aic31_ªg_dump
(
ªg_num
)

101 
i
 = 0;

102 
i
 = 0;ò< 
ªg_num
;i++)

104 
	`¥ötk
("ªg%d =%x,",
i
,
	`év320aic31_ªad
(
IIC_devi˚_addr
[0],i));

105 if((
i
+1)%8==0)

107 
	`¥ötk
("\n");

110 
	}
}

111 
	$so·_ª£t
(
chù_num
)

114 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],0x1,0x80);

115 
	`m¶ìp
(10);

118 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 102, 0x32);

122 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x10);

125 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 3, 0x82);

126 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 4, 0x1c);

127 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 5, 0x2c);

128 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 6, 0x8);

129 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 11, 0x1);

132 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 7, 0xa);

135 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 2, 0xaa);

138 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 8, 0xf0);

141 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 9, 0x7);

144 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 12, 0x50);

147 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 25, 0x40);

148 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 17, 0xf);

149 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 18, 0xf0);

151 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 15, 0x0);

152 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 16, 0x0);

156 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 19, 0x04);

157 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 22, 0x04);

158 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 28, 0x0);

159 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 31, 0x0);

162 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 14, 0x80);

165 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 37, 0xc0);

168 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 40, 0x80);

171 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 41, 0x1);

174 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 42, 0xa8);

177 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 43, 0x0);

180 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 44, 0x0);

182 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 47, 0x80);

185 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 51, 0x9f);

187 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 64, 0x80);

189 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 65, 0x9f);

192 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
], 38, 0x3e);

194 
	}
}

199 
	$év320aic31_›í
(
öode
 * inode, 
fûe
 * file)

201 if(0 =
›í_˙t
++)

204 
	}
}

209 
	$év320aic31_˛o£
(
öode
 *öodê,
fûe
 *file)

211 
›í_˙t
--;

213 
	}
}

216 
	$év320aic31_io˘l
(
fûe
 *fûe, 
cmd
, 
¨g
)

218 
__u£r
 *
¨gp
 = (__u£∏*)
¨g
;

219 
chù_num
;

220 
Audio_Cål
 
ãmp
;

221 
Audio_Cål
 *
audio_˘æ
;

222 
Codec_D©≠©h_Sëup_Cål
 
codec_d©≠©h_£tup_˘æ
;

223 
DAC_OUTPUT_SWIT_CTRL
 
dac_ouçut_swô_˘æ
;

224 
DAC_POWER_CTRL
 
dac_powî_˘æ
;

225 
In1_Adc_Cål
 
ö1_adc_˘æ
 ;

226 
In2_Adc_Cål_Sam∂e
 
ö2_adc_˘æ_ßm∂e
 ;

227 
Adc_Pga_Dac_Gaö_Cål
 
adc_pga_dac_gaö_˘æ
;

228 
Löe_Hpcom_Out_Cål
 
löe_hpcom_out_˘æ
;

229 
Sîül_I¡_Cål
 
£rül_öt_˘æ
;

230 
Sîül_D©a_Off£t_Cål
 
£rül_d©a_off£t_˘æ
;

231 
Cål_Mode
 
˘æ_mode
;

233 if(
¨gp
 !
NULL
)

235 if(
	`c›y_‰om_u£r
(&
ãmp
,
¨gp
,(
Audio_Cål
)))

237  -
EFAULT
;

240 
audio_˘æ
 = (
Audio_Cål
 *)(&
ãmp
);

241 
chù_num
 = 
audio_˘æ
->chip_num;

242 
cmd
)

244 
IN2LR_2_LEFT_ADC_CTRL
:

245 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],17);

246 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2l_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
öput_Àvñ
;

247 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],17,
ö2_adc_˘æ_ßm∂e
.
b8
);

249 
IN2LR_2_RIGTH_ADC_CTRL
:

250 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],18);

251 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2r_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
öput_Àvñ
;

252 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],18,
ö2_adc_˘æ_ßm∂e
.
b8
);

255 
IN1L_2_LEFT_ADC_CTRL
:

256 
ö1_adc_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],19);

257 
ö1_adc_˘æ
.
bô
.
ö1_adc_öput_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

258 
ö1_adc_˘æ
.
bô
.
adc_ch_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

259 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],19,
ö1_adc_˘æ
.
b8
);

261 
IN1R_2_RIGHT_ADC_CTRL
:

262 
ö1_adc_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],22);

263 
ö1_adc_˘æ
.
bô
.
ö1_adc_öput_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

264 
ö1_adc_˘æ
.
bô
.
adc_ch_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

265 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],22,
ö1_adc_˘æ
.
b8
);

267 
PGAL_2_HPLOUT_VOL_CTRL
:

268 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],46);

269 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

270 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

271 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],46,
adc_pga_dac_gaö_˘æ
.
b8
);

273 
DACL1_2_HPLOUT_VOL_CTRL
:

274 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],47);

275 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

276 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

277 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],47,
adc_pga_dac_gaö_˘æ
.
b8
);

279 
HPLOUT_OUTPUT_LEVEL_CTRL
:

280 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],51);

281 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

282 
löe_hpcom_out_˘æ
.
bô
. 
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

283 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],51,
löe_hpcom_out_˘æ
.
b8
);

285 
PGAL_2_HPLCOM_VOL_CTRL
:

286 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],53);

287 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

288 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

289 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],53,
adc_pga_dac_gaö_˘æ
.
b8
);

291 
DACL1_2_HPLCOM_VOL_CTRL
:

292 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],54);

293 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

294 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

295 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],54,
adc_pga_dac_gaö_˘æ
.
b8
);

297 
HPLCOM_OUTPUT_LEVEL_CTRL
:

298 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],58);

299 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

300 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

301 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],58,
löe_hpcom_out_˘æ
.
b8
);

303 
PGAR_2_HPROUT_VOL_CTRL
:

304 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],63);

305 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

306 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

307 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],63,
adc_pga_dac_gaö_˘æ
.
b8
);

309 
DACR1_2_HPROUT_VOL_CTRL
:

310 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],64);

311 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

312 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

313 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],64,
adc_pga_dac_gaö_˘æ
.
b8
);

315 
HPROUT_OUTPUT_LEVEL_CTRL
:

316 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],65);

317 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

318 
löe_hpcom_out_˘æ
.
bô
. 
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

319 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],65,
löe_hpcom_out_˘æ
.
b8
);

321 
PGAR_2_HPRCOM_VOL_CTRL
:

322 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],70);

323 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

324 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

325 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],70,
adc_pga_dac_gaö_˘æ
.
b8
);

327 
DACR1_2_HPRCOM_VOL_CTRL
:

328 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],71);

329 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

330 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

331 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],71,
adc_pga_dac_gaö_˘æ
.
b8
);

333 
HPRCOM_OUTPUT_LEVEL_CTRL
:

334 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],72);

335 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

336 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

337 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],72,
löe_hpcom_out_˘æ
.
b8
);

339 
PGAL_2_LEFT_LOP_VOL_CTRL
:

340 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],81);

341 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

342 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

343 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],81,
adc_pga_dac_gaö_˘æ
.
b8
);

345 
DACL1_2_LEFT_LOP_VOL_CTRL
:

346 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],82);

347 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

348 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

349 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],82,
adc_pga_dac_gaö_˘æ
.
b8
);

351 
LEFT_LOP_OUTPUT_LEVEL_CTRL
:

352 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],86);

353 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

354 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

355 
löe_hpcom_out_˘æ
.
bô
.
powî_°©us
 = 
audio_˘æ
->
if_powîup
;

356 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],86,
löe_hpcom_out_˘æ
.
b8
);

358 
PGAR_2_RIGHT_LOP_VOL_CTRL
:

359 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],91);

360 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

361 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

362 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],91,
adc_pga_dac_gaö_˘æ
.
b8
);

364 
DACR1_2_RIGHT_LOP_VOL_CTRL
:

365 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],92);

366 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

367 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

368 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],92,
adc_pga_dac_gaö_˘æ
.
b8
);

370 
RIGHT_LOP_OUTPUT_LEVEL_CTRL
:

371 
löe_hpcom_out_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],93);

372 
löe_hpcom_out_˘æ
.
bô
.
if_muã
 = 
audio_˘æ
->
if_muã_rouã
;

373 
löe_hpcom_out_˘æ
.
bô
.
ouçut_Àvñ
 = 
audio_˘æ
->
öput_Àvñ
;

374 
löe_hpcom_out_˘æ
.
bô
.
powî_°©us
 = 
audio_˘æ
->
if_powîup
;

375 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],93,
löe_hpcom_out_˘æ
.
b8
);

377 
SET_ADC_SAMPLE
:

378 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],2);

379 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2l_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
ßm∂e
;

380 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],2,
ö2_adc_˘æ_ßm∂e
.
b8
);

382 
SET_DAC_SAMPLE
:

383 
ö2_adc_˘æ_ßm∂e
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],2);

384 
ö2_adc_˘æ_ßm∂e
.
bô
.
ö2r_adc_öput_Àvñ_ßm∂e
 = 
audio_˘æ
->
ßm∂e
;

385 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],2,
ö2_adc_˘æ_ßm∂e
.
b8
);

388 
SET_DATA_LENGTH
:

389 
£rül_öt_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],9);;

390 
£rül_öt_˘æ
.
bô
.
d©a_Àngth
 = 
audio_˘æ
->data_length;

393 
SET_TRANSFER_MODE
:

394 
£rül_öt_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],9);

395 
£rül_öt_˘æ
.
bô
.
å™s„r_mode
 = 
audio_˘æ
->
å™s_mode
;

396 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],9,
£rül_öt_˘æ
.
b8
);

398 
SET_CTRL_MODE
:

401 
˘æ_mode
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],8);

402 
˘æ_mode
.
bô
.
bô_˛ock_dic_˘æ
 = 
audio_˘æ
->ctrl_mode;

403 
˘æ_mode
.
bô
.
w‹k_˛ock_dic_˘æ
 = 
audio_˘æ
->ctrl_mode;

404 
˘æ_mode
.
bô
.
bô_w‹k_dri_˘æ
 = 
audio_˘æ
->ctrl_mode;

405 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],8,
˘æ_mode
.
b8
);

408 i‡(1 =
audio_˘æ
->
˘æ_mode


409 || (
AC31_SET_48K_SAMPLERATE
 !
audio_˘æ
->
ßm∂e
 && 
AC31_SET_44_1K_SAMPLERATE
 !=áudio_ctrl->sample))

412 i‡((1 =
audio_˘æ
->
if_44100hz_£rõs
))

415 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],3,0x81);

416 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],4,0x1c);

417 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],5,0x36);

418 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],6,0xb0);

419 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

420 
codec_d©≠©h_£tup_˘æ
.
b8
 |= 0x80;

421 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

422 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],11,0x1);

423 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],101,0x0);

424 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],102,0xc2);

429 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],3,0x81);

430 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],4,0x20);

431 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],5,0x0);

432 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],6,0x0);

433 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

434 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

435 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

436 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],11,0x1);

437 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],101,0x0);

438 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],102,0xc2);

444 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],102,0x22);

445 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

446 i‡((1 =
audio_˘æ
->
if_44100hz_£rõs
))

448 
codec_d©≠©h_£tup_˘æ
.
b8
 |= 0x80;

452 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

454 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

456 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],3,0x81);

457 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],4,32<<2);

458 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],5,0x0);

459 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],6,0x0);

460 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],101,0x0);

461 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],11,0x2);

466 
audio_˘æ
->
ßm∂eR©e
)

473 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],3,0x81);

474 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],4,0x30);

475 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],5,0x0);

476 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],6,0x0);

477 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

478 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

479 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

480 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],11,0x1);

481 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],101,0x0);

482 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],102,0xc2);

490 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],3,0x81);

491 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],4,0x20);

492 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],5,0x0);

493 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],6,0x0);

494 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

495 
codec_d©≠©h_£tup_˘æ
.
b8
 &= 0x7f;

496 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

497 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],11,0x1);

498 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],101,0x0);

499 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],102,0xc2);

507 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],3,0x81);

508 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],4,0x20);

509 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],5,0x00);

510 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],6,0x00);

511 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

512 
codec_d©≠©h_£tup_˘æ
.
b8
 |= 0x80;

513 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

514 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],11,0x1);

515 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],101,0x0);

516 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],102,0xc2);

521 
	`¥ötk
("aic31 unsuµ‹àßm∂eR©ê%d\n", 
audio_˘æ
->
ßm∂eR©e
);

527 
LEFT_DAC_VOL_CTRL
:

528 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],43);

529 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

530 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

531 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],43,
adc_pga_dac_gaö_˘æ
.
b8
);

533 
RIGHT_DAC_VOL_CTRL
:

534 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],44);

535 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

536 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

537 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],44,
adc_pga_dac_gaö_˘æ
.
b8
);

539 
LEFT_DAC_POWER_SETUP
:

540 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

541 
codec_d©≠©h_£tup_˘æ
.
bô
.
À·_dac_d©≠©h_˘æ
 = 
audio_˘æ
->
if_powîup
;

542 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

543 
dac_powî_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],37);

544 
dac_powî_˘æ
.
bô
.
À·_dac_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

545 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],37,
dac_powî_˘æ
.
b8
);

547 
RIGHT_DAC_POWER_SETUP
:

548 
codec_d©≠©h_£tup_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],7);

549 
codec_d©≠©h_£tup_˘æ
.
bô
.
right_dac_d©≠©h_˘æ
 = 
audio_˘æ
->
if_powîup
;

550 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],7,
codec_d©≠©h_£tup_˘æ
.
b8
);

551 
dac_powî_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],37);

552 
dac_powî_˘æ
.
bô
.
right_dac_powî_˘æ
 = 
audio_˘æ
->
if_powîup
;

553 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],37,
dac_powî_˘æ
.
b8
);

555 
DAC_OUT_SWITCH_CTRL
:

556 
dac_ouçut_swô_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],41);

557 
dac_ouçut_swô_˘æ
.
bô
.
À·_dac_swi_˘æ
 = 
audio_˘æ
->
dac_∑th
;

558 
dac_ouçut_swô_˘æ
.
bô
.
right_dac_swi_˘æ
 = 
audio_˘æ
->
dac_∑th
;

559 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],41,
dac_ouçut_swô_˘æ
.
b8
);

561 
LEFT_ADC_PGA_CTRL
:

562 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],15);

563 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

564 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

565 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],15,
adc_pga_dac_gaö_˘æ
.
b8
);

567 
RIGHT_ADC_PGA_CTRL
:

568 
adc_pga_dac_gaö_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],16);

569 
adc_pga_dac_gaö_˘æ
.
bô
.
if_muã_rouã
 = 
audio_˘æ
->if_mute_route;

570 
adc_pga_dac_gaö_˘æ
.
bô
.
öput_vﬁ_Àvñ_˘æ
 = 
audio_˘æ
->
öput_Àvñ
;

571 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],16,
adc_pga_dac_gaö_˘æ
.
b8
);

573 
SET_SERIAL_DATA_OFFSET
:

574 
£rül_d©a_off£t_˘æ
.
b8
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
chù_num
],10);

575 
£rül_d©a_off£t_˘æ
.
bô
.
£rül_d©a_off£t
 = 
audio_˘æ
->
d©a_off£t
;

576 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
chù_num
],10,
£rül_d©a_off£t_˘æ
.
b8
);

578 
SOFT_RESET
:

580 
	`so·_ª£t
(
chù_num
);

582 
TLV320AIC31_REG_DUMP
:

583 
	`év320aic31_ªg_dump
(102);

589 
	}
}

595 
fûe_›î©i⁄s
 
	gév320aic31_f›s
 = {

596 .
ow√r
 = 
THIS_MODULE
,

597 .
	gu∆ocked_io˘l
 = 
év320aic31_io˘l
,

598 .
	g›í
 = 
év320aic31_›í
,

599 .
	gªÀa£
 = 
év320aic31_˛o£


602 
miscdevi˚
 
	gév320aic31_dev
 = {

603 
MISC_DYNAMIC_MINOR
,

604 
DEV_NAME
,

605 &
év320aic31_f›s
,

608 
	$év320aic31_devi˚_öô
(
num
)

612 
ãmp
 = 0;

613 
ãmp
 = 
	`év320aic31_ªad
(
IIC_devi˚_addr
[
num
],0x2);

614 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[0],0x2,0xaa);

615 if–
	`év320aic31_ªad
(
IIC_devi˚_addr
[
num
],0x2) != 0xaa)

617 
	`DPRINTK
(0,"öôáic31(%dËîr‹",
num
);

620 
	`év320aic31_wrôe
(
IIC_devi˚_addr
[
num
],0x2,
ãmp
);

622 
	`so·_ª£t
(
num
);

624 
ãmp
 = 0;temp < 30;temp ++)

626 
	`¥ötk
("0x%x, 0x%x\n",
ãmp
,
	`év320aic31_ªad
(
IIC_devi˚_addr
[
num
],temp));

630 
	}
}

632 
	$£t_chù_cou¡
(c⁄° *
vÆ
, c⁄° 
kî√l_∑øm
 *
kp
)

634 
ªt
;

635 
chù_cou¡
;

637 
ªt
 = 
	`k°πoöt
(
vÆ
, 10, &
chù_cou¡
);

638 i‡(
ªt
 < 0)

639  -
EINVAL
;

641 i‡(
chù_cou¡
 < 0 || chù_cou¡ > 
CHIP_NUM
)

643 
	`¥ötk
("chù_cou¡%dÉº. \n", 
chù_cou¡
);

644  -
EINVAL
;

647 
	}
}

649 
kî√l_∑øm_›s
 
	gÆv320_∑ø_›s
 = {

650 .
£t
 = 
£t_chù_cou¡
,

653 
	gchù_cou¡
 = 1;

655 
moduÀ_∑øm
(
chù_cou¡
,,0);

657 
moduÀ_∑øm_cb
(
chù_cou¡
, &
Æv320_∑ø_›s
, &chip_count, 0644);

660 
MODULE_PARM_DESC
(
chù_cou¡
,"theÇum we device usesÅheÅlv320aic31,default 1");

662 
__öô
 
	$év320aic31_öô
()

664 
i
,
ªt
;

666 
ªt
 = 
	`misc_ªgi°î
(&
év320aic31_dev
);

667 if(
ªt
)

669 
	`DPRINTK
(0,"couldÇotÑegisterÅlv320aic31 device");

672 
i
 = 0;i< 
chù_cou¡
;i++)

674 if(
	`év320aic31_devi˚_öô
(
i
) < 0)

676 
öô_Áû
;

679 
	`DPRINTK
(1,"tlv320aic31 driver init successful!");

680  
ªt
;

681 
öô_Áû
:

682 
	`misc_dîegi°î
(&
év320aic31_dev
);

683 
	`DPRINTK
(0,"tlv320aic31 device init fail,deregister it!");

685 
	}
}

687 
__exô
 
	$év320aic31_exô
()

689 
	`misc_dîegi°î
(&
év320aic31_dev
);

691 
	`DPRINTK
(1,"deregisterÅlv320aic31");

692 
	}
}

694 
moduÀ_öô
(
év320aic31_öô
);

695 
moduÀ_exô
(
év320aic31_exô
);

696 
MODULE_LICENSE
("GPL");

697 
MODULE_AUTHOR
("Hisilicon");

	@HiSDK/extdrv/tlv320aic31/tlv320aic31.h

8 #i‚de‡
_INC_TLV320AIC31


9 
	#_INC_TLV320AIC31


	)

11 
	#IN2LR_2_LEFT_ADC_CTRL
 0x0

	)

12 
	#IN2LR_2_RIGTH_ADC_CTRL
 0x1

	)

13 
	#IN1L_2_LEFT_ADC_CTRL
 0x2

	)

14 
	#IN1R_2_RIGHT_ADC_CTRL
 0x3

	)

15 
	#PGAL_2_HPLOUT_VOL_CTRL
 0x4

	)

16 
	#PGAR_2_HPLOUT_VOL_CTRL
 0x5

	)

17 
	#DACL1_2_HPLOUT_VOL_CTRL
 0x6

	)

18 
	#DACR1_2_HPLOUT_VOL_CTRL
 0x7

	)

19 
	#HPLOUT_OUTPUT_LEVEL_CTRL
 0x8

	)

20 
	#PGAL_2_HPLCOM_VOL_CTRL
 0x9

	)

21 
	#PGAR_2_HPLCOM_VOL_CTRL
 0xa

	)

22 
	#DACL1_2_HPLCOM_VOL_CTRL
 0xb

	)

23 
	#DACR1_2_HPLCOM_VOL_CTRL
 0xc

	)

24 
	#HPLCOM_OUTPUT_LEVEL_CTRL
 0xd

	)

25 
	#PGAR_2_HPROUT_VOL_CTRL
 0xf

	)

26 
	#DACR1_2_HPROUT_VOL_CTRL
 0x10

	)

27 
	#HPROUT_OUTPUT_LEVEL_CTRL
 0x11

	)

28 
	#PGAR_2_HPRCOM_VOL_CTRL
 0x12

	)

29 
	#DACR1_2_HPRCOM_VOL_CTRL
 0X13

	)

30 
	#HPRCOM_OUTPUT_LEVEL_CTRL
 0x14

	)

31 
	#PGAL_2_LEFT_LOP_VOL_CTRL
 0x15

	)

32 
	#DACL1_2_LEFT_LOP_VOL_CTRL
 0x16

	)

33 
	#LEFT_LOP_OUTPUT_LEVEL_CTRL
 0x17

	)

34 
	#PGAR_2_RIGHT_LOP_VOL_CTRL
 0x18

	)

35 
	#DACR1_2_RIGHT_LOP_VOL_CTRL
 0x19

	)

36 
	#RIGHT_LOP_OUTPUT_LEVEL_CTRL
 0x20

	)

37 
	#SET_ADC_SAMPLE
 0x21

	)

38 
	#SET_DAC_SAMPLE
 0x22

	)

39 
	#SET_DATA_LENGTH
 0x23

	)

40 
	#SET_CTRL_MODE
 0x24

	)

41 
	#LEFT_DAC_VOL_CTRL
 0x25

	)

42 
	#RIGHT_DAC_VOL_CTRL
 0x26

	)

43 
	#LEFT_DAC_POWER_SETUP
 0x27

	)

44 
	#RIGHT_DAC_POWER_SETUP
 0x28

	)

45 
	#DAC_OUT_SWITCH_CTRL
 0x29

	)

46 
	#LEFT_ADC_PGA_CTRL
 0x30

	)

47 
	#RIGHT_ADC_PGA_CTRL
 0x31

	)

48 
	#TLV320AIC31_REG_DUMP
 0x32

	)

49 
	#SOFT_RESET
 0x33

	)

50 
	#SET_TRANSFER_MODE
 0x34

	)

51 
	#SET_SERIAL_DATA_OFFSET
 0X35

	)

66 
	#AC31_SET_8K_SAMPLERATE
 0xa

	)

67 
	#AC31_SET_12K_SAMPLERATE
 0x6

	)

68 
	#AC31_SET_16K_SAMPLERATE
 0x4

	)

69 
	#AC31_SET_24K_SAMPLERATE
 0x2

	)

70 
	#AC31_SET_32K_SAMPLERATE
 0x1

	)

71 
	#AC31_SET_48K_SAMPLERATE
 0x0

	)

73 
	#AC31_SET_11_025K_SAMPLERATE
 0x6

	)

74 
	#AC31_SET_22_05K_SAMPLERATE
 0x2

	)

75 
	#AC31_SET_44_1K_SAMPLERATE
 0x0

	)

77 
	#AC31_SET_SLAVE_MODE
 0

	)

78 
	#AC31_SET_MASTER_MODE
 1

	)

80 
	#AC31_SET_16BIT_WIDTH
 0

	)

81 
	#AC31_SET_20BIT_WIDTH
 1

	)

82 
	#AC31_SET_24BIT_WIDTH
 2

	)

83 
	#AC31_SET_32BIT_WIDTH
 3

	)

88 
	eAudio_In_


90 
	mIN1L
 =0,

91 
	mIN1R
 =1,

92 
	mIN2L
 =2,

93 
	mIN2R
 =3,

94 }
	tAudio_In
;

95 
	eAudio_Out_


97 
	mLINE_OUT_R
=0,

98 
	mLINE_OUT_L
,

99 
	mHPL
,

100 
	mHPR
,

101 }
	tAudio_Out
;

104 
	mchù_num
:3;

105 
	maudio_ö_out
:2;

106 
	mif_muã_rouã
:1;

107 
	mif_powîup
:1;

108 
	möput_Àvñ
:7;

109 
	mßm∂e
:4;

110 
	mif_44100hz_£rõs
:1;

111 
	md©a_Àngth
:2;

112 
	m˘æ_mode
:1;

113 
	mdac_∑th
:2;

114 
	må™s_mode
:2;

115 
	mª£rved
 :6;

116 
	md©a_off£t
:8;

117 
	mßm∂eR©e
;

118 }
	tAudio_Cål
;

	@HiSDK/extdrv/tlv320aic31/tlv320aic31_def.h

1 #i‚de‡
_INC_TLV320AIC31_DEF


2 
	#_INC_TLV320AIC31_DEF


	)

8 
	mª£rved2
 :4;

9 
	mbô_w‹k_dri_˘æ
:1;

10 
	mª£rved1
:1;

11 
	mw‹k_˛ock_dic_˘æ
:1;

12 
	mbô_˛ock_dic_˘æ
:1;

13 }
	mbô
;

14 
	mb8
;

15 }
	tCål_Mode
;

20 
	möput_vﬁ_Àvñ_˘æ
:7;

21 
	mif_muã_rouã
:1;

22 }
	mbô
;

23 
	mb8
;

24 }
	tAdc_Pga_Dac_Gaö_Cål
;

29 
	mö2r_adc_öput_Àvñ_ßm∂e
:4;

30 
	mö2l_adc_öput_Àvñ_ßm∂e
:4;

31 }
	mbô
;

32 
	mb8
;

33 }
	tIn2_Adc_Cål_Sam∂e
;

38 
	madc_pga_°ï_˘æ
:2;

39 
	madc_ch_powî_˘æ
:1;

40 
	mö1_adc_öput_Àvñ
:4;

41 
	mmode
:1;

42 }
	mbô
;

43 
	mb8
;

44 }
	tIn1_Adc_Cål
;

49 
	mª£rved
:4;

50 
	md©a_Àngth
:2;

51 
	må™s„r_mode
:2;

52 }
	mbô
;

53 
	mb8
;

54 }
	tSîül_I¡_Cål
;

59 
	mpowî_°©us
:1;

60 
	mvﬁ_˘æ_°©us
:1;

61 
	mpowî_down_˘æ
:1;

62 
	mif_muã
:1;

63 
	mouçut_Àvñ
:4;

64 }
	mbô
;

65 
	mb8
;

66 }
	tLöe_Hpcom_Out_Cål
;

70 
	mª£rved1
:1;

71 
	mright_dac_d©≠©h_˘æ
:2;

72 
	mÀ·_dac_d©≠©h_˘æ
:2;

73 
	mª£rved2
:3;

74 }
	mbô
;

75 
	mb8
;

76 }
	tCodec_D©≠©h_Sëup_Cål
;

80 
	mª£rved
:6;

81 
	mright_dac_powî_˘æ
:1;

82 
	mÀ·_dac_powî_˘æ
:1;

83 }
	mbô
;

84 
	mb8
;

85 }
	tDAC_POWER_CTRL
;

89 
	mª£rved
:4;

90 
	mright_dac_swi_˘æ
:2;

91 
	mÀ·_dac_swi_˘æ
:2;

92 }
	mbô
;

93 
	mb8
;

94 }
	tDAC_OUTPUT_SWIT_CTRL
;

99 
	m£rül_d©a_off£t
:8;

100 }
	mbô
;

101 
	mb8
;

102 }
	tSîül_D©a_Off£t_Cål
;

	@HiSDK/extdrv/tlv320aic31/tlv_320aic31.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@HiSDK/include/acodec.h

1 #i‚de‡
_ACODEC_H_


2 
	#_ACODEC_H_


	)

4 
	#IOC_TYPE_ACODEC
 'A'

	)

6 
	ehiACODEC_FS_E
 {

7 
	mACODEC_FS_48000
 = 0x1a,

8 
	mACODEC_FS_24000
 = 0x19,

9 
	mACODEC_FS_12000
 = 0x18,

11 
	mACODEC_FS_44100
 = 0x1a,

12 
	mACODEC_FS_22050
 = 0x19,

13 
	mACODEC_FS_11025
 = 0x18,

15 
	mACODEC_FS_32000
 = 0x1a,

16 
	mACODEC_FS_16000
 = 0x19,

17 
	mACODEC_FS_8000
 = 0x18,

19 
	mACODEC_FS_BUTT
 = 0x1b,

20 } 
	tACODEC_FS_E
;

22 
	ehiACODEC_MIXER_E
 {

24 
	mACODEC_MIXER_LINEIN
 = 0x0,

25 
	mACODEC_MIXER_MICIN
 = 0x1,

27 
	mACODEC_MIXER_BUTT
,

28 } 
	tACODEC_MIXER_E
;

32 
	mvﬁ_˘æ
;

34 
	mvﬁ_˘æ_muã
;

35 } 
	tACODEC_VOL_CTRL
;

37 
	ehiACODEC_IOCTL_E
 {

38 
	mIOC_NR_SOFT_RESET_CTRL
 = 0x0,

39 
	mIOC_NR_SET_I2S1_FS
,

40 
	mIOC_NR_SET_MIXER_MIC
,

41 
	mIOC_NR_SEL_DAC_CLK
,

42 
	mIOC_NR_SEL_ANA_MCLK
,

43 
	mIOC_NR_SET_GAIN_MICL
,

44 
	mIOC_NR_SET_GAIN_MICR
,

45 
	mIOC_NR_SET_DACL_VOL
,

46 
	mIOC_NR_SET_DACR_VOL
,

47 
	mIOC_NR_SET_ADCL_VOL
,

48 
	mIOC_NR_SET_ADCR_VOL
,

49 
	mIOC_NR_SET_MICL_MUTE
,

50 
	mIOC_NR_SET_MICR_MUTE
,

51 
	mIOC_NR_SET_DACL_MUTE
,

52 
	mIOC_NR_SET_DACR_MUTE
,

53 
	mIOC_NR_DAC_SOFT_MUTE
,

54 
	mIOC_NR_DAC_SOFT_UNMUTE
,

56 
	mIOC_NR_GET_GAIN_MICL
,

57 
	mIOC_NR_GET_GAIN_MICR
,

58 
	mIOC_NR_GET_DACL_VOL
,

59 
	mIOC_NR_GET_DACR_VOL
,

60 
	mIOC_NR_GET_ADCL_VOL
,

61 
	mIOC_NR_GET_ADCR_VOL
,

63 
	mIOC_NR_SET_PD_DACL
,

64 
	mIOC_NR_SET_PD_DACR
,

65 
	mIOC_NR_SET_PD_ADCL
,

66 
	mIOC_NR_SET_PD_ADCR
,

68 
	mIOC_NR_DACL_SEL_TRACK
,

69 
	mIOC_NR_DACR_SEL_TRACK
,

70 
	mIOC_NR_ADCL_SEL_TRACK
,

71 
	mIOC_NR_ADCR_SEL_TRACK
,

72 
	mIOC_NR_SET_DAC_DE_EMPHASIS
,

73 
	mIOC_NR_SET_ADC_HP_FILTER
,

74 
	mIOC_NR_DAC_POP_FREE
,

75 
	mIOC_NR_DAC_SOFT_MUTE_RATE
,

77 
	mIOC_NR_DAC_SEL_I2S
,

78 
	mIOC_NR_ADC_SEL_I2S
,

79 
	mIOC_NR_SET_I2S1_DATAWIDTH
,

80 
	mIOC_NR_SET_I2S2_DATAWIDTH
,

81 
	mIOC_NR_SET_I2S2_FS
,

82 
	mIOC_NR_SET_DACR2DACL_VOL
,

83 
	mIOC_NR_SET_DACL2DACR_VOL
,

84 
	mIOC_NR_SET_ADCR2DACL_VOL
,

85 
	mIOC_NR_SET_ADCL2DACR_VOL
,

86 
	mIOC_NR_SET_ADCR2DACR_VOL
,

87 
	mIOC_NR_SET_ADCL2DACL_VOL
,

88 } 
	tACODEC_IOCTL_E
;

91 
	#ACODEC_SOFT_RESET_CTRL
 \

	)

92 
	$_IO
(
IOC_TYPE_ACODEC
, 
IOC_NR_SOFT_RESET_CTRL
)

94 
	#ACODEC_SET_I2S1_FS
 \

	)

95 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S1_FS
, )

97 
	#ACODEC_SET_MIXER_MIC
 \

	)

98 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_MIXER_MIC
, )

100 
	#ACODEC_SET_GAIN_MICL
 \

	)

101 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_GAIN_MICL
, )

103 
	#ACODEC_SET_GAIN_MICR
 \

	)

104 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_GAIN_MICR
, )

106 
	#ACODEC_SET_DACL_VOL
 \

	)

107 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACL_VOL
, 
ACODEC_VOL_CTRL
)

109 
	#ACODEC_SET_DACR_VOL
 \

	)

110 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACR_VOL
, 
ACODEC_VOL_CTRL
)

112 
	#ACODEC_SET_ADCL_VOL
 \

	)

113 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCL_VOL
, 
ACODEC_VOL_CTRL
)

115 
	#ACODEC_SET_ADCR_VOL
 \

	)

116 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCR_VOL
, 
ACODEC_VOL_CTRL
)

118 
	#ACODEC_SET_MICL_MUTE
 \

	)

119 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_MICL_MUTE
, )

121 
	#ACODEC_SET_MICR_MUTE
 \

	)

122 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_MICR_MUTE
, )

124 
	#ACODEC_SET_DACL_MUTE
 \

	)

125 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACL_MUTE
, )

127 
	#ACODEC_SET_DACR_MUTE
 \

	)

128 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACR_MUTE
, )

130 
	#ACODEC_DAC_SOFT_MUTE
 \

	)

131 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SOFT_MUTE
, )

133 
	#ACODEC_DAC_SOFT_UNMUTE
 \

	)

134 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SOFT_UNMUTE
, )

136 
	#ACODEC_GET_GAIN_MICL
 \

	)

137 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_GAIN_MICL
, )

138 
	#ACODEC_GET_GAIN_MICR
 \

	)

139 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_GAIN_MICR
, )

140 
	#ACODEC_GET_DACL_VOL
 \

	)

141 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_DACL_VOL
, 
ACODEC_VOL_CTRL
)

142 
	#ACODEC_GET_DACR_VOL
 \

	)

143 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_DACR_VOL
, 
ACODEC_VOL_CTRL
)

144 
	#ACODEC_GET_ADCL_VOL
 \

	)

145 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_ADCL_VOL
, 
ACODEC_VOL_CTRL
)

146 
	#ACODEC_GET_ADCR_VOL
 \

	)

147 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_GET_ADCR_VOL
, 
ACODEC_VOL_CTRL
)

150 
	#ACODEC_SET_PD_DACL
 \

	)

151 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_DACL
, )

153 
	#ACODEC_SET_PD_DACR
 \

	)

154 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_DACR
, )

156 
	#ACODEC_SET_PD_ADCL
 \

	)

157 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_ADCL
, )

159 
	#ACODEC_SET_PD_ADCR
 \

	)

160 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_PD_ADCR
, )

164 
	#ACODEC_SEL_DAC_CLK
 \

	)

165 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SEL_DAC_CLK
, )

167 
	#ACODEC_SEL_ANA_MCLK
 \

	)

168 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SEL_ANA_MCLK
, )

169 
	#ACODEC_DACL_SEL_TRACK
 \

	)

170 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DACL_SEL_TRACK
, )

171 
	#ACODEC_DACR_SEL_TRACK
 \

	)

172 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DACR_SEL_TRACK
, )

173 
	#ACODEC_ADCL_SEL_TRACK
 \

	)

174 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_ADCL_SEL_TRACK
, )

175 
	#ACODEC_ADCR_SEL_TRACK
 \

	)

176 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_ADCR_SEL_TRACK
, )

177 
	#ACODEC_SET_DAC_DE_EMPHASIS
 \

	)

178 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DAC_DE_EMPHASIS
, )

179 
	#ACODEC_SET_ADC_HP_FILTER
 \

	)

180 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADC_HP_FILTER
, )

181 
	#ACODEC_DAC_POP_FREE
 \

	)

182 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_POP_FREE
, )

183 
	#ACODEC_DAC_SOFT_MUTE_RATE
 \

	)

184 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SOFT_MUTE_RATE
, )

187 
	#ACODEC_DAC_SEL_I2S
 \

	)

188 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_DAC_SEL_I2S
, )

189 
	#ACODEC_ADC_SEL_I2S
 \

	)

190 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_ADC_SEL_I2S
, )

191 
	#ACODEC_SET_I2S1_DATAWIDTH
 \

	)

192 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S1_DATAWIDTH
, )

193 
	#ACODEC_SET_I2S2_DATAWIDTH
 \

	)

194 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S2_DATAWIDTH
, )

195 
	#ACODEC_SET_I2S2_FS
 \

	)

196 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_I2S2_FS
, )

197 
	#ACODEC_SET_DACR2DACL_VOL
 \

	)

198 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACR2DACL_VOL
, 
ACODEC_VOL_CTRL
)

199 
	#ACODEC_SET_DACL2DACR_VOL
 \

	)

200 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_DACL2DACR_VOL
, 
ACODEC_VOL_CTRL
)

201 
	#ACODEC_SET_ADCL2DACL_VOL
 \

	)

202 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCL2DACL_VOL
, 
ACODEC_VOL_CTRL
)

203 
	#ACODEC_SET_ADCR2DACL_VOL
 \

	)

204 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCR2DACL_VOL
, 
ACODEC_VOL_CTRL
)

205 
	#ACODEC_SET_ADCL2DACR_VOL
 \

	)

206 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCL2DACR_VOL
, 
ACODEC_VOL_CTRL
)

207 
	#ACODEC_SET_ADCR2DACR_VOL
 \

	)

208 
	$_IOWR
(
IOC_TYPE_ACODEC
, 
IOC_NR_SET_ADCR2DACR_VOL
, 
ACODEC_VOL_CTRL
)

	@HiSDK/include/hi_comm_adec.h

23 #i‚de‡ 
__HI_COMM_ADEC_H__


24 
	#__HI_COMM_ADEC_H__


	)

27 
	~"hi_ty≥.h
"

28 
	~"hi_comm⁄.h
"

29 
	~"hi_comm_aio.h
"

31 #ifde‡
__˝lu•lus


32 #i‡
__˝lu•lus


37 
	shiADEC_ATTR_G711_S


39 
HI_U32
 
ªsv
;

40 }
	tADEC_ATTR_G711_S
;

42 
	shiADEC_ATTR_G726_S


44 
G726_BPS_E
 
íG726bps
;

45 }
	tADEC_ATTR_G726_S
;

47 
	shiADEC_ATTR_ADPCM_S


49 
ADPCM_TYPE_E
 
íADPCMTy≥
;

50 }
	tADEC_ATTR_ADPCM_S
;

52 
	shiADEC_ATTR_LPCM_S


54 
HI_U32
 
ªsv
;

55 }
	tADEC_ATTR_LPCM_S
;

57 
	ehiADEC_MODE_E


59 
ADEC_MODE_PACK
 = 0,

65 
ADEC_MODE_STREAM
 ,

69 
ADEC_MODE_BUTT


70 }
	tADEC_MODE_E
;

72 
	shiADEC_CH_ATTR_S


74 
PAYLOAD_TYPE_E
 
íTy≥
;

75 
HI_U32
 
u32BufSize
;

76 
ADEC_MODE_E
 
íMode
;

77 
HI_VOID
 *
pVÆue
;

78 }
	tADEC_CHN_ATTR_S
;

80 
	shiADEC_DECODER_S


82 
PAYLOAD_TYPE_E
 
íTy≥
;

83 
HI_CHAR
 
aszName
[16];

84 
HI_S32
 (*
p‚O≥nDecodî
)(
HI_VOID
 *
pDecodîAâr
, HI_VOID **
µDecodî
);

85 
HI_S32
 (*
p‚DecodeFrm
)(
HI_VOID
 *
pDecodî
, 
HI_U8
 **
pu8Inbuf
,HI_S32 *
ps32Le·Byã
,

86 
HI_U16
 *
pu16Outbuf
,
HI_U32
 *
pu32OutLí
,HI_U32 *
pu32Chns
);

87 
HI_S32
 (*
p‚GëFrmInfo
)(
HI_VOID
 *
pDecodî
, HI_VOID *
pInfo
);

88 
HI_S32
 (*
p‚Clo£Decodî
)(
HI_VOID
 *
pDecodî
);

89 } 
	tADEC_DECODER_S
;

91 
	ehiEN_ADEC_ERR_CODE_E


93 
ADEC_ERR_DECODER_ERR
 = 64,

94 
ADEC_ERR_BUF_LACK
,

95 
ADEC_ERR_VOICE_DEC_TYPE
,

96 
ADEC_ERR_VOICE_DEC_FRAMESIZE
,

97 
ADEC_ERR_VOICE_DEC_FRAMETYPE
,

98 
ADEC_ERR_VOICE_INVALID_DEVICE
,

99 
ADEC_ERR_VOICE_INVALID_INBUF
,

100 
ADEC_ERR_VOICE_INVALID_OUTBUF
,

101 
ADEC_ERR_VOICE_TRANS_DEVICE
,

102 
ADEC_ERR_VOICE_TRANS_TYPE
,

104 } 
	tEN_ADEC_ERR_CODE_E
;

108 
	#HI_ERR_ADEC_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

110 
	#HI_ERR_ADEC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

112 
	#HI_ERR_ADEC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

114 
	#HI_ERR_ADEC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

116 
	#HI_ERR_ADEC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

118 
	#HI_ERR_ADEC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

120 
	#HI_ERR_ADEC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

122 
	#HI_ERR_ADEC_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

124 
	#HI_ERR_ADEC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

126 
	#HI_ERR_ADEC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

128 
	#HI_ERR_ADEC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

130 
	#HI_ERR_ADEC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

132 
	#HI_ERR_ADEC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

134 
	#HI_ERR_ADEC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

136 
	#HI_ERR_ADEC_DECODER_ERR
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_DECODER_ERR
)

	)

138 
	#HI_ERR_ADEC_BUF_LACK
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_BUF_LACK
)

	)

142 
	#HI_ERR_ADEC_DEC_TYPE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_DEC_TYPE
)

	)

143 
	#HI_ERR_ADEC_DEC_FRAMESIZE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_DEC_FRAMESIZE
)

	)

144 
	#HI_ERR_ADEC_DEC_FRAMETYPE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_DEC_FRAMETYPE
)

	)

145 
	#HI_ERR_ADEC_INVALID_DEVICE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_INVALID_DEVICE
)

	)

146 
	#HI_ERR_ADEC_INVALID_INBUF
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_INVALID_INBUF
)

	)

147 
	#HI_ERR_ADEC_INVALID_OUTBUF
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_INVALID_OUTBUF
)

	)

148 
	#HI_ERR_ADEC_TRANS_DEVICE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_TRANS_DEVICE
)

	)

149 
	#HI_ERR_ADEC_TRANS_TYPE
 
	`HI_DEF_ERR
(
HI_ID_ADEC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_VOICE_TRANS_TYPE
)

	)

154 #ifde‡
__˝lu•lus


155 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_aenc.h

23 #i‚de‡ 
__HI_COMM_AENC_H__


24 
	#__HI_COMM_AENC_H__


	)

26 
	~"hi_ty≥.h
"

27 
	~"hi_comm⁄.h
"

28 
	~"hi_comm_aio.h
"

31 #ifde‡
__˝lu•lus


32 #i‡
__˝lu•lus


37 
	shiAENC_ATTR_G711_S


39 
HI_U32
 
ªsv
;

40 }
	tAENC_ATTR_G711_S
;

42 
	shiAENC_ATTR_G726_S


44 
G726_BPS_E
 
íG726bps
;

45 }
	tAENC_ATTR_G726_S
;

47 
	shiAENC_ATTR_ADPCM_S


49 
ADPCM_TYPE_E
 
íADPCMTy≥
;

50 }
	tAENC_ATTR_ADPCM_S
;

52 
	shiAENC_ATTR_LPCM_S


54 
HI_U32
 
ªsv
;

55 }
	tAENC_ATTR_LPCM_S
;

57 
	shiAENC_ENCODER_S


59 
PAYLOAD_TYPE_E
 
íTy≥
;

60 
HI_U32
 
u32MaxFrmLí
;

61 
HI_CHAR
 
aszName
[16];

62 
HI_S32
 (*
p‚O≥nEncodî
)(
HI_VOID
 *
pEncodîAâr
, HI_VOID **
µEncodî
);

63 
HI_S32
 (*
p‚EncodeFrm
)(
HI_VOID
 *
pEncodî
, c⁄° 
AUDIO_FRAME_S
 *
p°D©a
,

64 
HI_U8
 *
pu8Outbuf
,
HI_U32
 *
pu32OutLí
);

65 
HI_S32
 (*
p‚Clo£Encodî
)(
HI_VOID
 *
pEncodî
);

66 } 
	tAENC_ENCODER_S
;

68 
	shiAENC_CHN_ATTR_S


70 
PAYLOAD_TYPE_E
 
íTy≥
;

71 
HI_U32
 
u32BufSize
;

72 
HI_VOID
 *
pVÆue
;

73 }
	tAENC_CHN_ATTR_S
;

75 
	ehiEN_AENC_ERR_CODE_E


77 
ADEC_ERR_ENCODER_ERR
 = 64 ,

79 } 
	tEN_AENC_ERR_CODE_E
;

83 
	#HI_ERR_AENC_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

85 
	#HI_ERR_AENC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

87 
	#HI_ERR_AENC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

89 
	#HI_ERR_AENC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

91 
	#HI_ERR_AENC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

93 
	#HI_ERR_AENC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

95 
	#HI_ERR_AENC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

97 
	#HI_ERR_AENC_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

99 
	#HI_ERR_AENC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

101 
	#HI_ERR_AENC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

103 
	#HI_ERR_AENC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

105 
	#HI_ERR_AENC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

107 
	#HI_ERR_AENC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

109 
	#HI_ERR_AENC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

111 
	#HI_ERR_AENC_ENCODER_ERR
 
	`HI_DEF_ERR
(
HI_ID_AENC
, 
EN_ERR_LEVEL_ERROR
, 
ADEC_ERR_ENCODER_ERR
)

	)

114 #ifde‡
__˝lu•lus


115 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_ai.h

18 #i‚de‡
__HI_COMM_AI_H__


19 
	#__HI_COMM_AI_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


29 #ifde‡
__˝lu•lus


30 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_aio.h

18 #i‚de‡
__HI_COMM_AIO_H__


19 
	#__HI_COMM_AIO_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_î∫o.h
"

24 #ifde‡
__˝lu•lus


25 #i‡
__˝lu•lus


31 
	#MAX_AUDIO_FRAME_NUM
 50

	)

32 
	#MAX_AUDIO_POINT_BYTES
 4

	)

34 
	#MAX_VOICE_POINT_NUM
 480

	)

36 
	#MAX_AUDIO_POINT_NUM
 2048

	)

37 
	#MIN_AUDIO_POINT_NUM
 80

	)

40 
	#MAX_AUDIO_FRAME_LEN
 (
MAX_AUDIO_POINT_BYTES
*
MAX_AUDIO_POINT_NUM
)

	)

43 
	#MAX_AUDIO_STREAM_LEN
 
MAX_AUDIO_FRAME_LEN


	)

45 
	#MAX_AI_USRFRM_DEPTH
 30

	)

47 
	ehiAUDIO_SAMPLE_RATE_E


49 
AUDIO_SAMPLE_RATE_8000
 = 8000,

50 
AUDIO_SAMPLE_RATE_12000
 = 12000,

51 
AUDIO_SAMPLE_RATE_11025
 = 11025,

52 
AUDIO_SAMPLE_RATE_16000
 = 16000,

53 
AUDIO_SAMPLE_RATE_22050
 = 22050,

54 
AUDIO_SAMPLE_RATE_24000
 = 24000,

55 
AUDIO_SAMPLE_RATE_32000
 = 32000,

56 
AUDIO_SAMPLE_RATE_44100
 = 44100,

57 
AUDIO_SAMPLE_RATE_48000
 = 48000,

58 
AUDIO_SAMPLE_RATE_BUTT
,

59 } 
	tAUDIO_SAMPLE_RATE_E
;

61 
	ehiAUDIO_BIT_WIDTH_E


63 
AUDIO_BIT_WIDTH_8
 = 0,

64 
AUDIO_BIT_WIDTH_16
 = 1,

65 
AUDIO_BIT_WIDTH_32
 = 2,

66 
AUDIO_BIT_WIDTH_BUTT
,

67 } 
	tAUDIO_BIT_WIDTH_E
;

69 
	ehiAIO_MODE_E


71 
AIO_MODE_I2S_MASTER
 = 0,

72 
AIO_MODE_I2S_SLAVE
,

73 
AIO_MODE_PCM_SLAVE_STD
,

74 
AIO_MODE_PCM_SLAVE_NSTD
,

75 
AIO_MODE_PCM_MASTER_STD
,

76 
AIO_MODE_PCM_MASTER_NSTD
,

77 
AIO_MODE_BUTT


78 } 
	tAIO_MODE_E
;

80 
	ehiAIO_SOUND_MODE_E


82 
AUDIO_SOUND_MODE_MONO
 =0,

83 
AUDIO_SOUND_MODE_STEREO
 =1,

84 
AUDIO_SOUND_MODE_BUTT


85 } 
	tAUDIO_SOUND_MODE_E
;

104 
	ehiG726_BPS_E


106 
G726_16K
 = 0,

107 
G726_24K
,

108 
G726_32K
,

109 
G726_40K
,

110 
MEDIA_G726_16K
,

111 
MEDIA_G726_24K
,

112 
MEDIA_G726_32K
,

113 
MEDIA_G726_40K
,

114 
G726_BUTT
,

115 } 
	tG726_BPS_E
;

117 
	ehiADPCM_TYPE_E


121 
ADPCM_TYPE_DVI4
 = 0,

122 
ADPCM_TYPE_IMA
,

123 
ADPCM_TYPE_ORG_DVI4
,

124 
ADPCM_TYPE_BUTT
,

125 } 
	tADPCM_TYPE_E
;

127 
	#AI_EXPAND
 0x01

	)

129 
	shiAIO_ATTR_S


131 
AUDIO_SAMPLE_RATE_E
 
íSam∂î©e
;

132 
AUDIO_BIT_WIDTH_E
 
íBôwidth
;

133 
AIO_MODE_E
 
íW‹kmode
;

134 
AUDIO_SOUND_MODE_E
 
íSoundmode
;

135 
HI_U32
 
u32EXFœg
;

136 
HI_U32
 
u32FrmNum
;

137 
HI_U32
 
u32PtNumPîFrm
;

139 
HI_U32
 
u32ChnC¡
;

140 
HI_U32
 
u32ClkSñ
;

143 } 
	tAIO_ATTR_S
;

145 
	shiAI_CHN_PARAM_S


147 
HI_U32
 
u32U§FrmDïth
;

148 
HI_S32
 
s32Rev
;

149 } 
	tAI_CHN_PARAM_S
;

151 
	shiAUDIO_FRAME_S


153 
AUDIO_BIT_WIDTH_E
 
íBôwidth
;

154 
AUDIO_SOUND_MODE_E
 
íSoundmode
;

155 
HI_VOID
 *
pVúAddr
[2];

156 
HI_U32
 
u32PhyAddr
[2];

157 
HI_U64
 
u64TimeSèmp
;

158 
HI_U32
 
u32Seq
;

159 
HI_U32
 
u32Lí
;

160 
HI_U32
 
u32PoﬁId
[2];

161 } 
	tAUDIO_FRAME_S
;

163 
	shiAEC_FRAME_S


165 
AUDIO_FRAME_S
 
°RefFøme
;

166 
HI_BOOL
 
bVÆid
;

167 } 
	tAEC_FRAME_S
;

169 
	shiAUDIO_FRAME_COMBINE_S


171 
AUDIO_FRAME_S
 
°Frm
;

172 
AEC_FRAME_S
 
°RefFrm
;

173 } 
	tAUDIO_FRAME_COMBINE_S
;

175 
	shiAUDIO_FRAME_INFO_S


177 
AUDIO_FRAME_S
 *
p°Føme
;

178 
HI_U32
 
u32Id
;

179 } 
	tAUDIO_FRAME_INFO_S
;

181 
	shiAUDIO_STREAM_S


183 
HI_U8
 *
pSåóm
;

184 
HI_U32
 
u32PhyAddr
;

185 
HI_U32
 
u32Lí
;

186 
HI_U64
 
u64TimeSèmp
;

187 
HI_U32
 
u32Seq
;

188 } 
	tAUDIO_STREAM_S
;

191 
	ehiAUDIO_RESAMPLE_TYPE_E


193 
AUDIO_RESAMPLE_1X2
 = 0x1,

194 
AUDIO_RESAMPLE_2X1
 = 0x2,

195 
AUDIO_RESAMPLE_1X4
 = 0x3,

196 
AUDIO_RESAMPLE_4X1
 = 0x4,

197 
AUDIO_RESAMPLE_1X6
 = 0x5,

198 
AUDIO_RESAMPLE_6X1
 = 0x6,

199 
AUDIO_RESAMPLE_BUTT


200 } 
	tAUDIO_RESAMPLE_TYPE_E
;

202 
	shiAUDIO_RESAMPLE_ATTR_S


204 
HI_U32
 
u32InPoötNum
;

205 
AUDIO_SAMPLE_RATE_E
 
íInSam∂eR©e
;

206 
AUDIO_RESAMPLE_TYPE_E
 
íReSam∂eTy≥
;

207 } 
	tAUDIO_RESAMPLE_ATTR_S
;

209 
	shiAO_CHN_STATE_S


211 
HI_U32
 
u32ChnTŸÆNum
;

212 
HI_U32
 
u32ChnFªeNum
;

213 
HI_U32
 
u32ChnBusyNum
;

214 } 
	tAO_CHN_STATE_S
;

216 
	shiAIO_RESMP_INFO_S


218 
HI_BOOL
 
bReSmpE«bÀ
;

219 
AUDIO_RESAMPLE_ATTR_S
 
°ResmpAâr
;

220 } 
	tAIO_RESMP_INFO_S
;

222 
	shiAI_ANR_INFO_S


224 
HI_BOOL
 
bAƒE«bÀ
;

225 } 
	tAI_ANR_INFO_S
;

228 
	ehiAUDIO_TRACK_MODE_E


230 
AUDIO_TRACK_NORMAL
 = 0,

231 
AUDIO_TRACK_BOTH_LEFT
 = 1,

232 
AUDIO_TRACK_BOTH_RIGHT
 = 2,

233 
AUDIO_TRACK_EXCHANGE
 = 3,

234 
AUDIO_TRACK_MIX
 = 4,

235 
AUDIO_TRACK_LEFT_MUTE
 = 5,

236 
AUDIO_TRACK_RIGHT_MUTE
 = 6,

237 
AUDIO_TRACK_BOTH_MUTE
 = 7,

239 
AUDIO_TRACK_BUTT


240 } 
	tAUDIO_TRACK_MODE_E
;

242 
	ehiAUDIO_FADE_RATE_E


244 
AUDIO_FADE_RATE_1
 = 0,

245 
AUDIO_FADE_RATE_2
 = 1,

246 
AUDIO_FADE_RATE_4
 = 2,

247 
AUDIO_FADE_RATE_8
 = 3,

248 
AUDIO_FADE_RATE_16
 = 4,

249 
AUDIO_FADE_RATE_32
 = 5,

250 
AUDIO_FADE_RATE_64
 = 6,

251 
AUDIO_FADE_RATE_128
 = 7,

253 
AUDIO_FADE_RATE_BUTT


254 } 
	tAUDIO_FADE_RATE_E
;

256 
	shiAUDIO_FADE_S


258 
HI_BOOL
 
bFade
;

259 
AUDIO_FADE_RATE_E
 
íFadeInR©e
;

260 
AUDIO_FADE_RATE_E
 
íFadeOutR©e
;

261 } 
	tAUDIO_FADE_S
;

265 
	#HI_ERR_AI_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

267 
	#HI_ERR_AI_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

269 
	#HI_ERR_AI_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

271 
	#HI_ERR_AI_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

273 
	#HI_ERR_AI_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

275 
	#HI_ERR_AI_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

277 
	#HI_ERR_AI_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

279 
	#HI_ERR_AI_NOT_ENABLED
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

281 
	#HI_ERR_AI_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

283 
	#HI_ERR_AI_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

285 
	#HI_ERR_AI_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

287 
	#HI_ERR_AI_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

289 
	#HI_ERR_AI_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

291 
	#HI_ERR_AI_BUSY
 
	`HI_DEF_ERR
(
HI_ID_AI
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

294 
	#HI_ERR_AO_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

296 
	#HI_ERR_AO_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

298 
	#HI_ERR_AO_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

300 
	#HI_ERR_AO_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

302 
	#HI_ERR_AO_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

304 
	#HI_ERR_AO_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

306 
	#HI_ERR_AO_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

308 
	#HI_ERR_AO_NOT_ENABLED
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

310 
	#HI_ERR_AO_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

312 
	#HI_ERR_AO_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

314 
	#HI_ERR_AO_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

316 
	#HI_ERR_AO_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

318 
	#HI_ERR_AO_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

320 
	#HI_ERR_AO_BUSY
 
	`HI_DEF_ERR
(
HI_ID_AO
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

323 #ifde‡
__˝lu•lus


324 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_ao.h

18 #i‚de‡
__HI_COMM_AO_H__


19 
	#__HI_COMM_AO_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_hdmi.h

18 #i‚de‡
__HI_COMM_HDMI_H__


19 
	#__HI_COMM_HDMI_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_î∫o.h
"

23 
	~"hi_comm⁄.h
"

24 
	~"hi_comm_video.h
"

26 
	#HI_HDMI_MAX_AUDIO_CAP_COUNT
 15

	)

28 
	#HI_HDMI_MAX_AUDIO_SMPRATE_COUNT
 10

	)

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


36 
	ehiHDMI_VIDEO_FMT_E


38 
HI_HDMI_VIDEO_FMT_1080P_60
 = 0,

39 
HI_HDMI_VIDEO_FMT_1080P_50
,

40 
HI_HDMI_VIDEO_FMT_1080P_30
,

41 
HI_HDMI_VIDEO_FMT_1080P_25
,

42 
HI_HDMI_VIDEO_FMT_1080P_24
,

44 
HI_HDMI_VIDEO_FMT_1080i_60
,

45 
HI_HDMI_VIDEO_FMT_1080i_50
,

47 
HI_HDMI_VIDEO_FMT_720P_60
,

48 
HI_HDMI_VIDEO_FMT_720P_50
,

50 
HI_HDMI_VIDEO_FMT_576P_50
,

51 
HI_HDMI_VIDEO_FMT_480P_60
,

53 
HI_HDMI_VIDEO_FMT_PAL
,

54 
HI_HDMI_VIDEO_FMT_PAL_N
,

55 
HI_HDMI_VIDEO_FMT_PAL_Nc
,

57 
HI_HDMI_VIDEO_FMT_NTSC
,

58 
HI_HDMI_VIDEO_FMT_NTSC_J
,

59 
HI_HDMI_VIDEO_FMT_NTSC_PAL_M
,

61 
HI_HDMI_VIDEO_FMT_SECAM_SIN
,

62 
HI_HDMI_VIDEO_FMT_SECAM_COS
,

64 
HI_HDMI_VIDEO_FMT_861D_640X480_60
,

65 
HI_HDMI_VIDEO_FMT_VESA_800X600_60
,

66 
HI_HDMI_VIDEO_FMT_VESA_1024X768_60
,

67 
HI_HDMI_VIDEO_FMT_VESA_1280X720_60
,

68 
HI_HDMI_VIDEO_FMT_VESA_1280X800_60
,

69 
HI_HDMI_VIDEO_FMT_VESA_1280X1024_60
,

70 
HI_HDMI_VIDEO_FMT_VESA_1366X768_60
,

71 
HI_HDMI_VIDEO_FMT_VESA_1440X900_60
,

72 
HI_HDMI_VIDEO_FMT_VESA_1440X900_60_RB
,

73 
HI_HDMI_VIDEO_FMT_VESA_1600X900_60_RB
,

74 
HI_HDMI_VIDEO_FMT_VESA_1600X1200_60
,

75 
HI_HDMI_VIDEO_FMT_VESA_1680X1050_60
,

76 
HI_HDMI_VIDEO_FMT_VESA_1920X1080_60
,

77 
HI_HDMI_VIDEO_FMT_VESA_1920X1200_60
,

78 
HI_HDMI_VIDEO_FMT_VESA_2048X1152_60
,

79 
HI_HDMI_VIDEO_FMT_VESA_CUSTOMER_DEFINE
,

81 
HI_HDMI_VIDEO_FMT_BUTT


82 }
	tHI_HDMI_VIDEO_FMT_E
;

84 
	ehiHDMI_VIDEO_SAMPLE_TYPE_E


86 
HI_HDMI_VIDEO_SAMPLE_TYPE_UNKNOWN
,

87 
HI_HDMI_VIDEO_SAMPLE_TYPE_PROGRESSIVE
,

88 
HI_HDMI_VIDEO_SAMPLE_TYPE_INTERLACE
,

89 
HI_HDMI_VIDEO_SAMPLE_TYPE_INFERED_PROGRESSIVE
,

90 
HI_HDMI_VIDEO_SAMPLE_TYPE_INFERED_INTERLACE
,

92 
HI_HDMI_VIDEO_SAMPLE_TYPE_BUTT


93 }
	tHI_HDMI_VIDEO_SAMPLE_TYPE_E
;

95 
	ehiHDMI_ASPECT_RATIO_E


97 
HI_HDMI_ASPECT_RATIO_UNKNOWN
,

98 
HI_HDMI_ASPECT_RATIO_4TO3
,

99 
HI_HDMI_ASPECT_RATIO_16TO9
,

100 
HI_HDMI_ASPECT_RATIO_SQUARE
,

101 
HI_HDMI_ASPECT_RATIO_14TO9
,

102 
HI_HDMI_ASPECT_RATIO_221TO1
,

103 
HI_HDMI_ASPECT_RATIO_ZOME
,

104 
HI_HDMI_ASPECT_RATIO_FULL
,

106 
HI_HDMI_ASPECT_RATIO_BUTT


107 }
	tHI_HDMI_ASPECT_RATIO_E
;

109 
	ehiHDMI_SAMPLE_RATE_E


111 
HI_HDMI_SAMPLE_RATE_UNKNOWN
=0,

112 
HI_HDMI_SAMPLE_RATE_8K
 = 8000,

113 
HI_HDMI_SAMPLE_RATE_11K
 = 11025,

114 
HI_HDMI_SAMPLE_RATE_12K
 = 12000,

115 
HI_HDMI_SAMPLE_RATE_16K
 = 16000,

116 
HI_HDMI_SAMPLE_RATE_22K
 = 22050,

117 
HI_HDMI_SAMPLE_RATE_24K
 = 24000,

118 
HI_HDMI_SAMPLE_RATE_32K
 = 32000,

119 
HI_HDMI_SAMPLE_RATE_44K
 = 44100,

120 
HI_HDMI_SAMPLE_RATE_48K
 = 48000,

121 
HI_HDMI_SAMPLE_RATE_88K
 = 88200,

122 
HI_HDMI_SAMPLE_RATE_96K
 = 96000,

123 
HI_HDMI_SAMPLE_RATE_176K
 = 176400,

124 
HI_HDMI_SAMPLE_RATE_192K
 = 192000,

126 
HI_HDMI_SAMPLE_RATE_BUTT


127 }
	tHI_HDMI_SAMPLE_RATE_E
;

129 
	ehiHDMI_BIT_DEPTH_E


131 
HI_HDMI_BIT_DEPTH_UNKNOWN
 =0,

132 
HI_HDMI_BIT_DEPTH_8
 = 8,

133 
HI_HDMI_BIT_DEPTH_16
 = 16,

134 
HI_HDMI_BIT_DEPTH_18
 = 18,

135 
HI_HDMI_BIT_DEPTH_20
 = 20,

136 
HI_HDMI_BIT_DEPTH_24
 = 24,

137 
HI_HDMI_BIT_DEPTH_32
 = 32,

139 
HI_HDMI_BIT_DEPTH_BUTT


140 }
	tHI_HDMI_BIT_DEPTH_E
;

142 
	ehiHDMI_SND_INTERFACE_E


144 
HI_HDMI_SND_INTERFACE_I2S
,

145 
HI_HDMI_SND_INTERFACE_SPDIF
,

146 
HI_HDMI_SND_INTERFACE_HBR
,

147 
HI_HDMI_SND_INTERFACE_BUTT


148 }
	tHI_HDMI_SND_INTERFACE_E
;

150 
	ehiHDMI_ID_E


152 
HI_HDMI_ID_0
 = 0,

153 
HI_HDMI_ID_BUTT


154 } 
	tHI_HDMI_ID_E
;

157 
	ehiHDMI_EVENT_TYPE_E


159 
HI_HDMI_EVENT_HOTPLUG
 = 0x10,

160 
HI_HDMI_EVENT_NO_PLUG
,

161 
HI_HDMI_EVENT_EDID_FAIL
,

162 
HI_HDMI_EVENT_HDCP_FAIL
,

163 
HI_HDMI_EVENT_HDCP_SUCCESS
,

164 
HI_HDMI_EVENT_HDCP_USERSETTING
,

165 
HI_HDMI_EVENT_BUTT


166 }
	tHI_HDMI_EVENT_TYPE_E
;

168 
	ehiHDMI_VIDEO_MODE


170 
HI_HDMI_VIDEO_MODE_RGB444
,

171 
HI_HDMI_VIDEO_MODE_YCBCR422
,

172 
HI_HDMI_VIDEO_MODE_YCBCR444
,

174 
HI_HDMI_VIDEO_MODE_BUTT


175 }
	tHI_HDMI_VIDEO_MODE_E
;

177 
	ehiHDMI_DEEP_COLOR_E


179 
HI_HDMI_DEEP_COLOR_24BIT
 = 0x00,

180 
HI_HDMI_DEEP_COLOR_30BIT
,

181 
HI_HDMI_DEEP_COLOR_36BIT
,

182 
HI_HDMI_DEEP_COLOR_OFF
 = 0xff,

183 
HI_HDMI_DEEP_COLOR_BUTT


184 }
	tHI_HDMI_DEEP_COLOR_E
;

186 
	ehiHDMI_BARINFO_E


188 
HDMI_BAR_INFO_NOT_VALID
,

189 
HDMI_BAR_INFO_V
,

190 
HDMI_BAR_INFO_H
,

191 
HDMI_BAR_INFO_VH


192 }
	tHI_HDMI_BARINFO_E
;

194 
	ehiHDMI_SCANINFO_E


196 
HDMI_SCAN_INFO_NO_DATA
 = 0,

197 
HDMI_SCAN_INFO_OVERSCANNED
 = 1,

198 
HDMI_SCAN_INFO_UNDERSCANNED
 = 2,

199 
HDMI_SCAN_INFO_FUTURE


200 }
	tHI_HDMI_SCANINFO_E
;

202 
	ehiHDMI_PICTURE_SCALING_E


204 
HDMI_PICTURE_NON_UNIFORM_SCALING
,

205 
HDMI_PICTURE_SCALING_H
,

206 
HDMI_PICTURE_SCALING_V
,

207 
HDMI_PICTURE_SCALING_HV


208 }
	tHI_HDMI_PICTURE_SCALING_E
;

210 
	ehiHDMI_COLORSPACE_E


212 
HDMI_COLORIMETRY_NO_DATA
,

213 
HDMI_COLORIMETRY_ITU601
,

214 
HDMI_COLORIMETRY_ITU709
,

215 
HDMI_COLORIMETRY_EXTENDED
,

216 
HDMI_COLORIMETRY_XVYCC_601
,

217 
HDMI_COLORIMETRY_XVYCC_709


218 }
	tHI_HDMI_COLORSPACE_E
;

220 
	ehiHDMI_RGB_QUAN_RAGE_E


222 
HDMI_RGB_QUANTIZATION_DEFAULT_RANGE
,

223 
HDMI_RGB_QUANTIZATION_LIMITED_RANGE
,

224 
HDMI_RGB_QUANTIZATION_FULL_RANGE


225 }
	tHI_HDMI_RGB_QUAN_RAGE_E
;

227 
	ehiHDMI_YCC_QUAN_RAGE_E


229 
HDMI_YCC_QUANTIZATION_LIMITED_RANGE
,

230 
HDMI_YCC_QUANTIZATION_FULL_RANGE


231 }
	tHI_HDMI_YCC_QUAN_RAGE_E
;

233 
	ehiHDMI_CONTENT_TYPE_E


235 
HDMI_CONTNET_GRAPHIC
,

236 
HDMI_CONTNET_PHOTO
,

237 
HDMI_CONTNET_CINEMA
,

238 
HDMI_CONTNET_GAME


239 }
	tHI_HDMI_CONTENT_TYPE_E
;

241 
	ehiHDMI_CODING_TYPE_E


243 
HDMI_AUDIO_CODING_REFER_STREAM_HEAD
,

244 
HDMI_AUDIO_CODING_PCM
,

245 
HDMI_AUDIO_CODING_AC3
,

246 
HDMI_AUDIO_CODING_MPEG1
,

247 
HDMI_AUDIO_CODING_MP3
,

248 
HDMI_AUDIO_CODING_MPEG2
,

249 
HDMI_AUDIO_CODING_AAC
,

250 
HDMI_AUDIO_CODING_DTS
,

251 
HDMI_AUDIO_CODING_DDPLUS
,

252 
HDMI_AUDIO_CODING_MLP
,

253 
HDMI_AUDIO_CODING_WMA
,

254 
HDMI_AUDIO_CODING_MAX


255 }
	tHI_HDMI_CODING_TYPE_E
;

257 
	ehiHDMI_FORCE_ACTION_E


259 
HI_HDMI_FORCE_NULL
,

260 
HI_HDMI_FORCE_HDMI
,

261 
HI_HDMI_FORCE_DVI
,

262 
HI_HDMI_INIT_BOOT_CONFIG


263 }
	tHI_HDMI_FORCE_ACTION_E
;

265 
	ehiHI_HDMI_CSC_MATRIX_E


267 
HI_HDMI_CSC_MATRIX_IDENTITY
 = 0,

269 
HI_HDMI_CSC_MATRIX_BT601_TO_BT709
,

270 
HI_HDMI_CSC_MATRIX_BT709_TO_BT601
,

272 
HI_HDMI_CSC_MATRIX_BT601_TO_RGB_PC
,

273 
HI_HDMI_CSC_MATRIX_BT709_TO_RGB_PC
,

275 
HI_HDMI_CSC_MATRIX_RGB_TO_BT601_PC
,

276 
HI_HDMI_CSC_MATRIX_RGB_TO_BT709_PC
,

278 
HI_HDMI_CSC_MATRIX_BUTT


279 } 
	tHI_HDMI_CSC_MATRIX_E
;

283 (*
HI_HDMI_CÆlBack
)(
	tHI_HDMI_EVENT_TYPE_E
 
	tevít
, 
	tHI_VOID
 *
	tpPriv©eD©a
);

285 
	shiHDMI_INIT_PARA_S


287 
HI_HDMI_CÆlBack
 
p‚HdmiEvítCÆlback
;

288 
HI_VOID
 *
pCÆlBackArgs
;

289 
HI_HDMI_FORCE_ACTION_E
 
íF‹˚Mode
;

290 }
	tHI_HDMI_INIT_PARA_S
;

292 
	shiHDMI_SINK_CAPABILITY_S


294 
HI_BOOL
 
bC⁄√˘ed
;

295 
HI_BOOL
 
bSuµ‹tHdmi
;

296 
HI_BOOL
 
bIsSökPowîOn
;

297 
HI_BOOL
 
bIsRólEDID
;

299 
HI_HDMI_VIDEO_FMT_E
 
íN©iveVideoF‹m©
;

300 
HI_BOOL
 
bVideoFmtSuµ‹ãd
[
HI_HDMI_VIDEO_FMT_BUTT
];

301 
HI_BOOL
 
bSuµ‹tYCbCr
;

303 
HI_BOOL
 
bSuµ‹txvYCC601
;

304 
HI_BOOL
 
bSuµ‹txvYCC709
;

305 
HI_U8
 
u8MDBô
;

307 
HI_BOOL
 
bAudioFmtSuµ‹ãd
[
HI_HDMI_MAX_AUDIO_CAP_COUNT
];

308 
HI_U32
 
u32AudioSam∂eR©eSuµ‹ãd
[
HI_HDMI_MAX_AUDIO_SMPRATE_COUNT
];

309 
HI_U32
 
u32MaxPcmCh™√ls
;

310 
HI_U8
 
u8S≥akî
;

312 
HI_U8
 
u8IDM™uÁ˘uªName
[4];

313 
HI_U32
 
u32IDProdu˘Code
;

314 
HI_U32
 
u32IDSîülNumbî
;

315 
HI_U32
 
u32WìkOfM™uÁ˘uª
;

316 
HI_U32
 
u32YórOfM™uÁ˘uª
;

317 
HI_U8
 
u8Vîsi⁄
;

318 
HI_U8
 
u8Revisi⁄
;

319 
HI_U8
 
u8EDIDExã∫BlockNum
;

321 
HI_U8
 
u8IEERegId
[3];

322 
HI_BOOL
 
bIsPhyAddrVÆid
;

323 
HI_U8
 
u8PhyAddr_A
;

324 
HI_U8
 
u8PhyAddr_B
;

325 
HI_U8
 
u8PhyAddr_C
;

326 
HI_U8
 
u8PhyAddr_D
;

327 
HI_BOOL
 
bSuµ‹tDVIDuÆ
;

328 
HI_BOOL
 
bSuµ‹tDìpCﬁ‹YCBCR444
;

329 
HI_BOOL
 
bSuµ‹tDìpCﬁ‹30Bô
;

330 
HI_BOOL
 
bSuµ‹tDìpCﬁ‹36Bô
;

331 
HI_BOOL
 
bSuµ‹tDìpCﬁ‹48Bô
;

332 
HI_BOOL
 
bSuµ‹tAI
;

333 
HI_U32
 
u8MaxTMDSClock
;

334 
HI_BOOL
 
bI_L©ícy_Fõlds_Pª£¡
;

335 
HI_BOOL
 
bL©ícy_Fõlds_Pª£¡
;

336 
HI_BOOL
 
bHDMI_Video_Pª£¡
;

337 
HI_U8
 
u8Video_L©ícy
;

338 
HI_U8
 
u8Audio_L©ícy
;

339 
HI_U8
 
u8I¡îœ˚d_Video_L©ícy
;

340 
HI_U8
 
u8I¡îœ˚d_Audio_L©ícy
;

341 } 
	tHI_HDMI_SINK_CAPABILITY_S
;

343 
	shiUNF_HDMI_ATTR_S


345 
HI_BOOL
 
bE«bÀHdmi
;

347 
HI_BOOL
 
bE«bÀVideo
;

348 
HI_HDMI_VIDEO_FMT_E
 
íVideoFmt
;

350 
HI_HDMI_VIDEO_MODE_E
 
íVidOutMode
;

351 
HI_HDMI_DEEP_COLOR_E
 
íDìpCﬁ‹Mode
;

352 
HI_BOOL
 
bxvYCCMode
;

354 
HI_BOOL
 
bE«bÀAudio
;

355 
HI_HDMI_SND_INTERFACE_E
 
íSoundI¡f
;

356 
HI_BOOL
 
bIsMu…iCh™√l
;

357 
HI_HDMI_SAMPLE_RATE_E
 
íSam∂eR©e
;

358 
HI_U8
 
u8DownSam∂eP¨m
;

360 
HI_HDMI_BIT_DEPTH_E
 
íBôDïth
;

361 
HI_U8
 
u8I2SCéVbô
;

363 
HI_BOOL
 
bE«bÀAviInfoFøme
;

364 
HI_BOOL
 
bE«bÀAudInfoFøme
;

365 
HI_BOOL
 
bE«bÀSpdInfoFøme
;

366 
HI_BOOL
 
bE«bÀM≥gInfoFøme
;

368 
HI_U32
 
bDebugFœg
;

369 
HI_BOOL
 
bHDCPE«bÀ
;

371 
HI_BOOL
 
b3DE«bÀ
;

372 
HI_U32
 
u83DP¨am
;

373 } 
	tHI_HDMI_ATTR_S
;

375 
	shiHI_HDMI_EDID_S


377 
HI_BOOL
 
bEdidVÆid
;

378 
HI_U32
 
u32EdidÀngth
;

379 
HI_U8
 
u8Edid
[512];

380 }
	tHI_HDMI_EDID_S
;

382 
	shiHI_HDMI_CSC_S


384 
HI_HDMI_CSC_MATRIX_E
 
íCscM©rix
;

385 
HI_U32
 
u32Luma
;

386 
HI_U32
 
u32C⁄åa°
;

387 
HI_U32
 
u32Hue
;

388 
HI_U32
 
u32S©u©uª
;

389 } 
	tHI_HDMI_CSC_S
;

391 
	eègHI_HDMI_INFOFRAME_TYPE_E


393 
HI_INFOFRAME_TYPE_AVI
,

394 
HI_INFOFRAME_TYPE_SPD
,

395 
HI_INFOFRAME_TYPE_AUDIO
,

396 
HI_INFOFRAME_TYPE_MPEG
,

397 
HI_INFOFRAME_TYPE_VENDORSPEC
,

398 
HI_INFOFRAME_TYPE_BUTT


399 }
	tHI_HDMI_INFOFRAME_TYPE_E
;

402 
	shiUNF_HDMI_AVI_INFOFRAME_VER2_S


404 
HI_HDMI_VIDEO_FMT_E
 
íTimögMode
;

405 
HI_HDMI_VIDEO_MODE_E
 
íOuçutTy≥
;

406 
HI_BOOL
 
bA˘ive_Inf‹_Pª£¡
;

407 
HI_HDMI_BARINFO_E
 
íB¨Info
;

408 
HI_HDMI_SCANINFO_E
 
íSˇnInfo
;

409 
HI_HDMI_COLORSPACE_E
 
íCﬁ‹imëry
;

410 
HI_HDMI_ASPECT_RATIO_E
 
íA•e˘R©io
;

411 
HI_HDMI_ASPECT_RATIO_E
 
íA˘iveA•e˘R©io
;

412 
HI_HDMI_PICTURE_SCALING_E
 
íPi˘uªSˇlög
;

413 
HI_HDMI_RGB_QUAN_RAGE_E
 
íRGBQu™tiz©i⁄
;

414 
HI_BOOL
 
bIsITC⁄ã¡
;

415 
HI_U32
 
u32PixñRïëôi⁄
;

417 
HI_HDMI_CONTENT_TYPE_E
 
íC⁄ã¡Ty≥
;

418 
HI_HDMI_YCC_QUAN_RAGE_E
 
íYCCQu™tiz©i⁄
;

420 
HI_U32
 
u32LöeNEndofT›B¨
;

421 
HI_U32
 
u32LöeNSèπofBŸB¨
;

422 
HI_U32
 
u32PixñNEndofLe·B¨
;

423 
HI_U32
 
u32PixñNSèπofRightB¨
;

424 }
	tHI_HDMI_AVI_INFOFRAME_VER2_S
;

427 
	shiUNF_HDMI_AUD_INFOFRAME_VER1_S


429 
HI_U32
 
u32Ch™√lCou¡
;

430 
HI_HDMI_CODING_TYPE_E
 
íCodögTy≥
;

431 
HI_U32
 
u32Sam∂eSize
;

432 
HI_U32
 
u32Sam∂ögFªquícy
;

433 
HI_U32
 
u32Ch™√lAŒoc
;

434 
HI_U32
 
u32LevñShi·
;

435 
HI_BOOL
 
u32DownmixInhibô
;

436 }
	tHI_HDMI_AUD_INFOFRAME_VER1_S
;

439 
	shiUNF_HDMI_SPD_INFOFRAME_S


441 
HI_U8
 
u8Víd‹Name
[8];

442 
HI_U8
 
u8Produ˘Des¸ùti⁄
[16];

443 }
	tHI_HDMI_SPD_INFOFRAME_S
;

446 
	shiUNF_HDMI_MPEGSOURCE_INFOFRAME_S


448 
HI_U32
 
u32MPEGBôR©e
;

449 
HI_BOOL
 
bIsFõldRïóãd
;

450 }
	tHI_HDMI_MPEGSOURCE_INFOFRAME_S
;

453 
	shiUNF_HDMI_VENDORSPEC_INFOFRAME_S


455 
HI_U32
 
u32Regi°øti⁄Id
;

456 }
	tHI_HDMI_VENDORSPEC_INFOFRAME_S
;

458 
	uhiUNF_HDMI_INFOFRAME_UNIT_U


460 
HI_HDMI_AVI_INFOFRAME_VER2_S
 
°AVIInfoFøme
;

461 
HI_HDMI_AUD_INFOFRAME_VER1_S
 
°AUDInfoFøme
;

462 
HI_HDMI_SPD_INFOFRAME_S
 
°SPDInfoFøme
;

463 
HI_HDMI_MPEGSOURCE_INFOFRAME_S
 
°MPEGSour˚InfoFøme
;

464 
HI_HDMI_VENDORSPEC_INFOFRAME_S
 
°Víd‹S≥cInfoFøme
;

465 }
	tHI_HMDI_INFORFRAME_UNIT_U
;

467 
	shiUNF_HDMI_INFOFRAME_S


469 
HI_HDMI_INFOFRAME_TYPE_E
 
íInfoFømeTy≥
;

470 
HI_HMDI_INFORFRAME_UNIT_U
 
unInf‹Unô
;

471 }
	tHI_HDMI_INFOFRAME_S
;

473 
	shiHI_HDMI_PARAM_S


475 
HI_HDMI_VIDEO_MODE_E
 
íVidInMode
;

476 }
	tHI_HDMI_PARAM_S
;

478 
	ehiUNF_HDMI_3D_FORMAT_E


480 
HI_3D_FRAME_PACKETING
 = 0x00,

481 
HI_3D_FIELD_ALTERNATIVE
 = 0x01,

482 
HI_3D_LINE_ALTERNATIVE
 = 0x02,

483 
HI_3D_SIDE_BY_SIDE_FULL
 = 0x03,

484 
HI_3D_L_DEPTH
 = 0x04,

485 
HI_3D_L_DEPTH_GRAPHICS_GRAPHICS_DEPTH
 = 0x05,

486 
HI_3D_TOP_AND_BOTTOM
 = 0x06,

487 
HI_3D_SIDE_BY_SIDE_HALF
 = 0x08,

488 
HI_3D_MAX_BUTT


489 }
	tHI_HDMI_3D_FORMAT_E
;

494 
	#CEC_OPCODE_FEATURE_ABORT
 0X00

	)

495 
	#CEC_OPCODE_ABORT_MESSAGE
 0XFF

	)

497 
	#CEC_OPCODE_ACTIVE_SOURCE
 0X82

	)

498 
	#CEC_OPCODE_IMAGE_VIEW_ON
 0X04

	)

499 
	#CEC_OPCODE_TEXT_VIEW_ON
 0X0D

	)

501 
	#CEC_OPCODE_INACTIVE_SOURCE
 0X9D

	)

502 
	#CEC_OPCODE_REQUEST_ACTIVE_SOURCE
 0X85

	)

503 
	#CEC_OPCODE_ROUTING_CHANGE
 0X80

	)

504 
	#CEC_OPCODE_ROUTING_INFORMATION
 0X81

	)

505 
	#CEC_OPCODE_SET_STREAM_PATH
 0X86

	)

507 
	#CEC_OPCODE_STANDBY
 0X36

	)

509 
	#CEC_OPCODE_RECORD_OFF
 0X0B

	)

510 
	#CEC_OPCODE_RECORD_ON
 0X09

	)

511 
	#CEC_OPCODE_RECORD_STATUS
 0X0A

	)

512 
	#CEC_OPCODE_RECORD_TV_SCREEN
 0X0F

	)

514 
	#CEC_OPCODE_CLEAR_ANALOGUE_TIMER
 0X33

	)

515 
	#CEC_OPCODE_CLEAR_DIGITAL_TIMER
 0X99

	)

516 
	#CEC_OPCODE_CLEAR_EXTERNAL_TIMER
 0XA1

	)

517 
	#CEC_OPCODE_SET_ANALOGUE_TIMER
 0X34

	)

518 
	#CEC_OPCODE_SET_DIGITAL_TIMER
 0X97

	)

519 
	#CEC_OPCODE_SET_EXTERNAL_TIMER
 0XA2

	)

520 
	#CEC_OPCODE_SET_TIMER_PROGRAM_TITLE
 0X67

	)

521 
	#CEC_OPCODE_TIMER_CLEARED_STATUS
 0X43

	)

522 
	#CEC_OPCODE_TIMER_STATUS
 0X35

	)

524 
	#CEC_OPCODE_CEC_VERSION
 0X9E

	)

525 
	#CEC_OPCODE_GET_CEC_VERSION
 0X9F

	)

526 
	#CEC_OPCODE_GIVE_PHYSICAL_ADDRESS
 0X83

	)

527 
	#CEC_OPCODE_REPORT_PHYSICAL_ADDRESS
 0X84

	)

528 
	#CEC_OPCODE_GET_MENU_LANGUAGE
 0X91

	)

529 
	#CEC_OPCODE_SET_MENU_LANGUAGE
 0X32

	)

531 
	#CEC_OPCODE_DECK_CONTROL
 0X42

	)

532 
	#CEC_OPCODE_DECK_STATUS
 0X1B

	)

533 
	#CEC_OPCODE_GIVE_DECK_STATUS
 0X1A

	)

534 
	#CEC_OPCODE_PLAY
 0X41

	)

536 
	#CEC_OPCODE_GIVE_TUNER_DEVICE_STATUS
 0X08

	)

537 
	#CEC_OPCODE_SELECT_ANALOGUE_SERVICE
 0X92

	)

538 
	#CEC_OPCODE_SELECT_DIGITAL_SERVICE
 0X93

	)

539 
	#CEC_OPCODE_TUNER_DEVICE_STATUS
 0X07

	)

540 
	#CEC_OPCODE_TUNER_STEP_DECREMENT
 0X06

	)

541 
	#CEC_OPCODE_TUNER_STEP_INCREMENT
 0X05

	)

543 
	#CEC_OPCODE_DEVICE_VENDOR_ID
 0X87

	)

544 
	#CEC_OPCODE_GIVE_DEVICE_VENDOR_ID
 0X8C

	)

545 
	#CEC_OPCODE_VENDOR_COMMAND
 0X89

	)

546 
	#CEC_OPCODE_VENDOR_COMMAND_WITH_ID
 0XA0

	)

547 
	#CEC_OPCODE_VENDOR_REMOTE_BUTTON_DOWN
 0X8A

	)

548 
	#CEC_OPCODE_VENDOR_REMOTE_BUTTON_UP
 0X8B

	)

550 
	#CEC_OPCODE_SET_OSD_STRING
 0X64

	)

551 
	#CEC_OPCODE_GIVE_OSD_NAME
 0X46

	)

552 
	#CEC_OPCODE_SET_OSD_NAME
 0X47

	)

554 
	#CEC_OPCODE_MENU_REQUEST
 0X8D

	)

555 
	#CEC_OPCODE_MENU_STATUS
 0X8E

	)

556 
	#CEC_OPCODE_USER_CONTROL_PRESSED
 0X44

	)

557 
	#CEC_OPCODE_USER_CONTROL_RELEASED
 0X45

	)

559 
	#CEC_OPCODE_GIVE_DEVICE_POWER_STATUS
 0X8F

	)

560 
	#CEC_OPCODE_REPORT_POWER_STATUS
 0X90

	)

562 
	#CEC_OPCODE_GIVE_AUDIO_STATUS
 0X71

	)

563 
	#CEC_OPCODE_GIVE_SYSTEM_AUDIO_MODE_STATUS
 0x7D

	)

564 
	#CEC_OPCODE_REPORT_AUDIO_STATUS
 0X7A

	)

565 
	#CEC_OPCODE_SET_SYSTEM_AUDIO_MODE
 0X72

	)

566 
	#CEC_OPCODE_SYSTEM_AUDIO_MODE_REQUEST
 0X70

	)

567 
	#CEC_OPCODE_SYSTEM_AUDIO_MODE_STATUS
 0X7E

	)

569 
	#CEC_OPCODE_SET_AUDIO_RATE
 0X9A

	)

571 
	#CEC_OPCODE_POLLING_MESSAGE
 0XFE

	)

573 
	ehiUNF_CEC_LOGICALADD_S


575 
HI_CEC_LOGICALADD_TV
 = 0X00,

576 
HI_CEC_LOGICALADD_RECORDDEV_1
 = 0X01,

577 
HI_CEC_LOGICALADD_RECORDDEV_2
 = 0X02,

578 
HI_CEC_LOGICALADD_TUNER_1
 = 0X03,

579 
HI_CEC_LOGICALADD_PLAYDEV_1
 = 0X04,

580 
HI_CEC_LOGICALADD_AUDIOSYSTEM
 = 0X05,

581 
HI_CEC_LOGICALADD_TUNER_2
 = 0X06,

582 
HI_CEC_LOGICALADD_TUNER_3
 = 0X07,

583 
HI_CEC_LOGICALADD_PLAYDEV_2
 = 0X08,

584 
HI_CEC_LOGICALADD_RECORDDEV_3
 = 0X09,

585 
HI_CEC_LOGICALADD_TUNER_4
 = 0X0A,

586 
HI_CEC_LOGICALADD_PLAYDEV_3
 = 0X0B,

587 
HI_CEC_LOGICALADD_RESERVED_1
 = 0X0C,

588 
HI_CEC_LOGICALADD_RESERVED_2
 = 0X0D,

589 
HI_CEC_LOGICALADD_SPECIALUSE
 = 0X0E,

590 
HI_CEC_LOGICALADD_BROADCAST
 = 0X0F,

591 
HI_CEC_LOGICALADD_BUTT


592 }
	tHI_CEC_LOGICALADD_S
;

594 
	ehiUNF_CEC_CMDTYPE_E


596 
HI_CEC_STRUCTCOMMAND
,

597 
HI_CEC_RAWCOMMAND
,

598 
HI_CEC_BUTT


599 }
	tHI_CEC_CMDTYPE_E
;

601 
	shiUNF_CEC_RAWDATA_S


603 
HI_U8
 
u8Lígth
;

604 
HI_U8
 
u8D©a
[15];

605 }
	tHI_CEC_RAWDATA_S
;

607 
	ehiUNF_CEC_UICMD_E


609 
HI_CEC_UICMD_SELECT
 = 0x00,

610 
HI_CEC_UICMD_UP
 = 0x01,

611 
HI_CEC_UICMD_DOWN
 = 0x02,

612 
HI_CEC_UICMD_LEFT
 = 0x03,

613 
HI_CEC_UICMD_RIGHT
 = 0x04,

614 
HI_CEC_UICMD_RIGHT_UP
 = 0x05,

615 
HI_CEC_UICMD_RIGHT_DOWN
 = 0x06,

616 
HI_CEC_UICMD_LEFT_UP
 = 0x07,

617 
HI_CEC_UICMD_LEFT_DOWN
 = 0x08,

618 
HI_CEC_UICMD_ROOT_MENU
 = 0x09,

619 
HI_CEC_UICMD_SETUP_MENU
 = 0x0A,

620 
HI_CEC_UICMD_CONTENTS_MENU
 = 0x0B,

621 
HI_CEC_UICMD_FAVORITE_MENU
 = 0x0C,

622 
HI_CEC_UICMD_EXIT
 = 0x0D,

623 
HI_CEC_UICMD_NUM_0
 = 0x20,

624 
HI_CEC_UICMD_NUM_1
 = 0x21,

625 
HI_CEC_UICMD_NUM_2
 = 0x22,

626 
HI_CEC_UICMD_NUM_3
 = 0x23,

627 
HI_CEC_UICMD_NUM_4
 = 0x24,

628 
HI_CEC_UICMD_NUM_5
 = 0x25,

629 
HI_CEC_UICMD_NUM_6
 = 0x26,

630 
HI_CEC_UICMD_NUM_7
 = 0x27,

631 
HI_CEC_UICMD_NUM_8
 = 0x28,

632 
HI_CEC_UICMD_NUM_9
 = 0x29,

633 
HI_CEC_UICMD_DOT
 = 0x2A,

634 
HI_CEC_UICMD_ENTER
 = 0x2B,

635 
HI_CEC_UICMD_CLEAR
 = 0x2C,

636 
HI_CEC_UICMD_NEXT_FAVORITE
 = 0x2F,

637 
HI_CEC_UICMD_CHANNEL_UP
 = 0x30,

638 
HI_CEC_UICMD_CHANNEL_DOWN
 = 0x31,

639 
HI_CEC_UICMD_PREVIOUS_CHANNEL
 = 0x32,

640 
HI_CEC_UICMD_SOUND_SELECT
 = 0x33,

641 
HI_CEC_UICMD_INPUT_SELECT
 = 0x34,

642 
HI_CEC_UICMD_DISPLAY_INFORMATION
 = 0x35,

643 
HI_CEC_UICMD_HELP
 = 0x36,

644 
HI_CEC_UICMD_PAGE_UP
 = 0x37,

645 
HI_CEC_UICMD_PAGE_DOWN
 = 0x38,

646 
HI_CEC_UICMD_POWER
 = 0x40,

647 
HI_CEC_UICMD_VOLUME_UP
 = 0x41,

648 
HI_CEC_UICMD_VOLUME_DOWN
 = 0x42,

649 
HI_CEC_UICMD_MUTE
 = 0x43,

650 
HI_CEC_UICMD_PLAY
 = 0x44,

651 
HI_CEC_UICMD_STOP
 = 0x45,

652 
HI_CEC_UICMD_PAUSE
 = 0x46,

653 
HI_CEC_UICMD_RECORD
 = 0x47,

654 
HI_CEC_UICMD_REWIND
 = 0x48,

655 
HI_CEC_UICMD_FAST_FORWARD
 = 0x49,

656 
HI_CEC_UICMD_EJECT
 = 0x4A,

657 
HI_CEC_UICMD_FORWARD
 = 0x4B,

658 
HI_CEC_UICMD_BACKWARD
 = 0x4C,

659 
HI_CEC_UICMD_STOP_RECORD
 = 0x4D,

660 
HI_CEC_UICMD_PAUSE_RECORD
 = 0x4E,

661 
HI_CEC_UICMD_ANGLE
 = 0x50,

662 
HI_CEC_UICMD_SUBPICTURE
 = 0x51,

663 
HI_CEC_UICMD_VIDEO_ON_DEMAND
 = 0x52,

664 
HI_CEC_UICMD_ELECTRONIC_PROGRAM_GUIDE
 = 0x53,

665 
HI_CEC_UICMD_TIMER_PROGRAMMING
 = 0x54,

666 
HI_CEC_UICMD_INITIAL_CONFIGURATION
 = 0x55,

667 
HI_CEC_UICMD_PLAY_FUNCTION
 = 0x60,

668 
HI_CEC_UICMD_PAUSE_PLAY_FUNCTION
 = 0x61,

669 
HI_CEC_UICMD_RECORD_FUNCTION
 = 0x62,

670 
HI_CEC_UICMD_PAUSE_RECORD_FUNCTION
 = 0x63,

671 
HI_CEC_UICMD_STOP_FUNCTION
 = 0x64,

672 
HI_CEC_UICMD_MUTE_FUNCTION
 = 0x65,

673 
HI_CEC_UICMD_RESTORE_VOLUME_FUNCTION
 = 0x66,

674 
HI_CEC_UICMD_TUNE_FUNCTION
 = 0x67,

675 
HI_CEC_UICMD_SELECT_MEDIA_FUNCTION
 = 0x68,

676 
HI_CEC_UICMD_SELECT_AV_INPUT_FUNCTION
 = 0x69,

677 
HI_CEC_UICMD_SELECT_AUDIO_INPUT_FUNCTION
 = 0x6A,

678 
HI_CEC_UICMD_POWER_TOGGLE_FUNCTION
 = 0x6B,

679 
HI_CEC_UICMD_POWER_OFF_FUNCTION
 = 0x6C,

680 
HI_CEC_UICMD_POWER_ON_FUNCTION
 = 0x6D,

681 
HI_CEC_UICMD_F1_BLUE
 = 0x71,

682 
HI_CEC_UICMD_F2_RED
 = 0x72,

683 
HI_CEC_UICMD_F3_GREEN
 = 0x73,

684 
HI_CEC_UICMD_F4_YELLOW
 = 0x74,

685 
HI_CEC_UICMD_F5
 = 0x75,

686 
HI_CEC_UICMD_DATA
 = 0x76

687 }
	tHI_CEC_UICMD_E
;

689 
	uhiUNF_CEC_O≥ønd_t


691 
HI_CEC_RAWDATA_S
 
°RawD©a
;

692 
HI_CEC_UICMD_E
 
°UIOpcode
;

693 }
	tHI_CEC_O≥ønd_t
;

695 
	shiUNF_HDMI_CEC_CMD_S


697 
HI_CEC_LOGICALADD_S
 
íSrcAdd
;

698 
HI_CEC_LOGICALADD_S
 
íD°Add
;

699 
HI_U8
 
u8Opcode
;

700 
HI_CEC_O≥ønd_t
 
unO≥ønd
;

701 }
	tHI_HDMI_CEC_CMD_S
;

703 
	shiUNF_HDMI_CEC_STATUS_S


705 
HI_BOOL
 
bE«bÀ
;

706 
HI_U8
 
u8PhysiˇlAddr
[4];

707 
HI_U8
 
u8LogiˇlAddr
;

708 
HI_U8
 
u8Nëw‹k
[
HI_CEC_LOGICALADD_BUTT
];

709 }
	tHI_HDMI_CEC_STATUS_S
;

712 
	ehiERR_HDMI_CODE_E


714 
ERR_HDMI_NOT_INIT
 = 1,

715 
ERR_HDMI_INVALID_PARA
 = 2,

716 
ERR_HDMI_NUL_PTR
 = 3,

717 
ERR_HDMI_DEV_NOT_OPEN
 = 4,

718 
ERR_HDMI_DEV_NOT_CONNECT
 = 5,

719 
ERR_HDMI_READ_SINK_FAILED
 = 6,

720 
ERR_HDMI_INIT_ALREADY
 = 7,

721 
ERR_HDMI_CALLBACK_ALREADY
 = 8,

722 
ERR_HDMI_INVALID_CALLBACK
 = 9,

723 
ERR_HDMI_FEATURE_NO_SUPPORT
 = 10,

724 
ERR_HDMI_BUS_BUSY
 = 11,

725 
ERR_HDMI_READ_EVENT_FAILED
 = 12,

726 
ERR_HDMI_NOT_START
 = 13,

727 
ERR_HDMI_READ_EDID_FAILED
 = 14,

729 
ERR_HDMI_BUTT
,

730 } 
	tERR_HDMI_CODE_E
;

732 
	#HI_ERR_HDMI_NOT_INIT
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_NOT_INIT
)

	)

733 
	#HI_ERR_HDMI_INVALID_PARA
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_INVALID_PARA
)

	)

734 
	#HI_ERR_HDMI_NUL_PTR
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_NUL_PTR
)

	)

735 
	#HI_ERR_HDMI_DEV_NOT_OPEN
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_DEV_NOT_OPEN
)

	)

736 
	#HI_ERR_HDMI_DEV_NOT_CONNECT
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_DEV_NOT_CONNECT
)

	)

737 
	#HI_ERR_HDMI_READ_SINK_FAILED
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_READ_SINK_FAILED
)

	)

738 
	#HI_ERR_HDMI_INIT_ALREADY
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_INIT_ALREADY
)

	)

739 
	#HI_ERR_HDMI_CALLBACK_ALREADY
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_CALLBACK_ALREADY
)

	)

740 
	#HI_ERR_HDMI_INVALID_CALLBACK
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_INVALID_CALLBACK
)

	)

741 
	#HI_ERR_HDMI_FEATURE_NO_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_FEATURE_NO_SUPPORT
)

	)

742 
	#HI_ERR_HDMI_BUS_BUSY
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_BUS_BUSY
)

	)

743 
	#HI_ERR_HDMI_READ_EVENT_FAILED
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_READ_EVENT_FAILED
)

	)

744 
	#HI_ERR_HDMI_NOT_START
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_NOT_START
)

	)

745 
	#HI_ERR_HDMI_READ_EDID_FAILED
 
	`HI_DEF_ERR
(
HI_ID_HDMI
, 
EN_ERR_LEVEL_ERROR
, 
ERR_HDMI_READ_EDID_FAILED
)

	)

747 #ifde‡
__˝lu•lus


748 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_ive.h

18 #i‚de‡
__HI_COMM_IVE_H__


19 
	#__HI_COMM_IVE_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_debug.h
"

23 
	~"hi_comm⁄.h
"

24 
	~"hi_î∫o.h
"

25 
	~"hi_deföes.h
"

27 #ifde‡
__˝lu•lus


28 #i‡
__˝lu•lus


33 
	#IVE_MAX_HANDLE_NR
 0x0FFFFFFF

	)

38 
	shiIVE_DATA_ATTR_S


40 
HI_U32
 
u32PhyAddr
;

41 
HI_U32
 
u32Såide
;

42 }
	tIVE_MEM_INFO_S
;

49 
	ehiIVE_SRC_FMT_E


51 
IVE_SRC_FMT_SINGLE
 = 0,

52 
IVE_SRC_FMT_SP420
,

53 
IVE_SRC_FMT_SP422
,

54 
IVE_SRC_FMT_BUTT


55 }
	tIVE_SRC_FMT_E
;

64 
	shiIVE_SRC_INFO_S


66 
IVE_SRC_FMT_E
 
íSrcFmt
;

67 
IVE_MEM_INFO_S
 
°SrcMem
;

69 
HI_U32
 
u32Height
;

70 
HI_U32
 
u32Width
;

71 }
	tIVE_SRC_INFO_S
;

77 
	ehiIVE_CSC_OUT_FMT_E


79 
IVE_CSC_OUT_FMT_PACKAGE
 = 0,

80 
IVE_CSC_OUT_FMT_PLANAR
,

81 
IVE_CSC_OUT_FMT_BUTT


82 }
	tIVE_CSC_OUT_FMT_E
;

87 
	ehiIVE_CSC_MODE_E


89 
IVE_CSC_MODE_VIDEO_BT601_AND_BT656
 = 0,

90 
IVE_CSC_MODE_VIDEO_BT709
,

91 
IVE_CSC_MODE_PIC_BT601_AND_BT656
,

92 
IVE_CSC_MODE_PIC_BT709
,

93 
IVE_CSC_MODE_BUTT


94 }
	tIVE_CSC_MODE_E
;

100 
	shiIVE_CSC_CTRL_S


102 
IVE_CSC_OUT_FMT_E
 
íOutFmt
;

103 
IVE_CSC_MODE_E
 
íCscMode
;

104 }
	tIVE_CSC_CTRL_S
;

111 
	shiIVE_FILTER_CTRL_S


113 
HI_S8
 
as8Mask
[9];

114 
HI_S8
 
u8N‹m
;

115 }
	tIVE_FILTER_CTRL_S
;

123 
	shiIVE_FILTER_AND_CSC_CTRL_S


125 
IVE_CSC_OUT_FMT_E
 
íOutFmt
;

126 
IVE_CSC_MODE_E
 
íCscMode
;

127 
HI_S8
 
as8Mask
[9];

128 
HI_S8
 
u8N‹m
;

129 }
	tIVE_FILTER_AND_CSC_CTRL_S
;

134 
	shiIVE_SOBEL_CTRL_S


136 
HI_S8
 
as8Mask
[9];

137 }
	tIVE_SOBEL_CTRL_S
;

144 
	ehiIVE_CANNY_OUT_FMT_E


146 
IVE_CANNY_OUT_FMT_ONLY_MAG
 = 0,

147 
IVE_CANNY_OUT_FMT_MAG_AND_ANG
,

148 
IVE_CANNY_OUT_FMT_BUTT


149 }
	tIVE_CANNY_OUT_FMT_E
;

154 
	shiIVE_CANNY_CTRL_S


156 
IVE_CANNY_OUT_FMT_E
 
íOutFmt
;

157 
HI_S8
 
as8Mask
[9];

158 }
	tIVE_CANNY_CTRL_S
;

164 
	shiIVE_DILATE_CTRL_S


166 
HI_U8
 
au8Mask
[9];

167 }
	tIVE_DILATE_CTRL_S
;

173 
	shiIVE_ERODE_CTRL_S


175 
HI_U8
 
au8Mask
[9];

176 }
	tIVE_ERODE_CTRL_S
;

182 
	ehiIVE_THRESH_OUT_FMT_E


184 
IVE_THRESH_OUT_FMT_BINARY
 = 0,

185 
IVE_THRESH_OUT_FMT_TRUNC
,

186 
IVE_THRESH_OUT_FMT_TOZERO
,

187 
IVE_THRESH_OUT_FMT_BUTT


188 }
	tIVE_THRESH_OUT_FMT_E
;

193 
	shiIVE_THRESH_CTRL_S


195 
IVE_THRESH_OUT_FMT_E
 
íOutFmt
;

196 
HI_U32
 
u32Thªsh
;

197 
HI_U32
 
u32MöVÆ
;

198 
HI_U32
 
u32MaxVÆ
;

199 }
	tIVE_THRESH_CTRL_S
;

205 
	ehiIVE_SUB_OUT_FMT_E


207 
IVE_SUB_OUT_FMT_ABS
 = 0,

208 
IVE_SUB_OUT_FMT_SFR
,

209 
IVE_SUB_OUT_FMT_BUTT


210 }
	tIVE_SUB_OUT_FMT_E
;

214 
	#HI_ERR_IVE_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

216 
	#HI_ERR_IVE_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

218 
	#HI_ERR_IVE_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

220 
	#HI_ERR_IVE_EXIST
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

222 
	#HI_ERR_IVE_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

224 
	#HI_ERR_IVE_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

226 
	#HI_ERR_IVE_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

228 
	#HI_ERR_IVE_NOT_SURPPORT
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

230 
	#HI_ERR_IVE_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

232 
	#HI_ERR_IVE_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

234 
	#HI_ERR_IVE_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

236 
	#HI_ERR_IVE_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

238 
	#HI_ERR_IVE_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

240 
	#HI_ERR_IVE_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

242 
	#HI_ERR_IVE_BUSY
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

247 
	#HI_ERR_IVE_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_IVE
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

250 #ifde‡
__˝lu•lus


251 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_pciv.h

18 #i‚de‡
__HI_COMM_PCIV_H__


19 
	#__HI_COMM_PCIV_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_comm⁄.h
"

23 
	~"hi_î∫o.h
"

24 
	~"hi_comm_video.h
"

25 
	~"hi_comm_vdec.h
"

26 
	~"hi_comm_vpss.h
"

28 #ifde‡
__˝lu•lus


29 #i‡
__˝lu•lus


34 
HI_S32
 
	tPCIV_CHN
;

36 
	#PCIV_MAX_BUF_NUM
 16

	)

37 
	#PCIV_MAX_CHIPNUM
 32

	)

39 
	#MAKE_DWORD
(
high
,
low
Ë((÷ow)&0x0000ffff)|((high)<<16))

	)

40 
	#HIGH_WORD
(
x
Ë(((x)&0xffff0000)>>16)

	)

41 
	#LOW_WORD
(
x
Ë((x)&0x0000ffff)

	)

44 
	shiPCIV_VIDEVICE_S


46 
VI_DEV
 
viDev
;

47 
VI_CHN
 
viChn
;

48 } 
	tPCIV_VIDEVICE_S
;

51 
	shiPCIV_VODEVICE_S


53 
VO_DEV
 
voDev
;

54 
VO_CHN
 
voChn
;

55 } 
	tPCIV_VODEVICE_S
;

58 
	shiPCIV_VDECDEVICE_S


60 
VDEC_CHN
 
vdecChn
;

61 } 
	tPCIV_VDECDEVICE_S
;

64 
	shiPCIV_VPSSDEVICE_S


66 
VPSS_GRP
 
vpssGΩ
;

67 
VPSS_CHN
 
vpssChn
;

68 } 
	tPCIV_VPSSDEVICE_S
;

71 
	ehiPCIV_BIND_TYPE_E


73 
PCIV_BIND_VI
 = 0,

74 
PCIV_BIND_VO
 = 1,

75 
PCIV_BIND_VDEC
 = 2,

76 
PCIV_BIND_VPSS
 = 3,

77 
PCIV_BIND_BUTT


78 } 
	tPCIV_BIND_TYPE_E
;

81 
	shiPCI_BIND_OBJ_S


83 
HI_BOOL
 
bVpssSíd
;

84 
PCIV_BIND_TYPE_E
 
íTy≥
;

87 
PCIV_VIDEVICE_S
 
viDevi˚
;

88 
PCIV_VODEVICE_S
 
voDevi˚
;

89 
PCIV_VDECDEVICE_S
 
vdecDevi˚
;

90 
PCIV_VPSSDEVICE_S
 
vpssDevi˚
;

91 } 
unAâachObj
;

92 } 
	tPCIV_BIND_OBJ_S
;

95 
	shiPCIV_REMOTE_OBJ_S


97 
HI_S32
 
s32ChùId
;

98 
PCIV_CHN
 
pcivChn
;

99 } 
	tPCIV_REMOTE_OBJ_S
;

102 
	shiPCIV_PIC_ATTR_S


104 
HI_U32
 
u32Width
;

105 
HI_U32
 
u32Height
;

106 
HI_U32
 
u32Såide
[3];

107 
VIDEO_FIELD_E
 
u32Fõld
;

108 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

109 } 
	tPCIV_PIC_ATTR_S
;

113 
	shiPCIV_ATTR_S


115 
PCIV_PIC_ATTR_S
 
°PicAâr
;

116 
HI_S32
 
s32BufChù
;

117 
HI_U32
 
u32BlkSize
;

118 
HI_U32
 
u32Cou¡
;

119 
HI_U32
 
u32PhyAddr
[
PCIV_MAX_BUF_NUM
];

120 
PCIV_REMOTE_OBJ_S
 
°RemŸeObj
;

121 } 
	tPCIV_ATTR_S
;

124 
	#PCIV_MAX_VBCOUNT
 8

	)

127 
	shiPCIV_WINVBCFG_S


129 
HI_U32
 
u32PoﬁCou¡
;

130 
HI_U32
 
u32BlkSize
[
PCIV_MAX_VBCOUNT
];

131 
HI_U32
 
u32BlkCou¡
[
PCIV_MAX_VBCOUNT
];

132 } 
	tPCIV_WINVBCFG_S
;

134 
	shiPCIV_BASEWINDOW_S


136 
HI_S32
 
s32ChùId
;

137 
HI_U32
 
u32NpWöBa£
;

138 
HI_U32
 
u32PfWöBa£
;

139 
HI_U32
 
u32CfgWöBa£
;

140 
HI_U32
 
u32PfAHBAddr
;

141 } 
	tPCIV_BASEWINDOW_S
;

143 
	#PCIV_MAX_DMABLK
 128

	)

144 
	shiPCIV_DMA_BLOCK_S


146 
HI_U32
 
u32SrcAddr
;

147 
HI_U32
 
u32D°Addr
;

148 
HI_U32
 
u32BlkSize
;

149 } 
	tPCIV_DMA_BLOCK_S
;

151 
	shiPCIV_DMA_TASK_S


153 
HI_U32
 
u32Cou¡
;

154 
HI_BOOL
 
bRód
;

155 
PCIV_DMA_BLOCK_S
 *
pBlock
;

156 } 
	tPCIV_DMA_TASK_S
;

162 
	#PCIV_MSGPORT_KERNEL
 80

	)

168 
	#PCIV_MSGPORT_MAXPORT
 100

	)

169 
	#PCIV_MSGPORT_TIME
 79

	)

170 
	#PCIV_MSGPORT_USERCMD
 81

	)

171 
	#PCIV_MSGPORT_USERNOTIFY2HOST
 82

	)

172 
	#PCIV_MSGPORT_USERNOTIFY2SLAVE
 83

	)

173 
	#PCIV_MSGPORT_USERNOTIFY2HOST_VDEC
 84

	)

174 
	#PCIV_MSGPORT_USERNOTIFY2SLAVE_VDEC
 85

	)

175 
	#PCIV_MAXVO_BIND
 4

	)

178 
	ehiPCIV_FILTER_TYPE_E


180 
PCIV_FILTER_TYPE_NORM
,

181 
PCIV_FILTER_TYPE_EX
,

182 
PCIV_FILTER_TYPE_EX2
,

184 
PCIV_FILTER_TYPE_BUTT


185 } 
	tPCIV_FILTER_TYPE_E
;

187 
	ehiPCIV_PIC_FIELD_E


189 
PCIV_FIELD_TOP
,

190 
PCIV_FIELD_BOTTOM
,

191 
PCIV_FIELD_BOTH
,

193 
PCIV_FIELD_BUTT


194 } 
	tPCIV_PIC_FIELD_E
;

200 
	shiPCIV_PREPROC_CFG_S


202 
PCIV_PIC_FIELD_E
 
íFõldSñ
;

203 
PCIV_FILTER_TYPE_E
 
íFûãrTy≥
;

205 
DSU_HSCALE_FILTER_E
 
íHFûãr
;

206 
DSU_VSCALE_FILTER_E
 
íVFûãrL
;

207 
DSU_VSCALE_FILTER_E
 
íVFûãrC
;

209 } 
	tPCIV_PREPROC_CFG_S
;

214 
	shiPCIV_TIME_SYNC_S


216 
timevÆ
 
°SysTime
;

217 
HI_U64
 
u64PtsBa£
;

218 
HI_U32
 
u32ReqTagId
;

219 } 
	tPCIV_TIME_SYNC_S
;

223 
	#HI_ERR_PCIV_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

225 
	#HI_ERR_PCIV_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

227 
	#HI_ERR_PCIV_EXIST
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

229 
	#HI_ERR_PCIV_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

231 
	#HI_ERR_PCIV_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

233 
	#HI_ERR_PCIV_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

235 
	#HI_ERR_PCIV_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

237 
	#HI_ERR_PCIV_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

239 
	#HI_ERR_PCIV_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

241 
	#HI_ERR_PCIV_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

243 
	#HI_ERR_PCIV_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

245 
	#HI_ERR_PCIV_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

247 
	#HI_ERR_PCIV_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

249 
	#HI_ERR_PCIV_BUSY
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

250 
	#HI_ERR_PCIV_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_PCIV
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUTT
+1)

	)

252 
	#PCIV_TRACE
(
Àvñ
, 
fmt
...)\

254 
	`HI_TRACE
(
Àvñ
, 
HI_ID_PCIV
,"[Func]:%†[Löe]:%d [Info]:", 
__FUNCTION__
, 
__LINE__
);\

255 
	`HI_TRACE
(
Àvñ
,
HI_ID_PCIV
,##
fmt
);\

256 }0)

	)

258 
	#PCIV_CHECK_CHNID
(
ChnID
)\

260 if(((
ChnID
Ë< 0Ë|| ((ChnIDË>
PCIV_MAX_CHN_NUM
))\

262 
	`PCIV_TRACE
(
HI_DBG_ERR
, "övÆid ch¿id:%d \n", 
ChnID
);\

263  
HI_ERR_PCIV_INVALID_CHNID
;\

265 }0)

	)

267 
	#PCIV_CHECK_PTR
(
±r
)\

269 if(
NULL
 =(
±r
))\

271  
HI_ERR_PCIV_NULL_PTR
;\

273 }0)

	)

276 #ifde‡
__˝lu•lus


277 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_rc.h

15 #i‚de‡
__HI_COMM_RC_H__


16 
	#__HI_COMM_RC_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


24 
HI_U32
 
	tHI_FR32
;

26 
	ehiVENC_RC_MODE_E


28 
VENC_RC_MODE_H264CBR
 = 1,

29 
VENC_RC_MODE_H264VBR
,

30 
VENC_RC_MODE_H264ABR
,

31 
VENC_RC_MODE_H264FIXQP
,

33 
VENC_RC_MODE_MJPEGCBR
,

34 
VENC_RC_MODE_MJPEGVBR
,

35 
VENC_RC_MODE_MJPEGABR
,

36 
VENC_RC_MODE_MJPEGFIXQP
,

38 
VENC_RC_MODE_MPEG4CBR
,

39 
VENC_RC_MODE_MPEG4VBR
,

40 
VENC_RC_MODE_MPEG4ABR
,

41 
VENC_RC_MODE_MPEG4FIXQP
,

43 
VENC_RC_MODE_BUTT
,

45 }
	tVENC_RC_MODE_E
;

48 
	shiVENC_ATTR_H264_FIXQP_S


50 
HI_U32
 
u32G›
;

51 
HI_U32
 
u32SrcFrmR©e
;

52 
HI_FR32
 
‰32D°FrmR©e
 ;

53 
HI_U32
 
u32IQp
;

54 
HI_U32
 
u32PQp
;

55 } 
	tVENC_ATTR_H264_FIXQP_S
;

57 
	shiVENC_ATTR_H264_CBR_S


59 
HI_U32
 
u32G›
;

60 
HI_U32
 
u32SètTime
;

61 
HI_U32
 
u32SrcFrmR©e
;

62 
HI_FR32
 
‰32D°FrmR©e
 ;

63 
HI_U32
 
u32BôR©e
;

64 
HI_U32
 
u32Flu˘u©eLevñ
;

65 } 
	tVENC_ATTR_H264_CBR_S
;

67 
	shiVENC_ATTR_H264_VBR_S


69 
HI_U32
 
u32G›
;

70 
HI_U32
 
u32SètTime
;

71 
HI_U32
 
u32SrcFrmR©e
;

72 
HI_FR32
 
‰32D°FrmR©e
 ;

73 
HI_U32
 
u32MaxBôR©e
;

74 
HI_U32
 
u32MaxQp
;

75 
HI_U32
 
u32MöQp
;

76 }
	tVENC_ATTR_H264_VBR_S
;

78 
	shiVENC_ATTR_H264_ABR_S


80 
HI_U32
 
u32G›
;

81 
HI_U32
 
u32SètTime
;

82 
HI_U32
 
u32SrcFrmR©e
;

83 
HI_FR32
 
‰32D°FrmR©e
 ;

84 
HI_U32
 
u32AvgBôR©e
;

85 
HI_U32
 
u32MaxBôR©e
;

86 }
	tVENC_ATTR_H264_ABR_S
;

88 
	shiVENC_ATTR_MPEG4_FIXQP_S


90 
HI_U32
 
u32G›
;

91 
HI_U32
 
u32SrcFrmR©e
;

92 
HI_FR32
 
‰32D°FrmR©e
 ;

93 
HI_U32
 
u32IQp
;

94 
HI_U32
 
u32PQp
;

95 }
	tVENC_ATTR_MPEG4_FIXQP_S
;

97 
	shiVENC_ATTR_MPEG4_CBR_S


99 
HI_U32
 
u32G›
;

100 
HI_U32
 
u32SètTime
;

101 
HI_U32
 
u32SrcFrmR©e
;

102 
HI_FR32
 
‰32D°FrmR©e
 ;

103 
HI_U32
 
u32BôR©e
;

104 
HI_U32
 
u32Flu˘u©eLevñ
;

105 }
	tVENC_ATTR_MPEG4_CBR_S
;

107 
	shiVENC_ATTR_MPEG4_VBR_S


109 
HI_U32
 
u32G›
;

110 
HI_U32
 
u32SètTime
;

111 
HI_U32
 
u32SrcFrmR©e
;

112 
HI_FR32
 
‰32D°FrmR©e
 ;

113 
HI_U32
 
u32MaxBôR©e
;

114 
HI_U32
 
u32MaxQp
;

115 
HI_U32
 
u32MöQp
;

116 }
	tVENC_ATTR_MPEG4_VBR_S
;

118 
	shiVENC_ATTR_MJPEG_FIXQP_S


120 
HI_U32
 
u32SrcFrmR©e
;

121 
HI_FR32
 
‰32D°FrmR©e
;

122 
HI_U32
 
u32QÁ˘‹
;

123 }
	tVENC_ATTR_MJPEG_FIXQP_S
;

125 
	shiVENC_ATTR_MJPEG_CBR_S


127 
HI_U32
 
u32SètTime
;

128 
HI_U32
 
u32SrcFrmR©e
;

129 
HI_FR32
 
‰32D°FrmR©e
 ;

130 
HI_U32
 
u32BôR©e
;

131 
HI_U32
 
u32Flu˘u©eLevñ
;

132 } 
	tVENC_ATTR_MJPEG_CBR_S
;

134 
	shiVENC_ATTR_MJPEG_VBR_S


136 
HI_U32
 
u32SètTime
;

137 
HI_U32
 
u32SrcFrmR©e
;

138 
HI_FR32
 
‰32D°FrmR©e
;

139 
HI_U32
 
u32MaxBôR©e
;

140 
HI_U32
 
u32MaxQÁ˘‹
;

141 
HI_U32
 
u32MöQÁ˘‹
;

142 }
	tVENC_ATTR_MJPEG_VBR_S
;

144 
	shiVENC_RC_ATTR_S


146 
VENC_RC_MODE_E
 
íRcMode
;

149 
VENC_ATTR_H264_CBR_S
 
°AârH264Cbr
;

150 
VENC_ATTR_H264_VBR_S
 
°AârH264Vbr
;

151 
VENC_ATTR_H264_FIXQP_S
 
°AârH264FixQp
;

152 
VENC_ATTR_H264_ABR_S
 
°AârH264Abr
;

154 
VENC_ATTR_MPEG4_CBR_S
 
°AârM≥g4Cbr
;

155 
VENC_ATTR_MPEG4_FIXQP_S
 
°AârM≥g4FixQp
;

156 
VENC_ATTR_MPEG4_VBR_S
 
°AârM≥g4Vbr
;

158 
VENC_ATTR_MJPEG_CBR_S
 
°AârMj≥geCbr
;

159 
VENC_ATTR_MJPEG_FIXQP_S
 
°AârMj≥geFixQp
;

160 
VENC_ATTR_MJPEG_VBR_S
 
°AârMj≥geVbr
;

162 
HI_VOID
* 
pRcAâr
 ;

164 }
	tVENC_RC_ATTR_S
;

166 
	ehiRC_SUPERFRM_MODE_E


168 
SUPERFRM_NONE
,

169 
SUPERFRM_DISCARD
,

170 
SUPERFRM_REENCODE
,

171 
SUPERFRM_BUTT


172 }
	tVENC_SUPERFRM_MODE_E
;

174 
	shiVENC_PARAM_H264_CBR_S


176 
HI_U32
 
u32MöI¥›
;

177 
HI_U32
 
u32MaxI¥›
;

178 
HI_U32
 
u32MaxQp
;

179 
HI_U32
 
u32MaxSèπQp
;

180 
HI_U32
 
u32MöQp
;

181 
HI_BOOL
 
bLo°FrmO≥n
;

183 
HI_U32
 
u32Lo°FrmBpsThr
;

184 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

185 
HI_U32
 
u32Su≥rIFrmBôsThr
;

187 
HI_U32
 
u32Su≥rPFrmBôsThr
;

189 
HI_S32
 
s32IPQPDñè
;

190 
HI_S32
 
s32QuÆôyLevñ
;

191 
HI_S32
 
s32MaxReEncodeTimes
;

192 
HI_U32
 
u32MöIQp
;

193 }
	tVENC_PARAM_H264_CBR_S
;

195 
	shiVENC_PARAM_H264_VBR_S


197 
HI_S32
 
s32DñèQP
;

199 
HI_S32
 
s32Ch™gePos
;

201 
HI_U32
 
u32MöI¥›
;

202 
HI_U32
 
u32MaxI¥›
;

204 
HI_BOOL
 
bLo°FrmO≥n
;

206 
HI_U32
 
u32Lo°FrmBpsThr
;

208 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

209 
HI_U32
 
u32Su≥rIFrmBôsThr
;

211 
HI_U32
 
u32Su≥rPFrmBôsThr
;

213 
HI_U32
 
u32MöIQP
;

214 }
	tVENC_PARAM_H264_VBR_S
;

218 
	shiVENC_PARAM_MJPEG_CBR_S


220 
HI_U32
 
u32MaxQÁ˘‹
;

221 
HI_U32
 
u32MöQÁ˘‹
;

223 
HI_BOOL
 
bLo°FrmO≥n
;

225 
HI_U32
 
u32Lo°FrmBpsThr
;

227 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

228 
HI_U32
 
u32Su≥rFrmBôsThr
;

230 
HI_U32
 
u32RQR©io
[8];

233 }
	tVENC_PARAM_MJPEG_CBR_S
;

235 
	shiVENC_PARAM_MJPEG_VBR_S


237 
HI_S32
 
s32DñèQÁ˘‹
;

239 
HI_S32
 
s32Ch™gePos
;

241 
HI_BOOL
 
bLo°FrmO≥n
;

243 
HI_U32
 
u32Lo°FrmBpsThr
;

245 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

247 
HI_U32
 
u32Su≥rFrmBôsThr
;

249 }
	tVENC_PARAM_MJPEG_VBR_S
;

251 
	shiVENC_PARAM_MPEG4_CBR_S


253 
HI_U32
 
u32MöI¥›
;

254 
HI_U32
 
u32MaxI¥›
;

256 
HI_U32
 
u32MaxQp
;

257 
HI_U32
 
u32MaxSèπQp
;

258 
HI_U32
 
u32MöQp
;

259 
HI_U32
 
u32MaxPPDñèQp
;

260 
HI_U32
 
u32MaxIPDñèQp
;

262 
HI_BOOL
 
bLo°FrmO≥n
;

264 
HI_U32
 
u32Lo°FrmBpsThr
;

266 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

267 
HI_U32
 
u32Su≥rIFrmBôsThr
;

269 
HI_U32
 
u32Su≥rPFrmBôsThr
;

272 
HI_S32
 
s32IPQPDñè
;

274 
HI_U32
 
u32RQR©io
[8];

276 }
	tVENC_PARAM_MPEG4_CBR_S
;

278 
	shiVENC_PARAM_MPEG4_VBR_S


280 
HI_S32
 
s32DñèQP
;

282 
HI_S32
 
s32Ch™gePos
;

285 
HI_U32
 
u32MöI¥›
;

286 
HI_U32
 
u32MaxI¥›
;

288 
HI_BOOL
 
bLo°FrmO≥n
;

290 
HI_U32
 
u32Lo°FrmBpsThr
;

292 
VENC_SUPERFRM_MODE_E
 
íSu≥rFrmMode
;

293 
HI_U32
 
u32Su≥rIFrmBôsThr
;

295 
HI_U32
 
u32Su≥rPFrmBôsThr
;

297 }
	tVENC_PARAM_MPEG4_VBR_S
;

299 
	shiVENC_RC_PARAM_S


301 
HI_U32
 
u32ThrdI
[12];

302 
HI_U32
 
u32ThrdP
[12];

303 
HI_U32
 
u32QpDñè
;

306 
VENC_PARAM_H264_CBR_S
 
°P¨amH264Cbr
;

307 
VENC_PARAM_H264_VBR_S
 
°P¨amH264VBR
;

308 
VENC_PARAM_MJPEG_CBR_S
 
°P¨amMj≥gCbr
;

309 
VENC_PARAM_MJPEG_VBR_S
 
°P¨amMj≥gVbr
;

310 
VENC_PARAM_MPEG4_CBR_S
 
°P¨amM≥g4Cbr
;

311 
VENC_PARAM_MPEG4_VBR_S
 
°P¨amM≥g4Vbr
;

314 
HI_VOID
* 
pRcP¨am
;

315 }
	tVENC_RC_PARAM_S
;

317 #ifde‡
__˝lu•lus


318 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_region.h

24 #i‚de‡
__HI_COMM_REGION_H__


25 
	#__HI_COMM_REGION_H__


	)

27 
	~"hi_comm⁄.h
"

28 
	~"hi_comm_video.h
"

29 
	~"hi_î∫o.h
"

30 
	~"hi_deföes.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


43 
HI_U32
 
	tRGN_HANDLE
;

46 
	ehiRGN_TYPE_E


48 
OVERLAY_RGN
 = 0,

49 
COVER_RGN
,

50 
COVEREX_RGN
,

51 
OVERLAYEX_RGN
,

52 
RGN_BUTT


53 } 
	tRGN_TYPE_E
;

55 
	ehiINVERT_COLOR_MODE_E


57 
LESSTHAN_LUM_THRESH
 = 0,

58 
MORETHAN_LUM_THRESH
,

59 
INVERT_COLOR_BUTT


60 }
	tINVERT_COLOR_MODE_E
;

62 
	shiOVERLAY_QP_INFO_S


64 
HI_BOOL
 
bAbsQp
;

65 
HI_S32
 
s32Qp
;

66 }
	tOVERLAY_QP_INFO_S
;

68 
	shiOVERLAY_INVERT_COLOR_S


70 
SIZE_S
 
°InvCﬁAªa
;

71 
HI_U32
 
u32LumThªsh
;

72 
INVERT_COLOR_MODE_E
 
íChgMod
;

73 
HI_BOOL
 
bInvCﬁEn
;

74 }
	tOVERLAY_INVERT_COLOR_S
;

76 
	shiOVERLAY_ATTR_S


79 
PIXEL_FORMAT_E
 
íPixñFmt
;

82 
HI_U32
 
u32BgCﬁ‹
;

85 
SIZE_S
 
°Size
;

86 }
	tOVERLAY_ATTR_S
;

88 
	shiOVERLAY_CHN_ATTR_S


91 
POINT_S
 
°Poöt
;

97 
HI_U32
 
u32FgAÕha
;

103 
HI_U32
 
u32BgAÕha
;

105 
HI_U32
 
u32Layî
;

107 
OVERLAY_QP_INFO_S
 
°QpInfo
;

109 
OVERLAY_INVERT_COLOR_S
 
°InvîtCﬁ‹
;

110 }
	tOVERLAY_CHN_ATTR_S
;

112 
	shiCOVER_CHN_ATTR_S


114 
RECT_S
 
°Re˘
;

115 
HI_U32
 
u32Cﬁ‹
;

116 
HI_U32
 
u32Layî
;

117 }
	tCOVER_CHN_ATTR_S
;

119 
	shiCOVEREX_CHN_ATTR_S


121 
RECT_S
 
°Re˘
;

122 
HI_U32
 
u32Cﬁ‹
;

123 
HI_U32
 
u32Layî
;

124 }
	tCOVEREX_CHN_ATTR_S
;

126 
	shiOVERLAYEX_COMM_ATTR_S


128 
PIXEL_FORMAT_E
 
íPixñFmt
;

131 
HI_U32
 
u32BgCﬁ‹
;

134 
SIZE_S
 
°Size
;

135 }
	tOVERLAYEX_ATTR_S
;

137 
	shiOVERLAYEX_CHN_ATTR_S


140 
POINT_S
 
°Poöt
;

146 
HI_U32
 
u32FgAÕha
;

152 
HI_U32
 
u32BgAÕha
;

154 
HI_U32
 
u32Layî
;

155 }
	tOVERLAYEX_CHN_ATTR_S
;

157 
	uhiRGN_ATTR_U


159 
OVERLAY_ATTR_S
 
°Ovîœy
;

160 
OVERLAYEX_ATTR_S
 
°OvîœyEx
;

161 } 
	tRGN_ATTR_U
;

163 
	uhiRGN_CHN_ATTR_U


165 
OVERLAY_CHN_ATTR_S
 
°OvîœyChn
;

166 
COVER_CHN_ATTR_S
 
°CovîChn
;

167 
COVEREX_CHN_ATTR_S
 
°CovîExChn
;

168 
OVERLAYEX_CHN_ATTR_S
 
°OvîœyExChn
;

169 } 
	tRGN_CHN_ATTR_U
;

172 
	shiRGN_ATTR_S


174 
RGN_TYPE_E
 
íTy≥
;

175 
RGN_ATTR_U
 
unAâr
;

176 } 
	tRGN_ATTR_S
;

179 
	shiRGN_CHN_ATTR_S


181 
HI_BOOL
 
bShow
;

182 
RGN_TYPE_E
 
íTy≥
;

183 
RGN_CHN_ATTR_U
 
unChnAâr
;

184 } 
	tRGN_CHN_ATTR_S
;

188 
	#RGN_MAX_BMP_UPDATE_NUM
 16

	)

190 
	shiRGN_BMP_UPDATE_S


192 
POINT_S
 
°Poöt
;

193 
BITMAP_S
 
°Bmp
;

194 
HI_U32
 
u32Såide
;

195 } 
	tRGN_BMP_UPDATE_S
;

197 
	shiRGN_BMP_UPDATE_CFG_S


199 
HI_U32
 
u32BmpC¡
;

200 
RGN_BMP_UPDATE_S
 
a°BmpUpd©e
[
RGN_MAX_BMP_UPDATE_NUM
];

201 } 
	tRGN_BMP_UPDATE_CFG_S
;

203 
	shiRGN_CANVAS_INFO_S


205 
HI_U32
 
u32PhyAddr
;

206 
HI_U32
 
u32VútAddr
;

207 
SIZE_S
 
°Size
;

208 
HI_U32
 
u32Såide
;

209 
PIXEL_FORMAT_E
 
íPixñFmt
;

210 } 
	tRGN_CANVAS_INFO_S
;

215 
	#HI_ERR_RGN_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

217 
	#HI_ERR_RGN_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

219 
	#HI_ERR_RGN_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

221 
	#HI_ERR_RGN_EXIST
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

223 
	#HI_ERR_RGN_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

225 
	#HI_ERR_RGN_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

227 
	#HI_ERR_RGN_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

229 
	#HI_ERR_RGN_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

231 
	#HI_ERR_RGN_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

233 
	#HI_ERR_RGN_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

235 
	#HI_ERR_RGN_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

237 
	#HI_ERR_RGN_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

239 
	#HI_ERR_RGN_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

241 
	#HI_ERR_RGN_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

243 
	#HI_ERR_RGN_BUSY
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

248 
	#HI_ERR_RGN_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_RGN
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

251 #ifde‡
__˝lu•lus


252 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_sys.h

29 #i‚de‡
__HI_COMM_SYS_H__


30 
	#__HI_COMM_SYS_H__


	)

32 
	~"hi_ty≥.h
"

33 
	~"hi_î∫o.h
"

34 
	~"hi_debug.h
"

36 #ifde‡
__˝lu•lus


37 #i‡
__˝lu•lus


42 
	#HI_TRACE_SYS
(
Àvñ
, 
fmt
...Ë
	`HI_TRACE
÷evñ, 
HI_ID_SYS
,##fmt)

	)

43 
	shiMPP_SYS_CONF_S


48 
HI_U32
 
u32AlignWidth
;

50 }
	tMPP_SYS_CONF_S
;

53 
	#HI_ERR_SYS_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

54 
	#HI_ERR_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

55 
	#HI_ERR_SYS_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

56 
	#HI_ERR_SYS_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

57 
	#HI_ERR_SYS_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

58 
	#HI_ERR_SYS_BUSY
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

59 
	#HI_ERR_SYS_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_SYS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

62 #ifde‡
__˝lu•lus


63 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vb.h

32 #i‚de‡
__HI_COMM_VB_H__


33 
	#__HI_COMM_VB_H__


	)

35 
	~"hi_ty≥.h
"

36 
	~"hi_î∫o.h
"

37 
	~"hi_debug.h
"

39 #ifde‡
__˝lu•lus


40 #i‡
__˝lu•lus


45 
	#VB_MAX_POOLS
 256

	)

46 
	#VB_MAX_COMM_POOLS
 16

	)

47 
	#VB_MAX_MOD_COMM_POOLS
 16

	)

51 
	#VB_MAX_USER
 21

	)

53 
	ehiVB_UID_E


55 
VB_UID_VIU
 = 0,

56 
VB_UID_VOU
 = 1,

57 
VB_UID_VGS
 = 2,

58 
VB_UID_VENC
 = 3,

59 
VB_UID_VDEC
 = 4,

60 
VB_UID_VDA
 = 5,

61 
VB_UID_H264E
 = 6,

62 
VB_UID_JPEGE
 = 7,

63 
VB_UID_MPEG4E
 = 8,

64 
VB_UID_H264D
 = 9,

65 
VB_UID_JPEGD
 = 10,

66 
VB_UID_MPEG4D
 = 11,

67 
VB_UID_VPSS
 = 12,

68 
VB_UID_GRP
 = 13,

69 
VB_UID_MPI
 = 14,

70 
VB_UID_PCIV
 = 15,

71 
VB_UID_AI
 = 16,

72 
VB_UID_AENC
 = 17,

73 
VB_UID_RC
 = 18,

74 
VB_UID_VFMW
 = 19,

75 
VB_UID_USER
 = 20,

76 
VB_UID_BUTT


78 } 
	tVB_UID_E
;

80 
	#VB_INVALID_POOLID
 (-1UL)

	)

81 
	#VB_INVALID_HANDLE
 (-1UL)

	)

84 
	#POOL_OWNER_COMMON
 -1

	)

87 
	#POOL_OWNER_PRIVATE
 -2

	)

89 
	ehiPOOL_TYPE_E


91 
POOL_TYPE_COMMON
 = 0,

92 
POOL_TYPE_PRIVATE
 = 1,

93 
POOL_TYPE_MODULE_COMMON
 = 2,

94 
POOL_TYPE_BUTT


95 } 
	tPOOL_TYPE_E
;

97 
HI_U32
 
	tVB_POOL
;

98 
HI_U32
 
	tVB_BLK
;

100 
	#RESERVE_MMZ_NAME
 "wödow"

	)

102 
	shiVB_CONF_S


104 
HI_U32
 
u32MaxPoﬁC¡
;

105 
	shiVB_CPOOL_S


107 
HI_U32
 
u32BlkSize
;

108 
HI_U32
 
u32BlkC¡
;

109 
HI_CHAR
 
acMmzName
[
MAX_MMZ_NAME_LEN
];

110 }
a°CommPoﬁ
[
VB_MAX_COMM_POOLS
];

111 } 
	tVB_CONF_S
;

113 
	shiVB_POOL_STATUS_S


115 
HI_U32
 
bIsCommPoﬁ
;

116 
HI_U32
 
u32BlkC¡
;

117 
HI_U32
 
u32FªeBlkC¡
;

118 }
	tVB_POOL_STATUS_S
;

120 
	#HI_ERR_VB_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

121 
	#HI_ERR_VB_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

122 
	#HI_ERR_VB_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

123 
	#HI_ERR_VB_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

124 
	#HI_ERR_VB_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

125 
	#HI_ERR_VB_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

126 
	#HI_ERR_VB_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

127 
	#HI_ERR_VB_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

129 
	#HI_ERR_VB_2MPOOLS
 
	`HI_DEF_ERR
(
HI_ID_VB
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUTT
 + 1)

	)

131 
	#HI_TRACE_VB
(
Àvñ
,
fmt
...Ë
	`HI_TRACE
÷evñ, 
HI_ID_VB
,##fmt)

	)

133 #ifde‡
__˝lu•lus


134 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vda.h

23 #i‚de‡
__HI_COMM_VDA_H__


24 
	#__HI_COMM_VDA_H__


	)

26 
	~"hi_ty≥.h
"

27 
	~"hi_debug.h
"

28 
	~"hi_comm_video.h
"

29 
	~"hi_comm⁄.h
"

30 
	~"hi_î∫o.h
"

31 
	~"hi_deföes.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


41 
	shiVDA_OBJ_S


43 
HI_U16
 
u16Le·
;

44 
HI_U16
 
u16T›
;

45 
HI_U16
 
u16Right
;

46 
HI_U16
 
u16BŸtom
;

47 }
	tVDA_OBJ_S
;

50 
	ehiVDA_REF_MODE_E


52 
VDA_REF_MODE_DYNAMIC
 = 0,

53 
VDA_REF_MODE_STATIC
,

54 
VDA_REF_MODE_USER
,

55 
VDA_REF_MODE_BUTT


56 }
	tVDA_REF_MODE_E
;

59 
	ehiVDA_ALG_E


61 
VDA_ALG_BG
 = 0,

62 
VDA_ALG_REF
,

63 
VDA_ALG_BUTT


64 }
	tVDA_ALG_E
;

67 
	ehiVDA_MB_SIZE_E


69 
VDA_MB_8PIXEL
,

70 
VDA_MB_16PIXEL
,

71 
VDA_MB_BUTT


72 }
	tVDA_MB_SIZE_E
;

75 
	ehiVDA_MB_SADBITS_E


77 
VDA_MB_SAD_8BIT
 = 0,

78 
VDA_MB_SAD_16BIT
,

79 
VDA_MB_SAD_BUTT


80 } 
	tVDA_MB_SADBITS_E
;

84 
	shiVDA_OD_RGN_ATTR_S


87 
RECT_S
 
°Re˘
;

97 
HI_U32
 
u32SadTh
;

98 
HI_U32
 
u32AªaTh
;

99 
HI_U32
 
u32OccC¡Th
;

100 
HI_U32
 
u32UnOccC¡Th
;

101 }
	tVDA_OD_RGN_ATTR_S
;

104 
	shiVDA_MD_ATTR_S


107 
VDA_ALG_E
 
íVdaAlg
;

108 
VDA_MB_SIZE_E
 
íMbSize
;

109 
VDA_MB_SADBITS_E
 
íMbSadBôs
;

110 
VDA_REF_MODE_E
 
íRefMode
;

111 
HI_U32
 
u32MdBufNum
;

114 
HI_U32
 
u32VdaI¡vl
;

116 
HI_U32
 
u32BgUpSrcWgt
;

121 
HI_U32
 
u32SadTh
;

122 
HI_U32
 
u32ObjNumMax
;

123 }
	tVDA_MD_ATTR_S
;

126 
	#VDA_OD_RGN_NUM_MAX
 4

	)

129 
	shiVDA_OD_ATTR_S


131 
HI_U32
 
u32RgnNum
;

132 
VDA_OD_RGN_ATTR_S
 
a°OdRgnAâr
[
VDA_OD_RGN_NUM_MAX
];

135 
VDA_ALG_E
 
íVdaAlg
;

136 
VDA_MB_SIZE_E
 
íMbSize
;

137 
VDA_MB_SADBITS_E
 
íMbSadBôs
;

138 
VDA_REF_MODE_E
 
íRefMode
;

141 
HI_U32
 
u32VdaI¡vl
;

142 
HI_U32
 
u32BgUpSrcWgt
;

145 }
	tVDA_OD_ATTR_S
;

149 
	ehiVDA_WORK_MODE_E


151 
VDA_WORK_MODE_MD
 = 0,

152 
VDA_WORK_MODE_OD
,

153 
VDA_WORK_MODE_BUTT


154 }
	tVDA_WORK_MODE_E
;

158 
	uhiVDA_WORK_MODE_ATTR_U


160 
VDA_MD_ATTR_S
 
°MdAâr
;

161 
VDA_OD_ATTR_S
 
°OdAâr
;

162 }
	tVDA_WORK_MODE_ATTR_U
;

166 
	shiVDA_CHN_ATTR_S


168 
VDA_WORK_MODE_E
 
íW‹kMode
;

169 
VDA_WORK_MODE_ATTR_U
 
unAâr
;

170 
HI_U32
 
u32Width
;

171 
HI_U32
 
u32Height
;

172 }
	tVDA_CHN_ATTR_S
;

176 
	shiVDA_MB_SAD_DATA_S


178 
HI_VOID
 *
pAddr
;

179 
HI_U32
 
u32Såide
;

180 
VDA_MB_SADBITS_E
 
íMbSadBôs
;

181 }
	tVDA_MB_SAD_DATA_S
;

184 
	shiVDA_OBJ_DATA_S


186 
HI_U32
 
u32ObjNum
;

187 
VDA_OBJ_S
 *
p°Addr
;

189 
HI_U32
 
u32IndexOfMaxObj
;

190 
HI_U32
 
u32SizeOfMaxObj
;

191 
HI_U32
 
u32SizeOfTŸÆObj
;

192 }
	tVDA_OBJ_DATA_S
;

196 
	shiVDA_MD_DATA_S


198 
HI_BOOL
 
bMbSadVÆid
;

199 
VDA_MB_SAD_DATA_S
 
°MbSadD©a
;

201 
HI_BOOL
 
bObjVÆid
;

202 
VDA_OBJ_DATA_S
 
°ObjD©a
;

204 
HI_BOOL
 
bPñsNumVÆid
;

205 
HI_U32
 
u32AœrmPixC¡
;

206 }
	tVDA_MD_DATA_S
;

210 
	shiVDA_OD_DATA_S


212 
HI_U32
 
u32RgnNum
;

213 
HI_BOOL
 
abRgnAœrm
[
VDA_OD_RGN_NUM_MAX
];

214 }
	tVDA_OD_DATA_S
;

218 
	uhiVDA_DATA_U


220 
VDA_MD_DATA_S
 
°MdD©a
;

221 
VDA_OD_DATA_S
 
°OdD©a
;

222 }
	tVDA_DATA_U
;

226 
	shiVDA_DATA_S


228 
VDA_WORK_MODE_E
 
íW‹kMode
;

229 
VDA_DATA_U
 
unD©a
;

230 
VDA_MB_SIZE_E
 
íMbSize
;

231 
HI_U32
 
u32MbWidth
;

232 
HI_U32
 
u32MbHeight
;

233 
HI_U64
 
u64Pts
;

234 }
	tVDA_DATA_S
;

238 
	shiVDA_CHN_STAT_S


240 
HI_BOOL
 
bSèπRecvPic
;

241 
HI_U32
 
u32Le·Pic
;

242 
HI_U32
 
u32Le·R°
;

243 }
	tVDA_CHN_STAT_S
;

246 
	#HI_ERR_VDA_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

248 
	#HI_ERR_VDA_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

250 
	#HI_ERR_VDA_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

252 
	#HI_ERR_VDA_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

254 
	#HI_ERR_VDA_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

256 
	#HI_ERR_VDA_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

258 
	#HI_ERR_VDA_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

260 
	#HI_ERR_VDA_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

262 
	#HI_ERR_VDA_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

264 
	#HI_ERR_VDA_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

266 
	#HI_ERR_VDA_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

268 
	#HI_ERR_VDA_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

270 
	#HI_ERR_VDA_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

272 
	#HI_ERR_VDA_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

274 
	#HI_ERR_VDA_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

279 
	#HI_ERR_VDA_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VDA
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

281 #ifde‡
__˝lu•lus


282 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vdec.h

18 #i‚de‡ 
__HI_COMM_VDEC_H__


19 
	#__HI_COMM_VDEC_H__


	)

20 
	~"hi_ty≥.h
"

21 
	~"hi_comm⁄.h
"

22 
	~"hi_î∫o.h
"

23 
	~"hi_comm_video.h
"

24 
	~"hi_deföes.h
"

26 #ifde‡
__˝lu•lus


27 #i‡
__˝lu•lus


34 
	#HI_IO_BLOCK
 
HI_TRUE


	)

35 
	#HI_IO_NOBLOCK
 
HI_FALSE


	)

38 
	shiVDEC_CHN_LUM_S


40 
HI_U64
 
u64LumPixSum
;

41 
HI_U32
 
u32LumPixAvîage
;

42 
HI_U64
 
u64Pts
;

43 } 
	tVDEC_CHN_LUM_S
;

46 
	ehiVIDEO_MODE_E


48 
VIDEO_MODE_STREAM
 = 0,

49 
VIDEO_MODE_FRAME
 ,

50 
VIDEO_MODE_BUTT


51 }
	tVIDEO_MODE_E
;

54 
	shiVDEC_ATTR_JPEG_S


56 
VIDEO_MODE_E
 
íMode
;

57 }
	tVDEC_ATTR_JPEG_S
,*
	tPTR_VDEC_ATTR_JPEG_S
;

60 
	shiVDEC_ATTR_VIDEO_S


62 
HI_U32
 
u32RefFømeNum
;

63 
VIDEO_MODE_E
 
íMode
;

64 
HI_S32
 
s32Suµ‹tBFøme
;

65 }
	tVDEC_ATTR_VIDEO_S
,*
	tPTR_VDEC_ATTR_VIDEO_S
;

68 
	shiVDEC_CHN_ATTR_S


70 
PAYLOAD_TYPE_E
 
íTy≥
;

71 
HI_U32
 
u32BufSize
 ;

72 
HI_U32
 
u32Pri‹ôy
 ;

73 
HI_U32
 
u32PicWidth
 ;

74 
HI_U32
 
u32PicHeight
 ;

77 
VDEC_ATTR_JPEG_S
 
°VdecJ≥gAâr
;

78 
VDEC_ATTR_VIDEO_S
 
°VdecVideoAâr
;

80 }
	tVDEC_CHN_ATTR_S
;

83 
	shiVDEC_STREAM_S


85 
HI_U8
* 
pu8Addr
;

86 
HI_U32
 
u32Lí
;

87 
HI_U64
 
u64PTS
;

88 
HI_BOOL
 
bEndOfFøme
;

89 
HI_BOOL
 
bEndOfSåóm
;

90 }
	tVDEC_STREAM_S
;

92 
	shiVDEC_USERDATA_S
{

93 
HI_U8
* 
pu8Addr
;

94 
HI_U32
 
u32PhyAddr
;

95 
HI_U32
 
u32Lí
;

96 
HI_BOOL
 
bVÆid
;

97 }
	tVDEC_USERDATA_S
;

100 
	shi_VDEC_DECODE_ERROR_S


102 
HI_S32
 
s32F‹m©Eº
;

103 
HI_S32
 
s32PicSizeEºSë
;

104 
HI_S32
 
s32SåómUn•π
;

105 
HI_S32
 
s32PackEº
;

106 
HI_S32
 
s32Pπ˛NumEºSë
;

107 
HI_S32
 
s32RefEºSë
;

108 
HI_S32
 
s32PicBufSizeEºSë
;

109 }
	tVDEC_DECODE_ERROR_S
;

112 
	shiVDEC_CHN_STAT_S


114 
PAYLOAD_TYPE_E
 
íTy≥
;

115 
HI_U32
 
u32Le·SåómByãs
;

116 
HI_U32
 
u32Le·SåómFømes
;

117 
HI_U32
 
u32Le·Pics
;

118 
HI_BOOL
 
bSèπRecvSåóm
;

119 
HI_U32
 
u32RecvSåómFømes
;

120 
HI_U32
 
u32DecodeSåómFømes
;

121 
VDEC_DECODE_ERROR_S
 
°VdecDecEº
;

122 }
	tVDEC_CHN_STAT_S
;

128 
	shiVDEC_CHN_PARAM_S


130 
HI_S32
 
s32Ch™EºThr
;

131 
HI_S32
 
s32Ch™SåmOFThr
;

132 
HI_S32
 
s32DecMode
;

133 
HI_S32
 
s32DecOrdîOuçut
;

134 
VIDEO_FORMAT_E
 
íVideoF‹m©
;

135 
COMPRESS_MODE_E
 
íCom¥essMode
;

136 }
	tVDEC_CHN_PARAM_S
;

138 
	shiVDEC_PRTCL_PARAM_S


140 
HI_S32
 
s32MaxSli˚Num
;

141 
HI_S32
 
s32MaxSpsNum
;

142 
HI_S32
 
s32MaxPpsNum
;

143 
HI_S32
 
s32Di•œyFømeNum
;

144 }
	tVDEC_PRTCL_PARAM_S
;

150 
	shiJPEGD_STREAM_PACKET_S


152 
HI_U32
 
PhyAddr
[2];

153 
HI_VOID
* 
VúAddr
[2];

154 
HI_U32
 
Lígth
[2];

155 
HI_U64
 
Pts
;

156 
HI_U32
 
Index
;

158 } 
	tUSR_STREAM_PACKET_S
;

161 
	shiUSR_MEM_DESC_S


163 
HI_U32
 
u32PhyAddr
;

164 
HI_U32
 
u32Lígth
;

165 } 
	tUSR_MEM_DESC_S
;

167 
	ehiJPEGD_DECODE_ERROR_E


169 
JPEGD_ERR_NONE
 = 0,

170 
JPEGD_ERR_STREAM
,

171 
JPEGD_ERR_PIC_SIZE
,

172 
JPEGD_ERR_PICBUF_SIZE
,

173 
JPEGD_ERR_FORMAT
,

174 
VIDEO_ERR_BULL


175 }
	tJPEGD_DECODE_ERROR_E
;

178 
	ehiVDEC_JPG_COLOR_FMT_E


180 
JPG_COLOR_FMT_YCBCR400
,

181 
JPG_COLOR_FMT_YCBCR420
 = 3,

182 
JPG_COLOR_FMT_YCBCR422BHP
,

183 
JPG_COLOR_FMT_YCBCR422BVP
,

184 
JPG_COLOR_FMT_YCBCR444
,

185 
JPG_COLOR_FMT_BUTT


186 } 
	tVDEC_JPG_COLOR_FMT_E
;

190 
VDEC_JPG_COLOR_FMT_E
 
íFmt
;

192 
HI_S32
 
s32IsFømeVÆid
;

193 
HI_U64
 
u64LuPixSum
;

194 
HI_U64
 
Pts
;

195 
HI_S32
 
s32IsSemiPœ«r
;

197 
HI_S32
 
s32YWidth
;

198 
HI_S32
 
s32YHeight
;

200 
HI_S32
 
s32LumaPhyAddr
;

201 
HI_S32
 
s32LumaSåide
;

203 
HI_S32
 
s32CbPhyAddr
;

204 
HI_S32
 
s32CrPhyAddr
;

205 
HI_S32
 
s32ChromSåide
;

206 
HI_S32
 
s32ChromCrSåide
;

207 } 
	tVDEC_FRAME_DESC_S
;

212 
	#HI_ERR_VDEC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

214 
	#HI_ERR_VDEC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

216 
	#HI_ERR_VDEC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

218 
	#HI_ERR_VDEC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

220 
	#HI_ERR_VDEC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

222 
	#HI_ERR_VDEC_NOT_SURPPORT
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

224 
	#HI_ERR_VDEC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

226 
	#HI_ERR_VDEC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

228 
	#HI_ERR_VDEC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

230 
	#HI_ERR_VDEC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

232 
	#HI_ERR_VDEC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

234 
	#HI_ERR_VDEC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

236 
	#HI_ERR_VDEC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

238 
	#HI_ERR_VDEC_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

241 
	#HI_ERR_VDEC_BADADDR
 
	`HI_DEF_ERR
(
HI_ID_VDEC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BADADDR
)

	)

249 #ifde‡
__˝lu•lus


250 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_venc.h

15 #i‚de‡
__HI_COMM_VENC_H__


16 
	#__HI_COMM_VENC_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


24 
	~"hi_ty≥.h
"

25 
	~"hi_comm⁄.h
"

26 
	~"hi_î∫o.h
"

27 
	~"hi_comm_video.h
"

28 
	~"hi_comm_rc.h
"

31 
	#HI_ERR_VENC_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

33 
	#HI_ERR_VENC_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

35 
	#HI_ERR_VENC_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

37 
	#HI_ERR_VENC_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

39 
	#HI_ERR_VENC_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

41 
	#HI_ERR_VENC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

43 
	#HI_ERR_VENC_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

45 
	#HI_ERR_VENC_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

47 
	#HI_ERR_VENC_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

49 
	#HI_ERR_VENC_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

51 
	#HI_ERR_VENC_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

53 
	#HI_ERR_VENC_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

55 
	#HI_ERR_VENC_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

57 
	#HI_ERR_VENC_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VENC
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

61 
	ehiH264E_NALU_TYPE_E


63 
H264E_NALU_PSLICE
 = 1,

64 
H264E_NALU_ISLICE
 = 5,

65 
H264E_NALU_SEI
 = 6,

66 
H264E_NALU_SPS
 = 7,

67 
H264E_NALU_PPS
 = 8,

68 
H264E_NALU_BUTT


69 } 
	tH264E_NALU_TYPE_E
;

72 
	ehiH264E_REFSLICE_TYPE_E


74 
H264E_REFSLICE_FOR_1X
 = 1,

75 
H264E_REFSLICE_FOR_2X
 = 2,

76 
H264E_REFSLICE_FOR_4X
 = 5,

77 
H264E_REFSLICE_FOR_BUTT


78 } 
	tH264E_REFSLICE_TYPE_E
;

81 
	ehiJPEGE_PACK_TYPE_E


83 
JPEGE_PACK_ECS
 = 5,

84 
JPEGE_PACK_APP
 = 6,

85 
JPEGE_PACK_VDO
 = 7,

86 
JPEGE_PACK_PIC
 = 8,

87 
JPEGE_PACK_BUTT


88 } 
	tJPEGE_PACK_TYPE_E
;

91 
	ehiMPEG4E_PACK_TYPE_E


93 
MPEG4E_PACK_VOP_P
 = 1,

94 
MPEG4E_PACK_VOP_I
 = 5,

95 
MPEG4E_PACK_VOS
 = 6,

96 
MPEG4E_PACK_VO
 = 7,

97 
MPEG4E_PACK_VOL
 = 8,

98 
MPEG4E_PACK_GVOP
 = 9

99 } 
	tMPEG4E_PACK_TYPE_E
;

102 
	uhiVENC_DATA_TYPE_U


104 
H264E_NALU_TYPE_E
 
íH264ETy≥
;

105 
JPEGE_PACK_TYPE_E
 
íJPEGETy≥
;

106 
MPEG4E_PACK_TYPE_E
 
íMPEG4ETy≥
;

107 }
	tVENC_DATA_TYPE_U
;

109 
	shiVENC_PACK_S


111 
HI_U32
 
u32PhyAddr
;

112 
HI_U8
 *
pu8Addr
;

113 
HI_U32
 
u32Lí
;

115 
HI_U64
 
u64PTS
;

116 
HI_BOOL
 
bFømeEnd
;

118 
VENC_DATA_TYPE_U
 
D©aTy≥
;

119 
HI_U32
 
u32Off£t
;

120 }
	tVENC_PACK_S
;

122 
	ehiH264E_REF_TYPE_E


124 
BASE_IDRSLICE
 = 0,

125 
BASE_PSLICE_REFBYBASE
,

126 
BASE_PSLICE_REFBYENHANCE
,

127 
ENHANCE_PSLICE_REFBYENHANCE
,

128 
ENHANCE_PSLICE_NOTFORREF
,

129 
ENHANCE_PSLICE_BUTT


130 } 
	tH264E_REF_TYPE_E
;

132 
	shiVENC_STREAM_INFO_H264_S


134 
HI_U32
 
u32PicByãsNum
;

135 
HI_U32
 
u32PSkùMbNum
;

136 
HI_U32
 
u32IpcmMbNum
;

137 
HI_U32
 
u32I¡î16x8MbNum
;

138 
HI_U32
 
u32I¡î16x16MbNum
;

139 
HI_U32
 
u32I¡î8x16MbNum
;

140 
HI_U32
 
u32I¡î8x8MbNum
;

141 
HI_U32
 
u32I¡ø16MbNum
;

142 
HI_U32
 
u32I¡ø8MbNum
;

143 
HI_U32
 
u32I¡ø4MbNum
;

145 
H264E_REFSLICE_TYPE_E
 
íRefSli˚Ty≥
;

146 
H264E_REF_TYPE_E
 
íRefTy≥
;

147 
HI_U32
 
u32Upd©eAârC¡
;

148 }
	tVENC_STREAM_INFO_H264_S
;

150 
	shiVENC_STREAM_INFO_JPEG_S


152 
HI_U32
 
u32PicByãsNum
;

153 
HI_U32
 
u32Upd©eAârC¡
;

154 
HI_U32
 
u32QÁ˘‹
;

155 }
	tVENC_STREAM_INFO_JPEG_S
;

157 
	shiVENC_STREAM_INFO_MPEG4_S


159 
HI_U32
 
u32PicByãsNum
;

160 
HI_U32
 
u32Upd©eAârC¡
;

161 }
	tVENC_STREAM_INFO_MPEG4_S
;

163 
	shiVENC_STREAM_S


165 
VENC_PACK_S
 *
p°Pack
;

166 
HI_U32
 
u32PackCou¡
;

167 
HI_U32
 
u32Seq
;

171 
VENC_STREAM_INFO_H264_S
 
°H264Info
;

172 
VENC_STREAM_INFO_JPEG_S
 
°J≥gInfo
;

173 
VENC_STREAM_INFO_MPEG4_S
 
°M≥g4Info
;

175 }
	tVENC_STREAM_S
;

177 
	shiVENC_ATTR_H264_S


179 
HI_U32
 
u32MaxPicWidth
;

180 
HI_U32
 
u32MaxPicHeight
;

182 
HI_U32
 
u32BufSize
;

183 
HI_U32
 
u32Profûe
;

184 
HI_BOOL
 
bByFøme
;

187 
HI_U32
 
u32PicWidth
;

188 
HI_U32
 
u32PicHeight
;

189 }
	tVENC_ATTR_H264_S
;

191 
	shiVENC_ATTR_MJPEG_S


193 
HI_U32
 
u32MaxPicWidth
;

194 
HI_U32
 
u32MaxPicHeight
;

195 
HI_U32
 
u32BufSize
;

196 
HI_BOOL
 
bByFøme
;

199 
HI_U32
 
u32PicWidth
;

200 
HI_U32
 
u32PicHeight
;

202 }
	tVENC_ATTR_MJPEG_S
;

204 
	shiVENC_ATTR_JPEG_S


206 
HI_U32
 
u32MaxPicWidth
;

207 
HI_U32
 
u32MaxPicHeight
;

208 
HI_U32
 
u32BufSize
;

209 
HI_BOOL
 
bByFøme
;

212 
HI_U32
 
u32PicWidth
;

213 
HI_U32
 
u32PicHeight
;

215 }
	tVENC_ATTR_JPEG_S
;

218 
	shiVENC_ATTR_MPEG4_S


220 
HI_U32
 
u32MaxPicWidth
;

221 
HI_U32
 
u32MaxPicHeight
;

223 
HI_U32
 
u32BufSize
;

224 
HI_BOOL
 
bByFøme
;

227 
HI_U32
 
u32PicWidth
;

228 
HI_U32
 
u32PicHeight
;

229 }
	tVENC_ATTR_MPEG4_S
;

231 
	shiVENC_ATTR_S


233 
PAYLOAD_TYPE_E
 
íTy≥
;

236 
VENC_ATTR_H264_S
 
°AârH264e
;

237 
VENC_ATTR_MJPEG_S
 
°AârMj≥g
;

238 
VENC_ATTR_JPEG_S
 
°AârJ≥g
;

239 
VENC_ATTR_MPEG4_S
 
°AârM≥g4
;

241 }
	tVENC_ATTR_S
;

243 
	shiVENC_CHN_ATTR_S


245 
VENC_ATTR_S
 
°VeAâr
;

246 
VENC_RC_ATTR_S
 
°RcAâr
;

247 }
	tVENC_CHN_ATTR_S
;

249 
	shiVENC_CHN_STAT_S


251 
HI_U32
 
u32Le·Pics
;

252 
HI_U32
 
u32Le·SåómByãs
;

253 
HI_U32
 
u32Le·SåómFømes
;

254 
HI_U32
 
u32CurPacks
;

255 
HI_U32
 
u32Le·RecvPics
;

256 
HI_U32
 
u32Le·EncPics
;

257 }
	tVENC_CHN_STAT_S
;

261 
	shiVENC_PARAM_H264_SLICE_SPLIT_S


263 
HI_BOOL
 
bS∂ôE«bÀ
;

264 
HI_U32
 
u32S∂ôMode
;

265 
HI_U32
 
u32Sli˚Size
;

267 } 
	tVENC_PARAM_H264_SLICE_SPLIT_S
;

269 
	shiVENC_PARAM_H264_MCTF_S


271 
HI_BOOL
 
bI‰ameE«bÀ
;

272 
HI_BOOL
 
bSèticE«bÀ
;

273 
HI_U32
 
u32SèticSåígth
;

274 
HI_BOOL
 
bMoveE«bÀ
;

275 
HI_U32
 
u32MoveSåígth
;

276 }
	tVENC_PARAM_H264_MCTF_S
;

278 
	shiVENC_PARAM_H264_INTER_PRED_S


281 
HI_U32
 
u32HWSize
;

283 
HI_U32
 
u32VWSize
;

287 
HI_BOOL
 
bI¡î16x16PªdEn
;

288 
HI_BOOL
 
bI¡î16x8PªdEn
;

289 
HI_BOOL
 
bI¡î8x16PªdEn
;

290 
HI_BOOL
 
bI¡î8x8PªdEn
;

291 
HI_BOOL
 
bExãdgeEn
;

292 } 
	tVENC_PARAM_H264_INTER_PRED_S
;

294 
	shiVENC_PARAM_H264_INTRA_PRED_S


297 
HI_BOOL
 
bI¡ø16x16PªdEn
;

298 
HI_BOOL
 
bI¡øNxNPªdEn
;

300 
HI_U32
 
c⁄°øöed_öåa_¥ed_Êag
;

301 
HI_BOOL
 
bIpcmEn
;

302 }
	tVENC_PARAM_H264_INTRA_PRED_S
;

304 
	shiVENC_PARAM_H264E_TRANS_S


306 
HI_U32
 
u32I¡øTønsMode
;

307 
HI_U32
 
u32I¡îTønsMode
;

309 
HI_BOOL
 
bSˇlögLi°VÆid
;

311 
HI_U8
 
I¡îSˇlögLi°8X8
[64];

312 
HI_U8
 
I¡øSˇlögLi°8X8
[64];

314 
HI_S32
 
chroma_qp_ödex_off£t
;

315 }
	tVENC_PARAM_H264_TRANS_S
;

317 
	shiVENC_PARAM_H264E_ENTROPY_S


319 
HI_U32
 
u32E¡r›yEncModeI
;

320 
HI_U32
 
u32E¡r›yEncModeP
;

321 
HI_U32
 
ˇbac_°uff_í
;

322 
HI_U32
 
Cabac_öô_idc
;

323 }
	tVENC_PARAM_H264_ENTROPY_S
;

325 
	shiVENC_PARAM_H264_POC_S


327 
HI_U32
 
pic_‹dî_˙t_ty≥
;

329 }
	tVENC_PARAM_H264_POC_S
;

331 
	shiVENC_PARAM_H264E_DBLK_S


333 
HI_U32
 
dißbÀ_deblockög_fûãr_idc
;

334 
HI_S32
 
¶i˚_Æpha_c0_off£t_div2
;

335 
HI_S32
 
¶i˚_bëa_off£t_div2
;

336 }
	tVENC_PARAM_H264_DBLK_S
;

339 
	shiVENC_PARAM_H264E_RDO_S


341 
HI_U16
 
u16H264ERDOS
[14];

342 }
	tVENC_PARAM_H264E_RDO_S
;

345 
	shiVENC_PARAM_H264E_VUI_S


347 
HI_S32
 
timög_öfo_¥e£¡_Êag
;

348 
HI_S32
 
num_unôs_ö_tick
;

349 
HI_S32
 
time_sˇÀ
;

350 
HI_S32
 
fixed_‰ame_øã_Êag
;

351 }
	tVENC_PARAM_H264_VUI_S
;

353 
	shiVENC_PARAM_JPEG_S


355 
HI_U32
 
u32QÁ˘‹
;

357 
HI_U8
 
u8YQt
[64];

358 
HI_U8
 
u8CbQt
[64];

359 
HI_U8
 
u8CrQt
[64];

361 
HI_U32
 
u32MCUPîECS
;

362 } 
	tVENC_PARAM_JPEG_S
;

364 
	shiVENC_PARAM_MJPEG_S


366 
HI_U8
 
u8YQt
[64];

367 
HI_U8
 
u8CbQt
[64];

368 
HI_U8
 
u8CrQt
[64];

370 
HI_U32
 
u32MCUPîECS
;

371 } 
	tVENC_PARAM_MJPEG_S
;

373 
	shiVENC_PARAM_MPEG4_S


375 
HI_BOOL
 
bS∂ôE«bÀ
;

376 
HI_U32
 
u32S∂ôMode
;

377 
HI_U32
 
u32PackëSize
;

381 
HI_U32
 
u32HWSize
;

386 
HI_U32
 
u32VWSize
;

391 } 
	tVENC_PARAM_MPEG4_S
;

395 
	shiVENC_ROI_CFG_S


397 
HI_U32
 
u32Index
;

398 
HI_BOOL
 
bE«bÀ
;

399 
HI_BOOL
 
bAbsQp
;

400 
HI_S32
 
s32Qp
;

401 
RECT_S
 
°Re˘
;

402 }
	tVENC_ROI_CFG_S
;

405 
	shiVENC_ROIBG_FRAME_RATE_S


407 
HI_S32
 
s32SrcFrmR©e
;

408 
HI_S32
 
s32D°FrmR©e
;

409 }
	tVENC_ROIBG_FRAME_RATE_S
;

412 
	shiVENC_COLOR2GREY_S


414 
HI_BOOL
 
bCﬁ‹2Gªy
;

415 }
	tVENC_COLOR2GREY_S
;

417 
	shiVENC_CROP_CFG_S


419 
HI_BOOL
 
bE«bÀ
;

420 
RECT_S
 
°Re˘
;

421 }
	tVENC_CROP_CFG_S
;

424 
	shiVENC_FRAME_RATE_S


426 
HI_S32
 
s32SrcFrmR©e
;

427 
HI_S32
 
s32D°FrmR©e
;

428 } 
	tVENC_FRAME_RATE_S
;

430 
	shiVENC_PARAM_H264_REF_S


432 
HI_U32
 
u32Ba£
;

433 
HI_U32
 
u32Enh™˚
;

434 
HI_BOOL
 
bE«bÀPªd
;

435 } 
	tVENC_PARAM_H264_REF_S
;

437 
	ehiH264E_IDR_PIC_ID_MODE_E


439 
H264E_IDR_PIC_ID_MODE_AUTO
 = 0,

440 
H264E_IDR_PIC_ID_MODE_USR
,

441 
H264E_IDR_PIC_ID_MODE_BUTT
,

442 }
	tH264E_IDR_PIC_ID_MODE_E
;

444 
	shiVENC_H264_IDRPICID_CFG_S


446 
H264E_IDR_PIC_ID_MODE_E
 
íH264eIdrPicIdMode
;

447 
HI_U32
 
u32H264eIdrPicId
;

448 } 
	tVENC_H264_IDRPICID_CFG_S
;

451 
	ehiVENC_H264_REF_MODE_E


453 
H264E_REF_MODE_1X
 = 1,

454 
H264E_REF_MODE_2X
 = 2,

455 
H264E_REF_MODE_4X
 = 5,

456 
H264E_REF_MODE_BUTT
,

457 }
	tVENC_H264_REF_MODE_E
;

460 
	ehiVENC_JPEG_SNAP_MODE_E


462 
JPEG_SNAP_ALL
 = 0,

463 
JPEG_SNAP_FLASH
 = 1,

464 
JPEG_SNAP_BUTT
,

466 }
	tVENC_JPEG_SNAP_MODE_E
;

468 
	shiVENC_RECV_PIC_PARAM_S


470 
HI_S32
 
s32RecvPicNum
;

471 } 
	tVENC_RECV_PIC_PARAM_S
;

473 
	shiVENC_STREAM_BUF_INFO_S


475 
HI_U32
 
u32PhyAddr
;

476 
HI_VOID
 *
pU£rAddr
;

477 
HI_U32
 
u32BufSize
;

478 } 
	tVENC_STREAM_BUF_INFO_S
;

480 
	shiVENC_PARAM_H264_INTRA_PRED_EX_S


482 
HI_BOOL
 
bI¡ø16DCEn
;

483 
HI_BOOL
 
bI¡ø4Mod3En
;

484 
HI_BOOL
 
bI¡ø8Mod3En
;

485 
HI_BOOL
 
bI¡ø16Mod3En
;

486 }
	tVENC_PARAM_H264_INTRA_PRED_EX_S
;

488 #ifde‡
__˝lu•lus


489 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vgs.h

15 #i‚de‡
__HI_COMM_VGS_H__


16 
	#__HI_COMM_VGS_H__


	)

18 #ifde‡
__˝lu•lus


19 #i‡
__˝lu•lus


24 
	~"hi_ty≥.h
"

25 
	~"hi_comm⁄.h
"

26 
	~"hi_î∫o.h
"

27 
	~"hi_comm_video.h
"

30 
	#HI_ERR_VGS_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

31 
	#HI_ERR_VGS_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

32 
	#HI_ERR_VGS_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

33 
	#HI_ERR_VGS_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

34 
	#HI_ERR_VGS_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

35 
	#HI_ERR_VGS_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

36 
	#HI_ERR_VGS_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

37 
	#HI_ERR_VGS_NOT_PERMITTED
 
	`HI_DEF_ERR
(
HI_ID_VGS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

39 
HI_S32
 
	tVGS_HANDLE
;

41 
	shiVGS_TASK_ATTR_S


43 
VIDEO_FRAME_INFO_S
 
°ImgIn
;

44 
VIDEO_FRAME_INFO_S
 
°ImgOut
;

45 
HI_U32
 
au32¥iv©eD©a
[4];

46 
HI_U32
 
ª£rved
;

47 }
	tVGS_TASK_ATTR_S
;

49 #ifde‡
__˝lu•lus


50 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vi.h

25 #i‚de‡
__HI_COMM_VI_H__


26 
	#__HI_COMM_VI_H__


	)

28 
	~"hi_comm⁄.h
"

29 
	~"hi_î∫o.h
"

30 
	~"hi_comm_video.h
"

33 #ifde‡
__˝lu•lus


34 #i‡
__˝lu•lus


40 
	#VI_INVALID_FRMRATE
 (-1UL)

	)

41 
	#VIU_MAX_USER_FRAME_DEPTH
 8

	)

43 
	ehiEN_VIU_ERR_CODE_E


45 
ERR_VI_FAILED_NOTENABLE
 = 64,

46 
ERR_VI_FAILED_NOTDISABLE
,

47 
ERR_VI_FAILED_CHNOTDISABLE
,

48 
ERR_VI_CFG_TIMEOUT
,

49 
ERR_VI_NORM_UNMATCH
,

50 
ERR_VI_INVALID_WAYID
,

51 
ERR_VI_INVALID_PHYCHNID
,

52 
ERR_VI_FAILED_NOTBIND
,

53 
ERR_VI_FAILED_BINDED
,

54 } 
	tEN_VIU_ERR_CODE_E
;

56 
	#HI_ERR_VI_INVALID_PARA
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

57 
	#HI_ERR_VI_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

58 
	#HI_ERR_VI_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

59 
	#HI_ERR_VI_INVALID_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

60 
	#HI_ERR_VI_FAILED_NOTCONFIG
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_CONFIG
)

	)

61 
	#HI_ERR_VI_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

62 
	#HI_ERR_VI_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

63 
	#HI_ERR_VI_BUF_FULL
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_FULL
)

	)

64 
	#HI_ERR_VI_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

65 
	#HI_ERR_VI_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

66 
	#HI_ERR_VI_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

67 
	#HI_ERR_VI_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

69 
	#HI_ERR_VI_FAILED_NOTENABLE
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_NOTENABLE
)

	)

70 
	#HI_ERR_VI_FAILED_NOTDISABLE
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_NOTDISABLE
)

	)

71 
	#HI_ERR_VI_FAILED_CHNOTDISABLE
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_CHNOTDISABLE
)

	)

72 
	#HI_ERR_VI_CFG_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_CFG_TIMEOUT
)

	)

73 
	#HI_ERR_VI_NORM_UNMATCH
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_NORM_UNMATCH
)

	)

74 
	#HI_ERR_VI_INVALID_WAYID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_INVALID_WAYID
)

	)

75 
	#HI_ERR_VI_INVALID_PHYCHNID
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_INVALID_PHYCHNID
)

	)

76 
	#HI_ERR_VI_FAILED_NOTBIND
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_NOTBIND
)

	)

77 
	#HI_ERR_VI_FAILED_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VIU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VI_FAILED_BINDED
)

	)

81 
	#SUBCHN
(
ViChn
Ë(ViCh¿+ 16)

	)

84 
	#VI_CAS_CHN_1
 32

	)

85 
	#VI_CAS_CHN_2
 33

	)

89 
	ehiVI_INTF_MODE_E


91 
VI_MODE_BT656
 = 0,

92 
VI_MODE_BT601
,

93 
VI_MODE_DIGITAL_CAMERA
,

94 
VI_MODE_BT1120_STANDARD
,

95 
VI_MODE_BT1120_INTERLEAVED
,

96 
VI_MODE_MIPI
,

97 
VI_MODE_LVDS
,

98 
VI_MODE_HISPI
,

100 
VI_MODE_BUTT


101 } 
	tVI_INTF_MODE_E
;

105 
	ehiVI_INPUT_MODE_E


107 
VI_INPUT_MODE_BT656
 = 0,

108 
VI_INPUT_MODE_BT601
,

109 
VI_INPUT_MODE_DIGITAL_CAMERA
,

110 
VI_INPUT_MODE_INTERLEAVED
,

111 
VI_INPUT_MODE_MIPI
,

112 
VI_INPUT_MODE_LVDS
,

113 
VI_INPUT_MODE_HISPI
,

115 
VI_INPUT_MODE_BUTT


116 } 
	tVI_INPUT_MODE_E
;

118 
	ehiVI_WORK_MODE_E


120 
VI_WORK_MODE_1Mu…ùÀx
 = 0,

121 
VI_WORK_MODE_2Mu…ùÀx
,

122 
VI_WORK_MODE_4Mu…ùÀx
,

124 
VI_WORK_MODE_BUTT


125 } 
	tVI_WORK_MODE_E
;

130 
	ehiVI_SCAN_MODE_E


132 
VI_SCAN_INTERLACED
 = 0,

133 
VI_SCAN_PROGRESSIVE
,

135 
VI_SCAN_BUTT
,

136 } 
	tVI_SCAN_MODE_E
;

138 
	ehiVI_DATA_YUV_SEQ_E


141 
VI_INPUT_DATA_VUVU
 = 0,

142 
VI_INPUT_DATA_UVUV
,

145 
VI_INPUT_DATA_UYVY
 = 0,

146 
VI_INPUT_DATA_VYUY
,

147 
VI_INPUT_DATA_YUYV
,

148 
VI_INPUT_DATA_YVYU
,

150 
VI_DATA_YUV_BUTT


151 } 
	tVI_DATA_YUV_SEQ_E
;

153 
	ehiVI_CLK_EDGE_E


155 
VI_CLK_EDGE_SINGLE_UP
 = 0,

156 
VI_CLK_EDGE_SINGLE_DOWN
,

159 
VI_CLK_EDGE_BUTT


160 } 
	tVI_CLK_EDGE_E
;

162 
	ehiVI_COMP_MODE_E


164 
VI_COMP_MODE_SINGLE
 = 0,

165 
VI_COMP_MODE_DOUBLE
 = 1,

166 
VI_COMP_MODE_BUTT
,

167 }
	tVI_COMP_MODE_E
;

170 
	ehiVI_COMBINE_MODE_E


172 
VI_COMBINE_COMPOSITE
 = 0,

173 
VI_COMBINE_SEPARATE
,

174 
VI_COMBINE_BUTT
,

175 } 
	tVI_COMBINE_MODE_E
;

178 
	ehiVI_VSYNC_E


180 
VI_VSYNC_FIELD
 = 0,

181 
VI_VSYNC_PULSE
,

182 } 
	tVI_VSYNC_E
;

185 
	ehiVI_VSYNC_NEG_E


187 
VI_VSYNC_NEG_HIGH
 = 0,

189 
VI_VSYNC_NEG_LOW


191 } 
	tVI_VSYNC_NEG_E
;

194 
	ehiVI_HSYNC_E


196 
VI_HSYNC_VALID_SINGNAL
 = 0,

197 
VI_HSYNC_PULSE
,

198 } 
	tVI_HSYNC_E
;

201 
	ehiVI_HSYNC_NEG_E


203 
VI_HSYNC_NEG_HIGH
 = 0,

205 
VI_HSYNC_NEG_LOW


207 } 
	tVI_HSYNC_NEG_E
;

210 
	ehiVI_VSYNC_VALID_E


212 
VI_VSYNC_NORM_PULSE
 = 0,

213 
VI_VSYNC_VALID_SINGAL
,

214 } 
	tVI_VSYNC_VALID_E
;

217 
	ehiVI_VSYNC_VALID_NEG_E


219 
VI_VSYNC_VALID_NEG_HIGH
 = 0,

221 
VI_VSYNC_VALID_NEG_LOW


223 } 
	tVI_VSYNC_VALID_NEG_E
;

228 
	shiVI_TIMING_BLANK_S


230 
HI_U32
 
u32HsyncHfb
 ;

231 
HI_U32
 
u32HsyncA˘
 ;

232 
HI_U32
 
u32HsyncHbb
 ;

233 
HI_U32
 
u32VsyncVfb
 ;

234 
HI_U32
 
u32VsyncVa˘
 ;

235 
HI_U32
 
u32VsyncVbb
 ;

236 
HI_U32
 
u32VsyncVbfb
 ;

237 
HI_U32
 
u32VsyncVba˘
 ;

238 
HI_U32
 
u32VsyncVbbb
 ;

239 }
	tVI_TIMING_BLANK_S
;

242 
	shiVI_SYNC_CFG_S


244 
VI_VSYNC_E
 
íVsync
;

245 
VI_VSYNC_NEG_E
 
íVsyncNeg
;

246 
VI_HSYNC_E
 
íHsync
;

247 
VI_HSYNC_NEG_E
 
íHsyncNeg
;

248 
VI_VSYNC_VALID_E
 
íVsyncVÆid
;

249 
VI_VSYNC_VALID_NEG_E
 
íVsyncVÆidNeg
;

250 
VI_TIMING_BLANK_S
 
°TimögBœnk
;

251 } 
	tVI_SYNC_CFG_S
;

254 
	ehiBT656_FIXCODE_E


256 
BT656_FIXCODE_1
 = 0,

257 
BT656_FIXCODE_0


258 }
	tBT656_FIXCODE_E
;

261 
	ehiBT656_FIELD_POLAR_E


263 
BT656_FIELD_POLAR_STD
 = 0,

264 
BT656_FIELD_POLAR_NSTD


265 }
	tBT656_FIELD_POLAR_E
;

267 
	shiVI_BT656_SYNC_CFG_S


269 
BT656_FIXCODE_E
 
íFixCode
;

270 
BT656_FIELD_POLAR_E
 
íFõldPﬁ¨
;

271 }
	tVI_BT656_SYNC_CFG_S
;

273 
	ehiVI_VBI_LOCAL_E


275 
VI_VBI_LOCAL_ODD_FRONT
 = 0,

276 
VI_VBI_LOCAL_ODD_END
,

277 
VI_VBI_LOCAL_EVEN_FRONT
,

278 
VI_VBI_LOCAL_EVEN_END
,

279 
VI_VBI_LOCAL_BUTT


280 } 
	tVI_VBI_LOCAL_E
;

282 
	shiVI_VBI_ATTR_S


284 
VI_VBI_LOCAL_E
 
íLoˇl
;

285 
HI_S32
 
s32X
;

286 
HI_S32
 
s32Y
;

287 
HI_U32
 
u32Lí
;

288 } 
	tVI_VBI_ATTR_S
;

290 
	ehiVI_DATA_TYPE_E


292 
VI_DATA_TYPE_YUV
 = 0,

293 
VI_DATA_TYPE_RGB
 = 1,

294 
VI_DATA_TYPE_BUTT


295 } 
	tVI_DATA_TYPE_E
;

297 
	ehiVI_DATA_PATH_E


299 
VI_PATH_BYPASS
 = 0,

300 
VI_PATH_ISP
 = 1,

301 
VI_PATH_RAW
 = 2,

302 
VI_PATH_BUTT


303 }
	tVI_DATA_PATH_E
;

306 
	shiVI_DEV_ATTR_EX_S


308 
VI_INPUT_MODE_E
 
íI≈utMode
;

309 
VI_WORK_MODE_E
 
íW‹kMode
;

311 
VI_COMBINE_MODE_E
 
íComböeMode
;

312 
VI_COMP_MODE_E
 
íCompMode
;

313 
VI_CLK_EDGE_E
 
íClkEdge
;

315 
HI_U32
 
au32CompMask
[2];

317 
VI_SCAN_MODE_E
 
íSˇnMode
;

318 
HI_S32
 
s32AdChnId
[4];

320 
VI_DATA_YUV_SEQ_E
 
íD©aSeq
;

321 
VI_SYNC_CFG_S
 
°SynCfg
;

323 
VI_BT656_SYNC_CFG_S
 
°BT656SynCfg
;

325 
VI_DATA_PATH_E
 
íD©aP©h
;

326 
VI_DATA_TYPE_E
 
íI≈utD©aTy≥
;

328 
HI_BOOL
 
bD©aRev
;

329 } 
	tVI_DEV_ATTR_EX_S
;

332 
	shiVI_DEV_ATTR_S


334 
VI_INTF_MODE_E
 
íI¡fMode
;

335 
VI_WORK_MODE_E
 
íW‹kMode
;

337 
HI_U32
 
au32CompMask
[2];

338 
VI_SCAN_MODE_E
 
íSˇnMode
;

339 
HI_S32
 
s32AdChnId
[4];

342 
VI_DATA_YUV_SEQ_E
 
íD©aSeq
;

343 
VI_SYNC_CFG_S
 
°SynCfg
;

345 
VI_DATA_PATH_E
 
íD©aP©h
;

346 
VI_DATA_TYPE_E
 
íI≈utD©aTy≥
;

348 
HI_BOOL
 
bD©aRev
;

349 } 
	tVI_DEV_ATTR_S
;

352 
	shiVI_CHN_BIND_ATTR_S


354 
VI_DEV
 
ViDev
;

355 
VI_WAY
 
ViWay
;

356 } 
	tVI_CHN_BIND_ATTR_S
;

360 
	shiVI_WAY_ATTR_S


362 
HI_S32
 
s32AdChnId
;

363 } 
	tVI_WAY_ATTR_S
;

367 
	ehiVI_CAPSEL_E


369 
VI_CAPSEL_TOP
 = 0,

370 
VI_CAPSEL_BOTTOM
,

371 
VI_CAPSEL_BOTH
,

372 
VI_CAPSEL_BUTT


373 } 
	tVI_CAPSEL_E
;

377 
	shiVI_CHN_ATTR_S


379 
RECT_S
 
°C≠Re˘
;

383 
SIZE_S
 
°De°Size
;

390 
VI_CAPSEL_E
 
íC≠Sñ
;

392 
PIXEL_FORMAT_E
 
íPixF‹m©
;

393 
COMPRESS_MODE_E
 
íCom¥essMode
;

395 
HI_BOOL
 
bMúr‹
;

396 
HI_BOOL
 
bFlù
;

398 
HI_S32
 
s32SrcFømeR©e
;

399 
HI_S32
 
s32D°FømeR©e
;

400 } 
	tVI_CHN_ATTR_S
;

403 
	shiVI_CHN_STAT_S


405 
HI_BOOL
 
bE«bÀ
;

406 
HI_U32
 
u32I¡C¡
;

407 
HI_U32
 
u32FrmR©e
;

408 
HI_U32
 
u32Lo°I¡
;

409 
HI_U32
 
u32VbFaû
;

410 
HI_U32
 
u32PicWidth
;

411 
HI_U32
 
u32PicHeight
;

412 } 
	tVI_CHN_STAT_S
;

414 
	ehi_VI_USERPIC_MODE_E


416 
VI_USERPIC_MODE_PIC
 = 0,

417 
VI_USERPIC_MODE_BGC
,

418 
VI_USERPIC_MODE_BUTT
,

419 } 
	tVI_USERPIC_MODE_E
;

421 
	shiVI_USERPIC_BGC_S


423 
HI_U32
 
u32BgCﬁ‹
;

424 } 
	tVI_USERPIC_BGC_S
;

426 
	shiVI_USERPIC_ATTR_S


428 
HI_BOOL
 
bPub
;

429 
VI_USERPIC_MODE_E
 
íU§PicMode
;

432 
VIDEO_FRAME_INFO_S
 
°U§PicFrm
;

433 
VI_USERPIC_BGC_S
 
°U§PicBg
;

434 }
unU§Pic
;

435 } 
	tVI_USERPIC_ATTR_S
;

437 
	shiVI_USR_GET_FRM_TIMEOUT_S


439 
VIDEO_FRAME_INFO_S
 *
p°VFøme
;

440 
HI_S32
 
s32MûliSec
;

441 } 
	tVI_USR_GET_FRM_TIMEOUT_S
;

444 
	ehiVI_FLASH_MODE_E


446 
VI_FLASH_ONCE
 = 0,

447 
VI_FLASH_FREQ
 = 1,

448 
VI_FLASH_MODE_BUTT


449 }
	tVI_FLASH_MODE_E
;

451 
	shiVI_FlASH_CONFIG_S


453 
VI_FLASH_MODE_E
 
íFœshMode
;

455 
HI_U32
 
u32SèπTime
;

456 
HI_U32
 
u32Duøti⁄
;

457 
HI_U32
 
u32C≠FrmIndex
;

458 
HI_U32
 
u32I¡îvÆ
;

459 }
	tVI_FLASH_CONFIG_S
;

461 
	shiVI_EXT_CHN_ATTR_S


463 
VI_CHN
 
s32BödChn
;

464 
SIZE_S
 
°De°Size
;

466 
HI_S32
 
s32SrcFømeR©e
;

467 
HI_S32
 
s32D°FømeR©e
;

468 
PIXEL_FORMAT_E
 
íPixF‹m©
;

469 
COMPRESS_MODE_E
 
íCom¥essMode
;

470 }
	tVI_EXT_CHN_ATTR_S
;

473 
	shiVI_LDC_ATTR_S


475 
HI_BOOL
 
bE«bÀ
;

476 
LDC_ATTR_S
 
°Aâr
;

477 }
	tVI_LDC_ATTR_S
;

479 
	shiVI_CHN_LUM_S


481 
HI_U32
 
u32Lum
;

482 
HI_U64
 
u64Pts
;

483 } 
	tVI_CHN_LUM_S
;

485 
	ehiVI_CSC_TYPE_E


487 
VI_CSC_TYPE_601
 = 0,

488 
VI_CSC_TYPE_709
,

489 
VI_CSC_TYPE_BUTT
,

490 } 
	tVI_CSC_TYPE_E
;

492 
	shiVI_CSC_ATTR_S


494 
VI_CSC_TYPE_E
 
íViCscTy≥
;

495 
HI_U32
 
u32LumaVÆ
;

496 
HI_U32
 
u32C⁄åVÆ
;

497 
HI_U32
 
u32HueVÆ
;

498 
HI_U32
 
u32S©uVÆ
;

499 } 
	tVI_CSC_ATTR_S
;

501 
	shiVI_ISP_WDR_ATTR_S


503 
ISP_WDR_MODE_E
 
íWDRMode
;

504 
PIXEL_FORMAT_E
 
íPixFom©
;

505 
HI_U32
 
u32Width
;

506 
HI_U32
 
u32Height
;

507 
HI_U32
 
u32BufNum
;

508 }
	tVI_ISP_WDR_ATTR_S
;

511 #ifde‡
__˝lu•lus


512 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_video.h

24 #i‚de‡
__HI_COMM_VIDEO_H__


25 
	#__HI_COMM_VIDEO_H__


	)

27 
	~"hi_ty≥.h
"

28 
	~"hi_comm⁄.h
"

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


36 
	ehiPIC_SIZE_E


38 
PIC_QCIF
 = 0,

39 
PIC_CIF
,

40 
PIC_2CIF
,

41 
PIC_HD1
,

42 
PIC_D1
,

43 
PIC_960H
,

45 
PIC_QVGA
,

46 
PIC_VGA
,

47 
PIC_XGA
,

48 
PIC_SXGA
,

49 
PIC_UXGA
,

50 
PIC_QXGA
,

52 
PIC_WVGA
,

53 
PIC_WSXGA
,

54 
PIC_WUXGA
,

55 
PIC_WQXGA
,

57 
PIC_HD720
,

58 
PIC_HD1080
,

60 
PIC_BUTT


61 }
	tPIC_SIZE_E
;

63 
	ehiVIDEO_NORM_E


65 
VIDEO_ENCODING_MODE_PAL
=0,

66 
VIDEO_ENCODING_MODE_NTSC
,

67 
VIDEO_ENCODING_MODE_AUTO
,

68 
VIDEO_ENCODING_MODE_BUTT


69 } 
	tVIDEO_NORM_E
;

71 
	ehiVIDEO_CONTROL_MODE_E


73 
VIDEO_CONTROL_MODE_SLAVER
=0,

74 
VIDEO_CONTROL_MODE_MASTER
,

75 
VIDEO_CONTROL_MODE_BUTT


76 }
	tVIDEO_CONTROL_MODE_E
;

79 
	ehiPIXEL_FORMAT_E


81 
PIXEL_FORMAT_RGB_1BPP
 = 0,

82 
PIXEL_FORMAT_RGB_2BPP
,

83 
PIXEL_FORMAT_RGB_4BPP
,

84 
PIXEL_FORMAT_RGB_8BPP
,

85 
PIXEL_FORMAT_RGB_444
,

86 
PIXEL_FORMAT_RGB_4444
,

87 
PIXEL_FORMAT_RGB_555
,

88 
PIXEL_FORMAT_RGB_565
,

89 
PIXEL_FORMAT_RGB_1555
,

92 
PIXEL_FORMAT_RGB_888
,

93 
PIXEL_FORMAT_RGB_8888
,

94 
PIXEL_FORMAT_RGB_PLANAR_888
,

95 
PIXEL_FORMAT_RGB_BAYER_8BPP
,

96 
PIXEL_FORMAT_RGB_BAYER_10BPP
,

97 
PIXEL_FORMAT_RGB_BAYER_12BPP
,

98 
PIXEL_FORMAT_RGB_BAYER_14BPP
,

99 
PIXEL_FORMAT_RGB_BAYER
,

101 
PIXEL_FORMAT_YUV_A422
,

102 
PIXEL_FORMAT_YUV_A444
,

104 
PIXEL_FORMAT_YUV_PLANAR_422
,

105 
PIXEL_FORMAT_YUV_PLANAR_420
,

106 
PIXEL_FORMAT_YUV_PLANAR_444
,

108 
PIXEL_FORMAT_YUV_SEMIPLANAR_422
,

109 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
,

110 
PIXEL_FORMAT_YUV_SEMIPLANAR_444
,

112 
PIXEL_FORMAT_UYVY_PACKAGE_422
,

113 
PIXEL_FORMAT_YUYV_PACKAGE_422
,

114 
PIXEL_FORMAT_VYUY_PACKAGE_422
,

115 
PIXEL_FORMAT_YCbCr_PLANAR
,

117 
PIXEL_FORMAT_BUTT


118 } 
	tPIXEL_FORMAT_E
;

120 
	shiVIDEO_VBI_INFO_S


122 
HI_U32
 
au32D©a
[
VIU_MAX_VBI_LEN
];

123 
HI_U32
 
u32Lí
;

124 }
	tVIDEO_VBI_INFO_S
;

126 
	ehiVIDEO_FIELD_E


128 
VIDEO_FIELD_TOP
 = 0x1,

129 
VIDEO_FIELD_BOTTOM
 = 0x2,

130 
VIDEO_FIELD_INTERLACED
 = 0x3,

131 
VIDEO_FIELD_FRAME
 = 0x4,

133 
VIDEO_FIELD_BUTT


134 } 
	tVIDEO_FIELD_E
;

136 
	ehiVIDEO_FORMAT_E


138 
VIDEO_FORMAT_LINEAR
 = 0x0,

139 
VIDEO_FORMAT_TILE
 = 0x1,

140 
VIDEO_FORMAT_TILE64
 = 0x2,

142 
VIDEO_FORMAT_BUTT


143 } 
	tVIDEO_FORMAT_E
;

145 
	ehiCOMPRESS_MODE_E


147 
COMPRESS_MODE_NONE
 = 0x0,

148 
COMPRESS_MODE_SEG
 = 0x1,

149 
COMPRESS_MODE_SEG128
 = 0x2,

150 
COMPRESS_MODE_LINE
 = 0x3,

152 
COMPRESS_MODE_BUTT


153 } 
	tCOMPRESS_MODE_E
;

155 
	ehiVIDEO_DISPLAY_MODE_E


157 
VIDEO_DISPLAY_MODE_PREVIEW
 = 0x0,

158 
VIDEO_DISPLAY_MODE_PLAYBACK
 = 0x1,

160 
VIDEO_DISPLAY_MODE_BUTT


161 } 
	tVIDEO_DISPLAY_MODE_E
;

163 
	shiVIDEO_FRAME_S


165 
HI_U32
 
u32Width
;

166 
HI_U32
 
u32Height
;

167 
VIDEO_FIELD_E
 
u32Fõld
;

168 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

170 
VIDEO_FORMAT_E
 
íVideoF‹m©
;

171 
COMPRESS_MODE_E
 
íCom¥essMode
;

173 
HI_U32
 
u32PhyAddr
[3];

174 
HI_VOID
 *
pVúAddr
[3];

175 
HI_U32
 
u32Såide
[3];

177 
HI_U32
 
u32HódîPhyAddr
[3];

178 
HI_VOID
 *
pHódîVúAddr
[3];

179 
HI_U32
 
u32HódîSåide
[3];

181 
HI_U16
 
u16Off£tT›
;

182 
HI_U16
 
u16Off£tBŸtom
;

183 
HI_U16
 
u16Off£tLe·
;

184 
HI_U16
 
u16Off£tRight
;

186 
HI_U64
 
u64±s
;

187 
HI_U32
 
u32TimeRef
;

189 
HI_U32
 
u32Priv©eD©a
;

190 }
	tVIDEO_FRAME_S
;

192 
	shiVIDEO_FRAME_INFO_S


194 
VIDEO_FRAME_S
 
°VFøme
;

195 
HI_U32
 
u32PoﬁId
;

196 } 
	tVIDEO_FRAME_INFO_S
;

198 
	shiBITMAP_S


200 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

201 
HI_U32
 
u32Width
;

202 
HI_U32
 
u32Height
;

203 
HI_VOID
 *
pD©a
;

204 } 
	tBITMAP_S
;

207 
	shiVI_MIXCAP_STAT_S


209 
HI_BOOL
 
bMixC≠Mode
;

210 
HI_BOOL
 
bHasDownSˇÀ
;

211 } 
	tVI_MIXCAP_STAT_S
;

214 
	shiVI_FRAME_INFO_S


216 
VI_MIXCAP_STAT_S
 
°MixC≠Sèã
;

217 
VIDEO_FRAME_INFO_S
 
°ViFrmInfo
;

218 
HI_BOOL
 
bFœshed
;

219 }
	tVI_FRAME_INFO_S
;

221 
	ehiLDC_VIEW_TYPE_E


223 
LDC_VIEW_TYPE_ALL
 = 0,

224 
LDC_VIEW_TYPE_CROP
,

226 
LDC_VIEW_TYPE_BUTT
,

227 } 
	tLDC_VIEW_TYPE_E
;

229 
	shiLDC_ATTR_S


231 
LDC_VIEW_TYPE_E
 
íVõwTy≥
;

232 
HI_S32
 
s32CíãrXOff£t
;

233 
HI_S32
 
s32CíãrYOff£t
;

234 
HI_S32
 
s32R©io
;

235 } 
	tLDC_ATTR_S
;

237 
	ehiISP_WDR_MODE_E


239 
ISP_WDR_MODE_NONE
 = 0,

240 
ISP_WDR_MODE_BUILDIN
,

242 
ISP_WDR_MODE_2To1_LINE
,

243 
ISP_WDR_MODE_2To1_FRAME
,

244 
ISP_WDR_MODE_2To1_FRAME_FULL_RATE
,

246 
ISP_WDR_MODE_3To1_LINE
,

247 
ISP_WDR_MODE_3To1_FRAME
,

248 
ISP_WDR_MODE_3To1_FRAME_FULL_RATE
,

250 
ISP_WDR_MODE_4To1_LINE
,

251 
ISP_WDR_MODE_4To1_FRAME
,

252 
ISP_WDR_MODE_4To1_FRAME_FULL_RATE
,

254 
ISP_WDR_MODE_BUTT
,

255 } 
	tISP_WDR_MODE_E
;

257 #ifde‡
__˝lu•lus


258 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vo.h

18 #i‚de‡
__HI_COMM_VO_H__


19 
	#__HI_COMM_VO_H__


	)

21 
	~"hi_ty≥.h
"

22 
	~"hi_comm⁄.h
"

23 
	~"hi_comm_video.h
"

25 
	#VO_DEF_CHN_BUF_LEN
 8

	)

26 
	#VO_DEF_DISP_BUF_LEN
 5

	)

27 
	#VO_DEF_VIRT_BUF_LEN
 3

	)

28 
	#VO_DEF_WBC_DEPTH_LEN
 8

	)

30 #ifde‡
__˝lu•lus


31 #i‡
__˝lu•lus


36 
	ehiEN_VOU_ERR_CODE_E


38 
EN_ERR_VO_DEV_NOT_CONFIG
 = 0x40,

39 
EN_ERR_VO_DEV_NOT_ENABLE
 = 0x41,

40 
EN_ERR_VO_DEV_HAS_ENABLED
 = 0x42,

41 
EN_ERR_VO_DEV_HAS_BINDED
 = 0x43,

42 
EN_ERR_VO_DEV_NOT_BINDED
 = 0x44,

44 
ERR_VO_NOT_ENABLE
 = 0x45,

45 
ERR_VO_NOT_DISABLE
 = 0x46,

46 
ERR_VO_NOT_CONFIG
 = 0x47,

48 
ERR_VO_CHN_NOT_DISABLE
 = 0x48,

49 
ERR_VO_CHN_NOT_ENABLE
 = 0x49,

50 
ERR_VO_CHN_NOT_CONFIG
 = 0x4a,

51 
ERR_VO_CHN_NOT_ALLOC
 = 0x4b,

53 
ERR_VO_CCD_INVALID_PAT
 = 0x4c,

54 
ERR_VO_CCD_INVALID_POS
 = 0x4d,

56 
ERR_VO_WAIT_TIMEOUT
 = 0x4e,

57 
ERR_VO_INVALID_VFRAME
 = 0x4f,

58 
ERR_VO_INVALID_RECT_PARA
 = 0x50,

59 
ERR_VO_SETBEGIN_ALREADY
 = 0x51,

60 
ERR_VO_SETBEGIN_NOTYET
 = 0x52,

61 
ERR_VO_SETEND_ALREADY
 = 0x53,

62 
ERR_VO_SETEND_NOTYET
 = 0x54,

64 
ERR_VO_GRP_INVALID_ID
 = 0x55,

65 
ERR_VO_GRP_NOT_CREATE
 = 0x56,

66 
ERR_VO_GRP_HAS_CREATED
 = 0x57,

67 
ERR_VO_GRP_NOT_DESTROY
 = 0x58,

68 
ERR_VO_GRP_CHN_FULL
 = 0x59,

69 
ERR_VO_GRP_CHN_EMPTY
 = 0x5a,

70 
ERR_VO_GRP_CHN_NOT_EMPTY
 = 0x5b,

71 
ERR_VO_GRP_INVALID_SYN_MODE
 = 0x5c,

72 
ERR_VO_GRP_INVALID_BASE_PTS
 = 0x5d,

73 
ERR_VO_GRP_NOT_START
 = 0x5e,

74 
ERR_VO_GRP_NOT_STOP
 = 0x5f,

75 
ERR_VO_GRP_INVALID_FRMRATE
 = 0x60,

76 
ERR_VO_GRP_CHN_HAS_REG
 = 0x61,

77 
ERR_VO_GRP_CHN_NOT_REG
 = 0x62,

78 
ERR_VO_GRP_CHN_NOT_UNREG
 = 0x63,

79 
ERR_VO_GRP_BASE_NOT_CFG
 = 0x64,

81 
ERR_GFX_NOT_DISABLE
 = 0x65,

82 
ERR_GFX_NOT_BIND
 = 0x66,

83 
ERR_GFX_NOT_UNBIND
 = 0x67,

84 
ERR_GFX_INVALID_ID
 = 0x68,

86 
ERR_VO_WBC_NOT_DISABLE
 = 0x69,

87 
ERR_VO_WBC_NOT_CONFIG
 = 0x6a,

89 
ERR_VO_CHN_AREA_OVERLAP
 = 0x6b,

91 
EN_ERR_INVALID_WBCID
 = 0x6c,

92 
EN_ERR_INVALID_LAYERID
 = 0x6d,

93 
EN_ERR_VO_VIDEO_HAS_BINDED
 = 0x6e,

94 
EN_ERR_VO_VIDEO_NOT_BINDED
 = 0x6f,

95 
ERR_VO_WBC_HAS_BIND
 = 0x70,

96 
ERR_VO_WBC_HAS_CONFIG
 = 0x71,

97 
ERR_VO_WBC_NOT_BIND
 = 0x72,

100 
ERR_VO_BUTT


102 }
	tEN_VOU_ERR_CODE_E
;

105 
	#HI_ERR_VO_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

106 
	#HI_ERR_VO_NO_MEM
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

107 
	#HI_ERR_VO_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

108 
	#HI_ERR_VO_SYS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

109 
	#HI_ERR_VO_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

110 
	#HI_ERR_VO_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

111 
	#HI_ERR_VO_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

112 
	#HI_ERR_VO_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

113 
	#HI_ERR_VO_NOT_PERMIT
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

114 
	#HI_ERR_VO_INVALID_WBCID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_WBCID
)

	)

115 
	#HI_ERR_VO_INVALID_LAYERID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_LAYERID
)

	)

119 
	#HI_ERR_VO_DEV_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_NOT_CONFIG
)

	)

120 
	#HI_ERR_VO_DEV_NOT_ENABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_NOT_ENABLE
)

	)

121 
	#HI_ERR_VO_DEV_HAS_ENABLED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_HAS_ENABLED
)

	)

122 
	#HI_ERR_VO_DEV_HAS_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_HAS_BINDED
)

	)

123 
	#HI_ERR_VO_DEV_NOT_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_DEV_NOT_BINDED
)

	)

126 
	#HI_ERR_VO_VIDEO_NOT_ENABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_NOT_ENABLE
)

	)

127 
	#HI_ERR_VO_VIDEO_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_NOT_DISABLE
)

	)

128 
	#HI_ERR_VO_VIDEO_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_NOT_CONFIG
)

	)

129 
	#HI_ERR_VO_VIDEO_HAS_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_VIDEO_HAS_BINDED
)

	)

130 
	#HI_ERR_VO_VIDEO_NOT_BINDED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_VO_VIDEO_NOT_BINDED
)

	)

133 
	#HI_ERR_VO_WBC_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_NOT_DISABLE
)

	)

134 
	#HI_ERR_VO_WBC_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_NOT_CONFIG
)

	)

135 
	#HI_ERR_VO_WBC_HAS_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_HAS_CONFIG
)

	)

136 
	#HI_ERR_VO_WBC_NOT_BIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_NOT_BIND
)

	)

137 
	#HI_ERR_VO_WBC_HAS_BIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WBC_HAS_BIND
)

	)

140 
	#HI_ERR_VO_CHN_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_DISABLE
)

	)

141 
	#HI_ERR_VO_CHN_NOT_ENABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_ENABLE
)

	)

142 
	#HI_ERR_VO_CHN_NOT_CONFIG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_CONFIG
)

	)

143 
	#HI_ERR_VO_CHN_NOT_ALLOC
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_NOT_ALLOC
)

	)

144 
	#HI_ERR_VO_CHN_AREA_OVERLAP
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CHN_AREA_OVERLAP
)

	)

148 
	#HI_ERR_VO_INVALID_PATTERN
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CCD_INVALID_PAT
)

	)

149 
	#HI_ERR_VO_INVALID_POSITION
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_CCD_INVALID_POS
)

	)

152 
	#HI_ERR_VO_WAIT_TIMEOUT
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_WAIT_TIMEOUT
)

	)

153 
	#HI_ERR_VO_INVALID_VFRAME
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_INVALID_VFRAME
)

	)

154 
	#HI_ERR_VO_INVALID_RECT_PARA
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_INVALID_RECT_PARA
)

	)

155 
	#HI_ERR_VO_SETBEGIN_ALREADY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETBEGIN_ALREADY
)

	)

156 
	#HI_ERR_VO_SETBEGIN_NOTYET
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETBEGIN_NOTYET
)

	)

157 
	#HI_ERR_VO_SETEND_ALREADY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETEND_ALREADY
)

	)

158 
	#HI_ERR_VO_SETEND_NOTYET
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_SETEND_NOTYET
)

	)

161 
	#HI_ERR_VO_GRP_INVALID_ID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_ID
)

	)

162 
	#HI_ERR_VO_GRP_NOT_CREATE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_CREATE
)

	)

163 
	#HI_ERR_VO_GRP_HAS_CREATED
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_HAS_CREATED
)

	)

164 
	#HI_ERR_VO_GRP_NOT_DESTROY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_DESTROY
)

	)

165 
	#HI_ERR_VO_GRP_CHN_FULL
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_FULL
)

	)

166 
	#HI_ERR_VO_GRP_CHN_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_EMPTY
)

	)

167 
	#HI_ERR_VO_GRP_CHN_NOT_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_NOT_EMPTY
)

	)

168 
	#HI_ERR_VO_GRP_INVALID_SYN_MODE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_SYN_MODE
)

	)

169 
	#HI_ERR_VO_GRP_INVALID_BASE_PTS
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_BASE_PTS
)

	)

170 
	#HI_ERR_VO_GRP_NOT_START
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_START
)

	)

171 
	#HI_ERR_VO_GRP_NOT_STOP
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_NOT_STOP
)

	)

172 
	#HI_ERR_VO_GRP_INVALID_FRMRATE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_INVALID_FRMRATE
)

	)

173 
	#HI_ERR_VO_GRP_CHN_HAS_REG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_HAS_REG
)

	)

174 
	#HI_ERR_VO_GRP_CHN_NOT_REG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_NOT_REG
)

	)

175 
	#HI_ERR_VO_GRP_CHN_NOT_UNREG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_CHN_NOT_UNREG
)

	)

176 
	#HI_ERR_VO_GRP_BASE_NOT_CFG
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_VO_GRP_BASE_NOT_CFG
)

	)

180 
	#HI_ERR_VO_GFX_NOT_DISABLE
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_NOT_DISABLE
)

	)

181 
	#HI_ERR_VO_GFX_NOT_BIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_NOT_BIND
)

	)

182 
	#HI_ERR_VO_GFX_NOT_UNBIND
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_NOT_UNBIND
)

	)

183 
	#HI_ERR_VO_GFX_INVALID_ID
 
	`HI_DEF_ERR
(
HI_ID_VOU
, 
EN_ERR_LEVEL_ERROR
, 
ERR_GFX_INVALID_ID
)

	)

186 
	#VO_INTF_CVBS
 (0x01L<<0)

	)

187 
	#VO_INTF_YPBPR
 (0x01L<<1)

	)

188 
	#VO_INTF_VGA
 (0x01L<<2)

	)

189 
	#VO_INTF_BT656
 (0x01L<<3)

	)

190 
	#VO_INTF_BT1120
 (0x01L<<4)

	)

191 
	#VO_INTF_HDMI
 (0x01L<<5)

	)

192 
	#VO_INTF_LCD
 (0x01L<<6)

	)

193 
	#VO_INTF_BT656_H
 (0x01L<<7)

	)

194 
	#VO_INTF_BT656_L
 (0x01L<<8)

	)

198 
	#VO_WBC_CHN_ID
 (
VO_MAX_CHN_NUM
 + 1)

	)

200 
	#VO_DEFAULT_CHN
 -1

	)

205 
HI_S32
 
	tVO_INTF_TYPE_E
;

209 
	ehiVO_INTF_SYNC_E


211 
VO_OUTPUT_PAL
 = 0,

212 
VO_OUTPUT_NTSC
,

214 
VO_OUTPUT_1080P24
,

215 
VO_OUTPUT_1080P25
,

216 
VO_OUTPUT_1080P30
,

218 
VO_OUTPUT_720P50
,

219 
VO_OUTPUT_720P60
,

220 
VO_OUTPUT_1080I50
,

221 
VO_OUTPUT_1080I60
,

222 
VO_OUTPUT_1080P50
,

223 
VO_OUTPUT_1080P60
,

225 
VO_OUTPUT_576P50
,

226 
VO_OUTPUT_480P60
,

228 
VO_OUTPUT_800x600_60
,

229 
VO_OUTPUT_1024x768_60
,

230 
VO_OUTPUT_1280x1024_60
,

231 
VO_OUTPUT_1366x768_60
,

232 
VO_OUTPUT_1440x900_60
,

233 
VO_OUTPUT_1280x800_60
,

234 
VO_OUTPUT_1600x1200_60
,

235 
VO_OUTPUT_1680x1050_60
,

236 
VO_OUTPUT_1920x1200_60
,

237 
VO_OUTPUT_640x480_60
,

238 
VO_OUTPUT_USER
,

239 
VO_OUTPUT_BUTT


241 } 
	tVO_INTF_SYNC_E
;

243 
	ehiVO_SCREEN_HFILTER_E


245 
VO_SCREEN_HFILTER_DEF
 = 0,

246 
VO_SCREEN_HFILTER_8M
,

247 
VO_SCREEN_HFILTER_6M
,

248 
VO_SCREEN_HFILTER_5M
,

249 
VO_SCREEN_HFILTER_4M
,

250 
VO_SCREEN_HFILTER_3M
,

251 
VO_SCREEN_HFILTER_2M
,

252 
VO_SCREEN_HFILTER_BUTT


254 } 
	tVO_SCREEN_HFILTER_E
;

256 
	ehiVO_SCREEN_VFILTER_E


258 
VO_SCREEN_VFILTER_DEF
 = 0,

259 
VO_SCREEN_VFILTER_8M
,

260 
VO_SCREEN_VFILTER_6M
,

261 
VO_SCREEN_VFILTER_5M
,

262 
VO_SCREEN_VFILTER_4M
,

263 
VO_SCREEN_VFILTER_3M
,

264 
VO_SCREEN_VFILTER_2M
,

265 
VO_SCREEN_VFILTER_BUTT


267 } 
	tVO_SCREEN_VFILTER_E
;

269 
	ehiVO_DISPLAY_FIELD_E


271 
VO_FIELD_TOP
,

272 
VO_FIELD_BOTTOM
,

273 
VO_FIELD_BOTH
,

274 
VO_FIELD_BUTT


275 } 
	tVO_DISPLAY_FIELD_E
;

277 
	ehiVOU_ZOOM_IN_E


279 
VOU_ZOOM_IN_RECT
 = 0,

280 
VOU_ZOOM_IN_RATIO
,

281 
VOU_ZOOM_IN_BUTT


282 } 
	tVOU_ZOOM_IN_E
;

284 
	ehiVO_CSC_MATRIX_E


286 
VO_CSC_MATRIX_IDENTITY
 = 0,

288 
VO_CSC_MATRIX_BT601_TO_BT709
,

289 
VO_CSC_MATRIX_BT709_TO_BT601
,

291 
VO_CSC_MATRIX_BT601_TO_RGB_PC
,

292 
VO_CSC_MATRIX_BT709_TO_RGB_PC
,

294 
VO_CSC_MATRIX_RGB_TO_BT601_PC
,

295 
VO_CSC_MATRIX_RGB_TO_BT709_PC
,

297 
VO_CSC_MATRIX_BUTT


298 } 
	tVO_CSC_MATRIX_E
;

300 
	shiVO_CHN_ATTR_S


302 
HI_U32
 
u32Pri‹ôy
;

303 
RECT_S
 
°Re˘
;

304 
HI_BOOL
 
bDeÊickî
;

305 }
	tVO_CHN_ATTR_S
;

307 
	shiVO_BORDER_S


309 
HI_BOOL
 
bB‹dîEn
;

310 
BORDER_S
 
°B‹dî
;

311 }
	tVO_BORDER_S
;

314 
	shiVO_QUERY_STATUS_S


316 
HI_U32
 
u32ChnBufU£d
;

317 } 
	tVO_QUERY_STATUS_S
;

319 
	shiVO_SCALE_FILTER_S


321 
VO_SCREEN_HFILTER_E
 
íHFûãr
;

322 
VO_SCREEN_VFILTER_E
 
íVFûãr
;

324 } 
	tVO_SCREEN_FILTER_S
;

326 
	sègVO_SYNC_INFO_S


328 
HI_BOOL
 
bSynm
;

329 
HI_BOOL
 
bI›
;

330 
HI_U8
 
u8I¡fb
;

332 
HI_U16
 
u16Va˘
 ;

333 
HI_U16
 
u16Vbb
;

334 
HI_U16
 
u16Vfb
;

336 
HI_U16
 
u16Ha˘
;

337 
HI_U16
 
u16Hbb
;

338 
HI_U16
 
u16Hfb
;

339 
HI_U16
 
u16Hmid
;

341 
HI_U16
 
u16Bva˘
;

342 
HI_U16
 
u16Bvbb
;

343 
HI_U16
 
u16Bvfb
;

345 
HI_U16
 
u16Hpw
;

346 
HI_U16
 
u16Vpw
;

348 
HI_BOOL
 
bIdv
;

349 
HI_BOOL
 
bIhs
;

350 
HI_BOOL
 
bIvs
;

352 } 
	tVO_SYNC_INFO_S
;

354 
	shiVO_PUB_ATTR_S


356 
HI_U32
 
u32BgCﬁ‹
;

357 
VO_INTF_TYPE_E
 
íI¡fTy≥
;

358 
VO_INTF_SYNC_E
 
íI¡fSync
;

359 
VO_SYNC_INFO_S
 
°SyncInfo
;

360 } 
	tVO_PUB_ATTR_S
;

362 
	shiVO_WBC_ATTR_S


364 
SIZE_S
 
°T¨gëSize
;

365 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

366 
HI_U32
 
u32FømeR©e
;

367 } 
	tVO_WBC_ATTR_S
;

369 
	ehiVO_WBC_MODE_E


371 
VO_WBC_MODE_NOMAL
 = 0,

373 
VO_WBC_MODE_DROP_REPEAT
,

375 
VO_WBC_MODE_PROG_TO_INTL
,

378 
VO_WBC_MODE_BUTT
,

379 } 
	tVO_WBC_MODE_E
;

382 
	ehiVO_WBC_SOURCE_TYPE_E


384 
VO_WBC_SOURCE_DEV
 = 0x0,

385 
VO_WBC_SOURCE_VIDEO
 = 0x1,

386 
VO_WBC_SOURCE_GRAPHIC
 = 0x2,

388 
VO_WBC_SOURCE_BUTT


389 } 
	tVO_WBC_SOURCE_TYPE_E
;

391 
	shiVO_USR_SEND_TIMEOUT_S


393 
VIDEO_FRAME_INFO_S
 
°VFøme
;

394 
HI_S32
 
s32MûliSec
;

395 } 
	tVO_USR_SEND_TIMEOUT_S
;

398 
	shiVO_WBC_SOURCE_S


400 
VO_WBC_SOURCE_TYPE_E
 
íSour˚Ty≥
;

401 
HI_U32
 
u32Sour˚Id
;

402 } 
	tVO_WBC_SOURCE_S
;

404 
	ehiVO_CAS_MODE_E


406 
VO_CAS_MODE_SINGLE
 = 0,

407 
VO_CAS_MODE_DUAL
,

408 
VO_CAS_MODE_BUTT
,

409 } 
	tVO_CAS_MODE_E
;

411 
	ehiVO_CAS_RGN_E


413 
VO_CAS_64_RGN
 = 0,

414 
VO_CAS_32_RGN
,

415 
VO_CAS_RGN_BUTT
,

416 } 
	tVO_CAS_RGN_E
;

418 
	shiVO_CAS_ATTR_S


420 
HI_BOOL
 
bSœve
;

421 
VO_CAS_RGN_E
 
íCasRgn
;

422 
VO_CAS_MODE_E
 
íCasMode
;

423 } 
	tVO_CAS_ATTR_S
;

425 
	ehiVO_PART_MODE_E


427 
VO_PART_MODE_SINGLE
 = 0,

428 
VO_PART_MODE_MULTI
 = 1,

429 
VO_PART_MODE_BUTT


431 } 
	tVO_PART_MODE_E
;

433 
	shiVO_VIDEO_LAYER_ATTR_S


435 
RECT_S
 
°Di•Re˘
;

436 
SIZE_S
 
°ImageSize
;

437 
HI_U32
 
u32Di•FrmRt
;

438 
PIXEL_FORMAT_E
 
íPixF‹m©
;

439 
HI_BOOL
 
bDoubÀFøme
;

440 
HI_BOOL
 
bClu°îMode
;

441 } 
	tVO_VIDEO_LAYER_ATTR_S
;

443 
	ehiVOU_LAYER_DDR_E


445 
VOU_LAYER_DDR0
 = 0,

446 
VOU_LAYER_DDR1
 = 1,

447 
VOU_LAYER_DDR_BUTT


448 }
	tVOU_LAYER_DDR_E
;

450 
	shiVO_ZOOM_RATIO_S


452 
HI_U32
 
u32XR©io
;

453 
HI_U32
 
u32YR©io
;

454 
HI_U32
 
u32WR©io
;

455 
HI_U32
 
u32HR©io
;

456 } 
	tVO_ZOOM_RATIO_S
;

458 
	shiVO_ZOOM_ATTR_S


460 
VOU_ZOOM_IN_E
 
íZoomTy≥
;

463 
RECT_S
 
°ZoomRe˘
;

464 
VO_ZOOM_RATIO_S
 
°ZoomR©io
;

466 } 
	tVO_ZOOM_ATTR_S
;

468 
	shiVO_CSC_S


470 
VO_CSC_MATRIX_E
 
íCscM©rix
;

471 
HI_U32
 
u32Luma
;

472 
HI_U32
 
u32C⁄åa°
;

473 
HI_U32
 
u32Hue
;

474 
HI_U32
 
u32S©u©uª
;

475 } 
	tVO_CSC_S
;

477 
	shiVO_VGA_PARAM_S


479 
VO_CSC_S
 
°CSC
;

480 
HI_U32
 
u32Gaö
;

481 } 
	tVO_VGA_PARAM_S
;

483 
	shiVO_REGION_INFO_S


485 
RECT_S
 *
p°Regi⁄
;

486 
HI_U32
 
u32Regi⁄Num
;

487 }
	tVO_REGION_INFO_S
;

489 
	shiVO_REGION_LUMA_S


491 
VO_REGION_INFO_S
 
°Regi⁄Info
;

492 
HI_U32
* 
pu32LumaD©a
;

493 
HI_S32
 
s32MûliSec
;

496 }
	tVO_REGION_LUMA_S
;

498 #ifde‡
__˝lu•lus


499 #i‡
__˝lu•lus


	@HiSDK/include/hi_comm_vpss.h

21 #i‚de‡
__HI_COMM_VPSS_H__


22 
	#__HI_COMM_VPSS_H__


	)

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


31 
	~"hi_ty≥.h
"

32 
	~"hi_comm⁄.h
"

33 
	~"hi_î∫o.h
"

34 
	~"hi_comm_video.h
"

36 
	#HI_ERR_VPSS_NULL_PTR
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NULL_PTR
)

	)

37 
	#HI_ERR_VPSS_NOTREADY
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_SYS_NOTREADY
)

	)

38 
	#HI_ERR_VPSS_INVALID_DEVID
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_DEVID
)

	)

39 
	#HI_ERR_VPSS_INVALID_CHNID
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_INVALID_CHNID
)

	)

40 
	#HI_ERR_VPSS_EXIST
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_EXIST
)

	)

41 
	#HI_ERR_VPSS_UNEXIST
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_UNEXIST
)

	)

42 
	#HI_ERR_VPSS_NOT_SUPPORT
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_SUPPORT
)

	)

43 
	#HI_ERR_VPSS_NOT_PERM
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOT_PERM
)

	)

44 
	#HI_ERR_VPSS_NOMEM
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOMEM
)

	)

45 
	#HI_ERR_VPSS_NOBUF
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_NOBUF
)

	)

46 
	#HI_ERR_VPSS_ILLEGAL_PARAM
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_ILLEGAL_PARAM
)

	)

47 
	#HI_ERR_VPSS_BUSY
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUSY
)

	)

48 
	#HI_ERR_VPSS_BUF_EMPTY
 
	`HI_DEF_ERR
(
HI_ID_VPSS
, 
EN_ERR_LEVEL_ERROR
, 
EN_ERR_BUF_EMPTY
)

	)

51 
HI_S32
 
	tVPSS_GRP
;

52 
HI_S32
 
	tVPSS_CHN
;

55 
	ehiVPSS_FRAME_WORK_E


57 
VPSS_FRAME_WORK_LEFT
 = 0,

58 
VPSS_FRAME_WORK_RIGHT
 = 1,

59 
VPSS_FRAME_WORK_BOTTOM
 = 2,

60 
VPSS_FRAME_WORK_TOP
 = 3,

61 
VPSS_FRAME_WORK_BUTT


62 }
	tVPSS_FRAME_WORK_E
;

65 
	ehiVPSS_DIE_MODE_E


67 
VPSS_DIE_MODE_AUTO
 = 0,

68 
VPSS_DIE_MODE_NODIE
 = 1,

69 
VPSS_DIE_MODE_DIE
 = 2,

70 
VPSS_DIE_MODE_BUTT


71 }
	tVPSS_DIE_MODE_E
;

75 
	sHI_VPSS_FRAME_S


77 
HI_U32
 
u32Width
[
VPSS_FRAME_WORK_BUTT
];

78 
HI_U32
 
u32Cﬁ‹
;

79 }
	tBORDER_S
;

83 
	shiVPSS_CHN_ATTR_S


85 
HI_BOOL
 
bSpEn
;

86 
HI_BOOL
 
bB‹dîEn
;

87 
BORDER_S
 
°B‹dî
;

88 }
	tVPSS_CHN_ATTR_S
;

90 
	shiVPSS_TFY_S


92 
HI_U32
 
u32R™ge
;

93 
HI_U32
 
u32MamiWnd
;

94 
HI_U32
 
u32R©e
;

95 
HI_U32
 
u32MŸi⁄Blur
;

96 
HI_U32
 
u32ProPïp
;

97 
HI_U32
 
u32SÕPïp
;

98 
HI_U32
 
u32PïpSfs
;

99 } 
	tVPSS_TFY_S
;

101 
	shiVPSS_SFY_S


103 
HI_U32
 
u32Sh¨p
;

104 
HI_U32
 
u32DePïp
;

105 
HI_U32
 
u32DeSÆt
;

106 
HI_U32
 
u32jMode
;

107 
HI_U32
 
u32jWnd
;

108 
HI_U32
 
u32jSl›e
;

109 
HI_U32
 
u32iSl›e
;

110 } 
	tVPSS_SFY_S
;

112 
	shiVPSS_NRY_S


114 
VPSS_SFY_S
 
a°SFy
[4];

115 
VPSS_TFY_S
 
a°TFy
[4];

117 
HI_U32
 
u32MDyThªsh
;

118 
HI_U32
 
u32R‰OutR©e
;

119 
HI_U32
 
u32No°ÆgicWnd
;

120 } 
	tVPSS_NRY_S
;

123 
	shiVPSS_IMG_QUALITY_PARAM_S


125 
VPSS_NRY_S
 
°NRY
;

126 
HI_U32
 
u32Re£rved
[6];

127 }
	tVPSS_IMG_QUALITY_PARAM_S
;

130 
	shiVPSS_IMG_QUALITY_CFG_S


132 
HI_BOOL
 
bE«bÀ
;

133 
VPSS_IMG_QUALITY_PARAM_S
 
°ImageQuÆôyP¨am
;

134 }
	tVPSS_IMG_QUALITY_CFG_S
;

136 
	shiVPSS_GRP_PARAM_S


138 
HI_U32
 
u32C⁄åa°
;

139 
HI_U32
 
u32IeSåígth
;

140 
HI_U32
 
u32DõSåígth
;

141 
HI_U32
 
u32SfSåígth
;

142 
HI_U32
 
u32TfSåígth
;

143 
HI_U32
 
u32CfSåígth
;

144 
HI_U32
 
u32DeMŸi⁄Bluºög
;

145 }
	tVPSS_GRP_PARAM_S
;

148 
	ehiVPSS_CAPSEL_E


150 
VPSS_CAPSEL_BOTH
 = 0,

151 
VPSS_CAPSEL_TOP
,

152 
VPSS_CAPSEL_BOTTOM
,

154 
VPSS_CAPSEL_BUTT


155 } 
	tVPSS_CAPSEL_E
;

157 
	ehiVPSS_CROP_COORDINATE_E


159 
VPSS_CROP_RATIO_COOR
 = 0,

160 
VPSS_CROP_ABS_COOR


161 }
	tVPSS_CROP_COORDINATE_E
;

164 
	shiVPSS_CROP_INFO_S


166 
HI_BOOL
 
bE«bÀ
;

167 
VPSS_CROP_COORDINATE_E
 
íCr›Co‹dö©e
;

168 
RECT_S
 
°Cr›Re˘
;

169 }
	tVPSS_CROP_INFO_S
;

172 
	shiVPSS_GRP_ATTR_S


175 
HI_U32
 
u32MaxW
;

176 
HI_U32
 
u32MaxH
;

177 
PIXEL_FORMAT_E
 
íPixFmt
;

179 
HI_BOOL
 
bIeEn
;

180 
HI_BOOL
 
bDciEn
;

181 
HI_BOOL
 
bNrEn
;

182 
HI_BOOL
 
bHi°En
;

183 
VPSS_DIE_MODE_E
 
íDõMode
;

184 }
	tVPSS_GRP_ATTR_S
;

187 
	ehiVPSS_CHN_MODE_E


189 
VPSS_CHN_MODE_AUTO
 = 0,

190 
VPSS_CHN_MODE_USER


191 }
	tVPSS_CHN_MODE_E
;

194 
	shiVPSS_CHN_MODE_S


196 
VPSS_CHN_MODE_E
 
íChnMode
;

197 
HI_U32
 
u32Width
;

198 
HI_U32
 
u32Height
;

199 
HI_BOOL
 
bDoubÀ
;

200 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

201 
COMPRESS_MODE_E
 
íCom¥essMode
;

203 }
	tVPSS_CHN_MODE_S
;

205 
	shiVPSS_FRAME_TIMEOUT_S


207 
VIDEO_FRAME_INFO_S
 
°VideoFøme
;

208 
HI_U32
 
u32MûliSec
;

209 }
	tVPSS_FRAME_TIMEOUT_S
;

211 
	shiVPSS_GET_GRP_FRAME_S


213 
HI_U32
 
u32FømeIndex
;

214 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
;

215 }
	tVPSS_GET_GRP_FRAME_S
;

218 
	shiVPSS_NR_PARAM_S


220 
HI_U32
 
u32SfSåígth
;

221 
HI_U32
 
u32TfSåígth
;

222 
HI_U32
 
u32CfSåígth
;

223 
HI_U32
 
u32DeMŸi⁄Bluºög
;

224 }
	tVPSS_NR_PARAM_S
;

227 
	shiVPSS_CHN_PARAM_S


229 
HI_U32
 
u32SpSåígth
;

230 } 
	tVPSS_CHN_PARAM_S
;

233 
	shiVPSS_PRESCALE_INFO_S


235 
HI_BOOL
 
bPªSˇÀ
;

236 
SIZE_S
 
°De°Size
;

237 }
	tVPSS_PRESCALE_INFO_S
;

240 
	shiVPSS_SIZER_INFO_S


242 
HI_BOOL
 
bSizî
;

243 
SIZE_S
 
°Size
;

244 }
	tVPSS_SIZER_INFO_S
;

247 
	shiVPSS_FRAME_RATE_S


249 
HI_S32
 
s32SrcFrmR©e
;

250 
HI_S32
 
s32D°FrmR©e
;

251 } 
	tVPSS_FRAME_RATE_S
;

254 
	shiVPSS_EXT_CHN_ATTR_S


256 
VPSS_CHN
 
s32BödChn
;

257 
HI_U32
 
u32Width
;

258 
HI_U32
 
u32Height
;

259 
HI_S32
 
s32SrcFømeR©e
;

260 
HI_S32
 
s32D°FømeR©e
;

261 
PIXEL_FORMAT_E
 
íPixñF‹m©
;

262 }
	tVPSS_EXT_CHN_ATTR_S
;

264 
	shiVPSS_REGION_INFO_S


266 
RECT_S
 *
p°Regi⁄
;

267 
HI_U32
 
u32Regi⁄Num
;

268 }
	tVPSS_REGION_INFO_S
;

270 
	shiVPSS_GET_REGION_LUMA_S


272 
VPSS_REGION_INFO_S
 
°Regi⁄Info
;

273 
HI_U32
* 
pu32LumaD©a
;

274 
HI_S32
 
s32MûliSec
;

277 }
	tVPSS_GET_REGION_LUMA_S
;

280 
	ehiVPSS_REGION_ATTACH_MODE_E


282 
REGION_ATTACH_TO_GROUP
 = 0,

283 
REGION_ATTACH_TO_CHN
 = 1,

284 
REGION_ATTACH_MODE_BUTT


285 }
	tVPSS_REGION_ATTACH_MODE_E
;

288 #ifde‡
__˝lu•lus


289 #i‡
__˝lu•lus


	@HiSDK/include/hi_common.h

27 #i‚de‡
__HI_COMMON_H__


28 
	#__HI_COMMON_H__


	)

30 
	~"hi_ty≥.h
"

31 
	~"hi_m©h.h
"

32 
	~"hi_deföes.h
"

33 
	~"hi_comm_video.h
"

35 #ifde‡
__˝lu•lus


36 #i‡
__˝lu•lus


41 #i‚de‡
VER_X


42 
	#VER_X
 1

	)

45 #i‚de‡
VER_Y


46 
	#VER_Y
 0

	)

49 #i‚de‡
VER_Z


50 
	#VER_Z
 0

	)

53 #i‚de‡
VER_P


54 
	#VER_P
 0

	)

57 #i‚de‡
VER_B


58 
	#VER_B
 0

	)

61 #ifde‡
HI_DEBUG


62 
	#VER_D
 " Debug"

	)

64 
	#VER_D
 " Rñó£"

	)

67 
	#__MK_VERSION
(
x
,
y
,
z
,
p
,
b
Ë#x"."#y"."#z"."#p" B0"#b

	)

68 
	#MK_VERSION
(
x
,
y
,
z
,
p
,
b
Ë
	`__MK_VERSION
(x,y,z,p,b)

	)

69 
	#MPP_VERSION
 
CHIP_NAME
 
MPP_VER_PRIX
 
	`MK_VERSION
(
VER_X
,
VER_Y
,
VER_Z
,
VER_P
,
VER_B
Ë
VER_D


	)

71 
	#VERSION_NAME_MAXLEN
 64

	)

72 
	shiMPP_VERSION_S


74 
HI_CHAR
 
aVîsi⁄
[
VERSION_NAME_MAXLEN
];

75 }
	tMPP_VERSION_S
;

77 
	shiPOINT_S


79 
HI_S32
 
s32X
;

80 
HI_S32
 
s32Y
;

81 }
	tPOINT_S
;

83 
	shiSIZE_S


85 
HI_U32
 
u32Width
;

86 
HI_U32
 
u32Height
;

87 } 
	tSIZE_S
;

89 
	shiRECT_S


91 
HI_S32
 
s32X
;

92 
HI_S32
 
s32Y
;

93 
HI_U32
 
u32Width
;

94 
HI_U32
 
u32Height
;

95 }
	tRECT_S
;

97 
	ehiROTATE_E


99 
ROTATE_NONE
 = 0,

100 
ROTATE_90
 = 1,

101 
ROTATE_180
 = 2,

102 
ROTATE_270
 = 3,

103 
ROTATE_BUTT


104 } 
	tROTATE_E
;

106 
	shiBORDER_S


108 
HI_U32
 
u32T›Width
;

109 
HI_U32
 
u32BŸtomWidth
;

110 
HI_U32
 
u32Le·Width
;

111 
HI_U32
 
u32RightWidth
;

112 
HI_U32
 
u32Cﬁ‹
;

113 } 
	tBORDER_S
;

115 
HI_S32
 
	tAI_CHN
;

116 
HI_S32
 
	tAO_CHN
;

117 
HI_S32
 
	tAENC_CHN
;

118 
HI_S32
 
	tADEC_CHN
;

119 
HI_S32
 
	tAUDIO_DEV
;

120 
HI_S32
 
	tAVENC_CHN
;

121 
HI_S32
 
	tVI_DEV
;

122 
HI_S32
 
	tVI_WAY
;

123 
HI_S32
 
	tVI_CHN
;

124 
HI_S32
 
	tVO_DEV
;

125 
HI_S32
 
	tVO_LAYER
;

126 
HI_S32
 
	tVO_CHN
;

127 
HI_S32
 
	tVO_WBC
;

128 
HI_S32
 
	tGRAPHIC_LAYER
;

129 
HI_S32
 
	tVENC_CHN
;

130 
HI_S32
 
	tVDEC_CHN
;

131 
HI_S32
 
	tVENC_GRP
;

132 
HI_S32
 
	tVO_GRP
;

133 
HI_S32
 
	tVDA_CHN
;

134 
HI_S32
 
	tIVE_HANDLE
;

135 
HI_S32
 
	tISP_DEV
;

136 
HI_S32
 
	tSENSOR_ID
;

138 
	#HI_INVALID_CHN
 (-1)

	)

139 
	#HI_INVALID_WAY
 (-1)

	)

140 
	#HI_INVALID_LAYER
 (-1)

	)

141 
	#HI_INVALID_DEV
 (-1)

	)

142 
	#HI_INVALID_HANDLE
 (-1)

	)

143 
	#HI_INVALID_VALUE
 (-1)

	)

144 
	#HI_INVALID_TYPE
 (-1)

	)

146 
	ehiMOD_ID_E


148 
HI_ID_CMPI
 = 0,

149 
HI_ID_VB
 = 1,

150 
HI_ID_SYS
 = 2,

151 
HI_ID_RGN
 = 3,

152 
HI_ID_CHNL
 = 4,

153 
HI_ID_VDEC
 = 5,

154 
HI_ID_GROUP
 = 6,

155 
HI_ID_VPSS
 = 7,

156 
HI_ID_VENC
 = 8,

157 
HI_ID_VDA
 = 9,

158 
HI_ID_H264E
 = 10,

159 
HI_ID_JPEGE
 = 11,

160 
HI_ID_MPEG4E
 = 12,

161 
HI_ID_H264D
 = 13,

162 
HI_ID_JPEGD
 = 14,

163 
HI_ID_VOU
 = 15,

164 
HI_ID_VIU
 = 16,

165 
HI_ID_DSU
 = 17,

166 
HI_ID_VALG
 = 18,

167 
HI_ID_RC
 = 19,

168 
HI_ID_AIO
 = 20,

169 
HI_ID_AI
 = 21,

170 
HI_ID_AO
 = 22,

171 
HI_ID_AENC
 = 23,

172 
HI_ID_ADEC
 = 24,

173 
HI_ID_AVENC
 = 25,

174 
HI_ID_PCIV
 = 26,

175 
HI_ID_PCIVFMW
 = 27,

176 
HI_ID_ISP
 = 28,

177 
HI_ID_IVE
 = 29,

179 
HI_ID_DCCM
 = 31,

180 
HI_ID_DCCS
 = 32,

181 
HI_ID_PROC
 = 33,

182 
HI_ID_LOG
 = 34,

183 
HI_ID_MST_LOG
 = 35,

184 
HI_ID_VD
 = 36,

186 
HI_ID_VCMP
 = 38,

187 
HI_ID_FB
 = 39,

188 
HI_ID_HDMI
 = 40,

189 
HI_ID_VOIE
 = 41,

190 
HI_ID_TDE
 = 42,

191 
HI_ID_USR
 = 43,

192 
HI_ID_VEDU
 = 44,

193 
HI_ID_VGS
 = 45,

195 
HI_ID_BUTT
,

196 } 
	tMOD_ID_E
;

198 
	shiMPP_CHN_S


200 
MOD_ID_E
 
íModId
;

201 
HI_S32
 
s32DevId
;

202 
HI_S32
 
s32ChnId
;

203 } 
	tMPP_CHN_S
;

205 
	#MPP_MOD_VIU
 "vi"

	)

206 
	#MPP_MOD_VOU
 "vo"

	)

207 
	#MPP_MOD_HDMI
 "hdmi"

	)

208 
	#MPP_MOD_DSU
 "dsu"

	)

209 
	#MPP_MOD_VGS
 "vgs"

	)

211 
	#MPP_MOD_CHNL
 "ch∆"

	)

212 
	#MPP_MOD_VENC
 "víc"

	)

213 
	#MPP_MOD_GRP
 "gΩ"

	)

214 
	#MPP_MOD_VDA
 "vda"

	)

215 
	#MPP_MOD_VPSS
 "vpss"

	)

216 
	#MPP_MOD_RGN
 "rgn"

	)

217 
	#MPP_MOD_IVE
 "ive"

	)

219 
	#MPP_MOD_H264E
 "h264e"

	)

220 
	#MPP_MOD_JPEGE
 "j≥ge"

	)

221 
	#MPP_MOD_MPEG4E
 "m≥g4e"

	)

223 
	#MPP_MOD_VDEC
 "vdec"

	)

224 
	#MPP_MOD_H264D
 "h264d"

	)

225 
	#MPP_MOD_JPEGD
 "j≥gd"

	)

227 
	#MPP_MOD_AI
 "ai"

	)

228 
	#MPP_MOD_AO
 "ao"

	)

229 
	#MPP_MOD_AENC
 "´nc"

	)

230 
	#MPP_MOD_ADEC
 "adec"

	)

231 
	#MPP_MOD_AIO
 "aio"

	)

233 
	#MPP_MOD_VB
 "vb"

	)

234 
	#MPP_MOD_SYS
 "sys"

	)

235 
	#MPP_MOD_CMPI
 "cmpi"

	)

237 
	#MPP_MOD_PCIV
 "pciv"

	)

238 
	#MPP_MOD_PCIVFMW
 "pcivfmw"

	)

240 
	#MPP_MOD_PROC
 "¥oc"

	)

241 
	#MPP_MOD_LOG
 "logmµ"

	)

242 
	#MPP_MOD_MST_LOG
 "m°log"

	)

244 
	#MPP_MOD_DCCM
 "dccm"

	)

245 
	#MPP_MOD_DCCS
 "dccs"

	)

247 
	#MPP_MOD_VCMP
 "vcmp"

	)

248 
	#MPP_MOD_FB
 "fb"

	)

250 
	#MPP_MOD_RC
 "rc"

	)

252 
	#MPP_MOD_VOIE
 "voõ"

	)

254 
	#MPP_MOD_TDE
 "tde"

	)

255 
	#MPP_MOD_ISP
 "i•"

	)

256 
	#MPP_MOD_USR
 "u§"

	)

261 
PT_PCMU
 = 0,

262 
PT_1016
 = 1,

263 
PT_G721
 = 2,

264 
PT_GSM
 = 3,

265 
PT_G723
 = 4,

266 
PT_DVI4_8K
 = 5,

267 
PT_DVI4_16K
 = 6,

268 
PT_LPC
 = 7,

269 
PT_PCMA
 = 8,

270 
PT_G722
 = 9,

271 
PT_S16BE_STEREO
 = 10,

272 
PT_S16BE_MONO
 = 11,

273 
PT_QCELP
 = 12,

274 
PT_CN
 = 13,

275 
PT_MPEGAUDIO
 = 14,

276 
PT_G728
 = 15,

277 
PT_DVI4_3
 = 16,

278 
PT_DVI4_4
 = 17,

279 
PT_G729
 = 18,

280 
PT_G711A
 = 19,

281 
PT_G711U
 = 20,

282 
PT_G726
 = 21,

283 
PT_G729A
 = 22,

284 
PT_LPCM
 = 23,

285 
PT_CñB
 = 25,

286 
PT_JPEG
 = 26,

287 
PT_CUSM
 = 27,

288 
PT_NV
 = 28,

289 
PT_PICW
 = 29,

290 
PT_CPV
 = 30,

291 
PT_H261
 = 31,

292 
PT_MPEGVIDEO
 = 32,

293 
PT_MPEG2TS
 = 33,

294 
PT_H263
 = 34,

295 
PT_SPEG
 = 35,

296 
PT_MPEG2VIDEO
 = 36,

297 
PT_AAC
 = 37,

298 
PT_WMA9STD
 = 38,

299 
PT_HEAAC
 = 39,

300 
PT_PCM_VOICE
 = 40,

301 
PT_PCM_AUDIO
 = 41,

302 
PT_AACLC
 = 42,

303 
PT_MP3
 = 43,

304 
PT_ADPCMA
 = 49,

305 
PT_AEC
 = 50,

306 
PT_X_LD
 = 95,

307 
PT_H264
 = 96,

308 
PT_D_GSM_HR
 = 200,

309 
PT_D_GSM_EFR
 = 201,

310 
PT_D_L8
 = 202,

311 
PT_D_RED
 = 203,

312 
PT_D_VDVI
 = 204,

313 
PT_D_BT656
 = 220,

314 
PT_D_H263_1998
 = 221,

315 
PT_D_MP1S
 = 222,

316 
PT_D_MP2P
 = 223,

317 
PT_D_BMPEG
 = 224,

318 
PT_MP4VIDEO
 = 230,

319 
PT_MP4AUDIO
 = 237,

320 
PT_VC1
 = 238,

321 
PT_JVC_ASF
 = 255,

322 
PT_D_AVI
 = 256,

323 
PT_DIVX3
 = 257,

324 
PT_AVS
 = 258,

325 
PT_REAL8
 = 259,

326 
PT_REAL9
 = 260,

327 
PT_VP6
 = 261,

328 
PT_VP6F
 = 262,

329 
PT_VP6A
 = 263,

330 
PT_SORENSON
 =264,

331 
PT_MAX
 = 265,

333 
PT_AMR
 = 1001,

334 
PT_MJPEG
 = 1002,

335 
PT_AMRWB
 = 1003,

336 
PT_BUTT


337 }
	tPAYLOAD_TYPE_E
;

340 #ifde‡
__˝lu•lus


341 #i‡
__˝lu•lus


	@HiSDK/include/hi_debug.h

36 #i‚de‡
__HI_DEBUG_H__


37 
	#__HI_DEBUG_H__


	)

39 #i‚de‡
__KERNEL__


40 
	~<°d¨g.h
>

43 
	~"hi_ty≥.h
"

44 
	~"hi_comm⁄.h
"

46 #ifde‡
__˝lu•lus


47 #i‡
__˝lu•lus


52 
	#_EX__FILE_LINE
(
fxx
,
lxx
Ë"[Fûe]:"fxx"\n[Löe]:"#lxx"\n[Info]:"

	)

53 
	#EX__FILE_LINE
(
fxx
,
lxx
Ë
	`_EX__FILE_LINE
(fxx,lxx)

	)

54 
	#__FILE_LINE__
 
	`EX__FILE_LINE
(
__FILE__
, 
__LINE__
)

	)

56 
	#HI_DBG_EMERG
 0

	)

57 
	#HI_DBG_ALERT
 1

	)

58 
	#HI_DBG_CRIT
 2

	)

59 
	#HI_DBG_ERR
 3

	)

60 
	#HI_DBG_WARN
 4

	)

61 
	#HI_DBG_NOTICE
 5

	)

62 
	#HI_DBG_INFO
 6

	)

63 
	#HI_DBG_DEBUG
 7

	)

65 
	shiLOG_LEVEL_CONF_S


67 
MOD_ID_E
 
íModId
;

68 
HI_S32
 
s32Levñ
;

69 
HI_CHAR
 
cModName
[16];

70 } 
	tLOG_LEVEL_CONF_S
;

72 #i‚de‡
__KERNEL__


77 
	#HI_PRINT
 
¥ötf


	)

82 
	#HI_ASSERT
(
ex¥
) \

84 i‡(!(
ex¥
)) { \

85 
	`¥ötf
("\nASSERT failedát:\n"\

90 
__FILE__
,
__FUNCTION__
, 
__LINE__
, #expr);\

91 
	`_exô
(-1);\

93 }0)

	)

98 
	#HI_TRACE
(
Àvñ
, 
íModId
, 
fmt
...Ë
	`Ârötf
(
°dîr
,##fmt)

	)

100 
	#HI_ASSERT
(
ex¥
)

	)

101 
	#HI_TRACE
(
Àvñ
, 
íModId
, 
fmt
...)

	)

109 
	#HI_PRINT
 
¥ötk


	)

111 
HI_S32
 
HI_ChkLogLevñ
(HI_S32 
s32LevÀ
, 
MOD_ID_E
 
íModId
);

112 
asmlökage
 
HI_LOG
(
HI_S32
 
Àvñ
, 
MOD_ID_E
 
íModId
,c⁄° *
fmt
, ...);

117 
	#HI_ASSERT
(
ex¥
) \

119 i‡(!(
ex¥
)) { \

120 
	`∑nic
("\nASSERT failedát:\n" \

125 
__FILE__
,
__FUNCTION__
, 
__LINE__
, #expr);\

127 }0)

	)

132 
	#HI_TRACE
 
HI_LOG


	)

134 
	#HI_ASSERT
(
ex¥
)

	)

135 
	#HI_TRACE
(
Àvñ
, 
íModId
, 
fmt
...)

	)

140 #ifde‡
__˝lu•lus


141 #i‡
__˝lu•lus


	@HiSDK/include/hi_defines.h

13 #i‚de‡
__HI_DEFINES_H__


14 
	#__HI_DEFINES_H__


	)

16 #ifde‡
__˝lu•lus


17 #i‡
__˝lu•lus


23 
	#HI3535_V100
 0x35350100

	)

26 
	#HI35xx_Vxxx
 0x35000000

	)

28 #i‚de‡
HICHIP


29 
	#HICHIP
 
HI3535_V100


	)

32 #i‡
HICHIP
==
HI3535_V100


33 
	#CHIP_NAME
 "Hi3535"

	)

34 
	#MPP_VER_PRIX
 "_MPP_V"

	)

35 #ñi‡
HICHIP
==
HI35xx_Vxxx


36 #îr‹ 
HuHu
, 
I
 
am
 
™
 
dummy
 
chù


38 #îr‹ 
HICHIP
 
deföe
 
may
 
be
 
îr‹


41 
	#LINE_LEN_BIT
 5

	)

42 
	#LINE_LEN
 (1<<
LINE_LEN_BIT
)

	)

43 
	#LINE_BASE_MASK
 (~(
LINE_LEN
-1))

	)

44 
ölöe
 
InvÆid©eDˇche
(
addr
, 
Àn
)

46 
íd
;

50 
addr
 &
LINE_BASE_MASK
;

51 
Àn
 >>
LINE_LEN_BIT
;

52 
íd
 = 
addr
 + 
Àn
*
LINE_LEN
;

54 
addr
 !
íd
)

56 
asm
("m¸Ö15, 0, %0, c7, c6, 1"::"r"(
addr
));

57 
addr
 +
LINE_LEN
;

62 
ölöe
 
FlushDˇche
(
addr
, 
Àn
)

64 
íd
;

69 
addr
 &
LINE_BASE_MASK
;

70 
Àn
 >>
LINE_LEN_BIT
;

71 
íd
 = 
addr
 + 
Àn
*
LINE_LEN
;

73 
addr
 !
íd
)

75 
asm
("m¸Ö15, 0, %0, c7, c10, 1"::"r"(
addr
));

76 
addr
 +
LINE_LEN
;

81 
	#DEFAULT_ALIGN
 16

	)

82 
	#MAX_MMZ_NAME_LEN
 16

	)

84 
	#MAX_NODE_NUM
 16

	)

87 
	#VDA_MAX_NODE_NUM
 32

	)

88 
	#VDA_MAX_INTERNAL
 256

	)

89 
	#VDA_CHN_NUM_MAX
 32

	)

90 
	#VDA_MAX_WIDTH
 960

	)

91 
	#VDA_MAX_HEIGHT
 960

	)

92 
	#VDA_MIN_WIDTH
 32

	)

93 
	#VDA_MIN_HEIGHT
 32

	)

97 
	#VENC_MAX_NAME_LEN
 16

	)

98 
	#VENC_PIC_ALIGN
 16

	)

99 
	#VENC_MAX_CHN_NUM
 64

	)

100 
	#VENC_MAX_GRP_NUM
 64

	)

101 
	#H264E_MAX_WIDTH
 1920

	)

102 
	#H264E_MAX_HEIGHT
 2048

	)

103 
	#H264E_MIN_WIDTH
 160

	)

104 
	#H264E_MIN_HEIGHT
 64

	)

105 
	#JPEGE_MAX_WIDTH
 8192

	)

106 
	#JPEGE_MAX_HEIGHT
 8192

	)

107 
	#JPEGE_MIN_WIDTH
 32

	)

108 
	#JPEGE_MIN_HEIGHT
 32

	)

109 
	#VENC_MAX_ROI_NUM
 8

	)

110 
	#H264E_MIN_HW_INDEX
 0

	)

111 
	#H264E_MAX_HW_INDEX
 5

	)

112 
	#H264E_MIN_VW_INDEX
 0

	)

113 
	#H264E_MAX_VW_INDEX
 2

	)

114 
	#MPEG4E_MAX_HW_INDEX
 1

	)

115 
	#MPEG4E_MAX_VW_INDEX
 0

	)

119 
	#VDEC_MAX_COMPRESS_WIDTH
 1920

	)

120 
	#VDEC_MAX_CHN_NUM
 64

	)

121 
	#VDH_VEDU_CHN
 64

	)

122 
	#VEDU_MAX_CHN_NUM
 80

123 
	#MAX_VDEC_CHN
 
VDEC_MAX_CHN_NUM


	)

124 
	#BUF_RESERVE_LENTH
 64

	)

125 
	#MAX_JPEG_TOTAL
 (2048*1536)

	)

126 
	#ONE_SLICE_SIZE_MAX
 0x80000

	)

127 
	#ONE_ECS_SIZE_MAX
 0x100000

	)

128 
	#H264D_MAX_SLICENUM
 137

	)

129 
	#VEDU_H264D_ERRRATE
 10

	)

130 
	#VEDU_H264D_FULLERR
 100

	)

133 #i‡
HICHIP
==
HI3535_V100


136 
	#VDH_H264D_MAX_WIDTH
 4096

	)

137 
	#VDH_H264D_MAX_HEIGHT
 4096

	)

138 
	#VDH_H264D_MIN_WIDTH
 64

	)

139 
	#VDH_H264D_MIN_HEIGHT
 64

	)

142 
	#VDH_OTHER_MAX_WIDTH
 1920

	)

143 
	#VDH_OTHER_MAX_HEIGHT
 1088

	)

144 
	#VDH_OTHER_MIN_WIDTH
 64

	)

145 
	#VDH_OTHER_MIN_HEIGHT
 64

	)

148 
	#JPEGD_MAX_WIDTH
 8192

	)

149 
	#JPEGD_MAX_HEIGHT
 8192

	)

150 
	#JPEGD_MIN_WIDTH
 8

	)

151 
	#JPEGD_MIN_HEIGHT
 8

	)

155 
	#VEDU_H264D_MAX_WIDTH
 1920

	)

156 
	#VEDU_H264D_MAX_HEIGHT
 2048

	)

157 
	#VEDU_H264D_MIN_WIDTH
 80

	)

158 
	#VEDU_H264D_MIN_HEIGHT
 64

	)

161 #îr‹ 
HICHIP
 
deföe
 
may
 
be
 
îr‹


167 
	#RGN_HANDLE_MAX
 1024

	)

168 
	#OVERLAY_MAX_NUM_VENC
 8

	)

169 
	#OVERLAY_MAX_NUM_VPSS
 8

	)

170 
	#OVERLAYEX_MAX_NUM_PCIV
 16

	)

171 
	#COVER_MAX_NUM_VPSS
 4

	)

175 
	#MAX_COVER_NUM
 4

	)

176 
	#MAX_VIOVERLAY_NUM
 8

	)

177 
	#MAX_COVEREX_REGION_NUM
 16

	)

178 
	#MAX_REGION_NUM
 8

	)

179 
	#OVERLAY_START_X_ALIGN
 8

	)

180 
	#OVERLAY_START_Y_ALIGN
 2

	)

181 
	#MAX_VIOVERLAY_ALPHA
 255

	)

190 
	#VIU_MAX_DEV_NUM
 4

	)

191 
	#VIU_MAX_WAY_NUM_PER_DEV
 4

	)

192 
	#VIU_MAX_CHN_NUM_PER_DEV
 4

	)

193 
	#VIU_MAX_PHYCHN_NUM
 16

	)

194 
	#VIU_EXT_CHN_START
 (
VIU_MAX_PHYCHN_NUM
 + 
VIU_MAX_CAS_CHN_NUM
)

	)

195 
	#VIU_MAX_EXT_CHN_NUM
 0

	)

196 
	#VIU_MAX_EXTCHN_BIND_PER_CHN
 0

	)

198 
	#VIU_MAX_CHN_NUM
 (
VIU_MAX_PHYCHN_NUM
 + 
VIU_MAX_EXT_CHN_NUM
)

	)

199 
	#VIU_CHNID_DEV_FACTOR
 2

	)

202 
	#VIU_MAX_CAS_CHN_NUM
 2

	)

203 
	#VIU_SUB_CHN_START
 16

	)

204 
	#VIU_CAS_CHN_START
 32

	)

208 
	#VIU_MAX_VBI_NUM
 2

	)

210 
	#VIU_MAX_VBI_LEN
 8

	)

212 
	#VO_MIN_CHN_WIDTH
 32

	)

213 
	#VO_MIN_CHN_HEIGHT
 32

	)

215 
	#VO_MAX_ZOOM_RATIO
 1000

	)

219 
	#VO_MAX_DEV_NUM
 6

	)

220 
	#VO_MAX_PHY_DEV
 3

	)

221 
	#VO_MAX_CHN_NUM
 64

	)

222 
	#VO_SYNC_MAX_GRP
 16

	)

223 
	#VO_SYNC_MAX_CHN
 64

	)

224 
	#VO_MIN_TOLERATE
 1

	)

225 
	#VO_MAX_TOLERATE
 100000

	)

226 
	#VO_MAX_SOLIDDRAW
 128

	)

227 
	#VO_MIN_DISP_BUF
 5

	)

228 
	#VO_MAX_DISP_BUF
 15

	)

229 
	#VO_MIN_VIRT_BUF
 3

	)

230 
	#VO_MAX_VIRT_BUF
 15

	)

232 
	#VIVO_CSCD_VBI_ID
 0

	)

233 
	#VIVO_CSCD_VBI_X
 0

	)

234 
	#VIVO_CSCD_VBI_Y
 0

	)

235 
	#VIVO_CSCD_VBI_LEN
 2

	)

236 
	#VIVO_CSCD_VBI_LOC
 
VI_VBI_LOCAL_ODD_FRONT


	)

237 
	#VIVO_CSCD_VBI_DATA_WORD
 0

	)

238 
	#VIVO_CSCD_VBI_DATA_BIT
 (0x01 << 31)

	)

241 
	#VO_MAX_DEV_NUM
 7

	)

242 
	#VO_MAX_LAYER_NUM
 8

	)

243 
	#VHD_MAX_CHN_NUM
 64

	)

244 
	#VO_MAX_CHN_NUM
 
VHD_MAX_CHN_NUM


	)

245 
	#VO_MAX_LAYER_IN_DEV
 2

	)

250 
	#VO_CAS_MAX_PAT
 128

	)

251 
	#VO_CAS_MAX_POS_32RGN
 32

	)

252 
	#VO_CAS_MAX_POS_64RGN
 64

	)

254 
	#VO_MAX_VIRT_DEV_NUM
 4

	)

255 
	#VO_VIRT_DEV_0
 3

	)

256 
	#VO_VIRT_DEV_1
 4

	)

257 
	#VO_VIRT_DEV_2
 5

	)

258 
	#VO_VIRT_DEV_3
 6

	)

260 
	#VO_MAX_GFX_LAYER_PER_DEV
 3

	)

261 
	#VO_MAX_GRAPHICS_LAYER_NUM
 4

	)

262 
	#MDDRC_ZONE_MAX_NUM
 32

	)

264 
	#VO_MAX_WBC_NUM
 1

	)

265 
	#VO_MAX_PRIORITY
 2

	)

268 
	#VO_MIN_TOLERATE
 1

	)

269 
	#VO_MAX_TOLERATE
 100000

	)

271 
	#AI_DEV_MAX_NUM
 1

	)

272 
	#AO_DEV_MIN_NUM
 0

	)

273 
	#AO_DEV_MAX_NUM
 2

	)

274 
	#AIO_MAX_NUM
 2

	)

275 
	#AIO_MAX_CHN_NUM
 16

	)

276 
	#AENC_MAX_CHN_NUM
 32

	)

277 
	#ADEC_MAX_CHN_NUM
 32

	)

280 
	#VPSS_MAX_GRP_NUM
 128

	)

282 
	#VPSS_MAX_PHY_CHN_NUM
 3

	)

283 
	#VPSS_MAX_EXT_CHN_NUM
 3

	)

284 
	#VPSS_MAX_CHN_NUM
 (
VPSS_MAX_PHY_CHN_NUM
 + 
VPSS_MAX_EXT_CHN_NUM
)

	)

286 
	#VPSS_BSTR_CHN
 0

	)

287 
	#VPSS_LSTR_CHN
 1

	)

288 
	#VPSS_PRE0_CHN
 2

	)

290 
	#VPSS_INVALID_CHN
 -1

	)

293 
	#PCIV_MAX_CHN_NUM
 128

	)

295 
	#RC_MAD_HIST_SIZE
 64

	)

296 
	#RC_MSE_HIST_SIZE
 128

	)

297 
	#RC_MAX_BLINK_QP
 40

	)

299 
	#RGN_MIN_WIDTH
 2

	)

300 
	#RGN_MIN_HEIGHT
 2

	)

301 
	#RGN_MAX_WIDTH
 4096

	)

302 
	#RGN_MAX_HEIGHT
 4096

	)

303 
	#RGN_ALIGN
 2

	)

315 
	#VB_W_ALIGN
 16

	)

316 
	#VB_H_ALIGN
 32

	)

317 
	#VB_ALIGN
(
x
, 
a
Ë(◊Ë* (((xË+ (aË- 1Ë/ (a)))

	)

321 
	#VB_PIC_BLK_SIZE
(
Width
, 
Height
, 
Ty≥
, 
size
)\

323 
u32AlignWidth
;\

324 
u32AlignHeight
;\

325 
u32HódSize
;\

326 i‡(
Ty≥
==
PT_H264
 || Ty≥==
PT_MP4VIDEO
)\

328 
u32AlignWidth
 = 
	`VB_ALIGN
(
Width
,16);\

329 
u32AlignHeight

	`VB_ALIGN
(
Height
,32);\

330 
u32HódSize
 = 
	`VB_ALIGN
((
u32AlignWidth
 + 127)/128, 16Ë* 
u32AlignHeight
;\

331 
size
 = ( (
u32AlignWidth
 * 
u32AlignHeight
 + 
u32HódSize
) * 3) >> 1;\

335 
u32AlignWidth
 = 
	`VB_ALIGN
(
Width
,64);\

336 
u32AlignHeight

	`VB_ALIGN
(
Height
,16);\

337 
size
 = (
u32AlignWidth
 * 
u32AlignHeight
 * 3) >> 1;\

339 }0)

	)

343 
	#VB_PMV_BLK_SIZE
(
Width
, 
Height
, 
size
)\

345 
WidthInMb
, 
HeightInMb
;\

346 
CﬁMbSize
;\

347 
WidthInMb
 = (
Width
 + 15) >> 4;\

348 
HeightInMb
 = (
Height
 + 15) >> 4;\

349 
CﬁMbSize
 = 16*4;\

350 
size
 = 
	`VB_ALIGN
(
CﬁMbSize
 * 
WidthInMb
 * 
HeightInMb
, 128);\

351 }0)

	)

353 #ifde‡
__˝lu•lus


354 #i‡
__˝lu•lus


	@HiSDK/include/hi_errno.h

34 #i‚de‡
__HI_ERRNO_H__


35 
	#__HI_ERRNO_H__


	)

37 
	~"hi_debug.h
"

39 #ifde‡
__˝lu•lus


40 #i‡
__˝lu•lus


50 
	#HI_ERR_APPID
 (0x80000000L + 0x20000000L)

	)

52 
	ehiERR_LEVEL_E


54 
EN_ERR_LEVEL_DEBUG
 = 0,

55 
EN_ERR_LEVEL_INFO
,

56 
EN_ERR_LEVEL_NOTICE
,

57 
EN_ERR_LEVEL_WARNING
,

58 
EN_ERR_LEVEL_ERROR
,

59 
EN_ERR_LEVEL_CRIT
,

60 
EN_ERR_LEVEL_ALERT
,

61 
EN_ERR_LEVEL_FATAL
,

62 
EN_ERR_LEVEL_BUTT


63 }
	tERR_LEVEL_E
;

73 
	#HI_DEF_ERR
–
moduÀ
, 
Àvñ
, 
îrid
) \

74 ((
HI_S32
)–(
HI_ERR_APPID
Ë| ((
moduÀ
Ë<< 16 ) | ((
Àvñ
)<<13Ë| (
îrid
Ë))

	)

79 
	ehiEN_ERR_CODE_E


81 
EN_ERR_INVALID_DEVID
 = 1,

82 
EN_ERR_INVALID_CHNID
 = 2,

83 
EN_ERR_ILLEGAL_PARAM
 = 3,

85 
EN_ERR_EXIST
 = 4,

86 
EN_ERR_UNEXIST
 = 5,

88 
EN_ERR_NULL_PTR
 = 6,

90 
EN_ERR_NOT_CONFIG
 = 7,

93 
EN_ERR_NOT_SUPPORT
 = 8,

94 
EN_ERR_NOT_PERM
 = 9,

97 
EN_ERR_NOMEM
 = 12,

98 
EN_ERR_NOBUF
 = 13,

100 
EN_ERR_BUF_EMPTY
 = 14,

101 
EN_ERR_BUF_FULL
 = 15,

103 
EN_ERR_SYS_NOTREADY
 = 16,

107 
EN_ERR_BADADDR
 = 17,

110 
EN_ERR_BUSY
 = 18,

113 
EN_ERR_BUTT
 = 63,

115 }
	tEN_ERR_CODE_E
;

124 #ifde‡
__˝lu•lus


125 #i‡
__˝lu•lus


	@HiSDK/include/hi_io.h

1 #i‚de‡
__HI_IO_H__


2 
	#__HI_IO_H__


	)

4 
	~"hi_ty≥.h
"

6 #ifde‡
__˝lu•lus


12 
HI_U8
 
IO_READ8
(
HI_U32
 
u32Addr
);

13 
HI_S32
 
IO_WRITE8
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

14 
HI_U16
 
IO_READ16
(
HI_U32
 
u32Addr
);

15 
HI_S32
 
IO_WRITE16
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

16 
HI_U32
 
IO_READ32
(HI_U32 
u32Addr
);

17 
HI_S32
 
IO_WRITE32
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

18 
HI_U32
 
ISP_Mm≠
();

19 
HI_U32
 
ISP_Munm≠
();

20 
HI_U32
 
ISP_GëExtRegAddr
();

22 
	#REG_ACCESS_WIDTH
 0

23 
	#EXT_REG_BASE
 0x10200

	)

24 
	#ISP_REG_BASE_ADDR
 0x205a0000

	)

26 
	#EXT_REG_BASE_ISP
 0x8000

	)

27 
	#EXT_REG_BASE_VIU
 0x8400

	)

28 
	#EXT_REG_BASE_VPP
 0x8600

	)

29 
	#EXT_REG_BASE_VEDU
 0x8800

	)

30 
	#EXT_REG_BASE_VOU
 0x8A00

	)

34 
	#__IO_CALC_ADDRESS_DYNAMIC
(
BASE
, 
OFFSET
Ë((
HI_U32
)(((BASE >
EXT_REG_BASE
)? 0 : 
ISP_REG_BASE_ADDR
Ë+ ((((BASE >EXT_REG_BASE)? (BASE - EXT_REG_BASEË: BASEË+ OFFSET)<<
REG_ACCESS_WIDTH
)))

	)

36 
	#IORD_32DIRECT
(
BASE
, 
OFFSET
Ë
	`IO_READ32
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)))

	)

37 
	#IORD_16DIRECT
(
BASE
, 
OFFSET
Ë
	`IO_READ16
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)))

	)

38 
	#IORD_8DIRECT
(
BASE
, 
OFFSET
Ë
	`IO_READ8
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)))

	)

40 
	#IOWR_32DIRECT
(
BASE
, 
OFFSET
, 
DATA
Ë
	`IO_WRITE32
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)), (DATA))

	)

41 
	#IOWR_16DIRECT
(
BASE
, 
OFFSET
, 
DATA
Ë
	`IO_WRITE16
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)), (DATA))

	)

42 
	#IOWR_8DIRECT
(
BASE
, 
OFFSET
, 
DATA
Ë
	`IO_WRITE8
(
	`__IO_CALC_ADDRESS_DYNAMIC
 ((BASE), (OFFSET)), (DATA))

	)

45 #ifde‡
__˝lu•lus


	@HiSDK/include/hi_jpg_type.h

11 #i‚de‡
_HI_JPG_TYPE_H_


12 
	#_HI_JPG_TYPE_H_


	)

14 #ifde‡
__˝lu•lus


15 #i‡
__˝lu•lus


20 
	~"hi_ty≥.h
"

23 
	#JPG_INVALID_HANDLE
 0xFFFFFFFF

	)

26 
HI_U32
 
	tJPG_HANDLE
;

29 
	ehiJPG_IMGTYPE_E


31 
JPG_IMGTYPE_NORMAL
 = 0,

32 
JPG_IMGTYPE_MOV_MJPEGA
,

33 
JPG_IMGTYPE_MOV_MJPEGB
,

34 
JPG_IMGTYPE_AVI_MJPEG
,

35 
JPG_IMGTYPE_BUTT


36 } 
	tJPG_IMGTYPE_E
;

39 
	ehiJPG_SOURCEFMT_E


41 
JPG_SOURCE_COLOR_FMT_YCBCR400
,

42 
JPG_SOURCE_COLOR_FMT_YCBCR420
 = 3,

43 
JPG_SOURCE_COLOR_FMT_YCBCR422BHP
,

44 
JPG_SOURCE_COLOR_FMT_YCBCR422BVP
,

45 
JPG_SOURCE_COLOR_FMT_YCBCR444
,

46 
JPG_SOURCE_COLOR_FMT_BUTT


47 }
	tJPG_SOURCEFMT_E
;

50 
	ehiJPG_OUTTYPE_E


52 
JPG_OUTTYPE_INTERLEAVE
 = 0,

53 
JPG_OUTTYPE_MACROBLOCK
,

54 
JPG_OUTTYPE_BUTT


55 }
	tJPG_OUTTYPE_E
;

58 
	ehiJPG_COLORFMT_E


60 
JPG_COLORFMT_FMT_RGB444
,

61 
JPG_COLORFMT_FMT_RGB555
,

62 
JPG_COLORFMT_FMT_RGB565
,

63 
JPG_COLOR_FMT_RGB888
,

64 
JPG_COLOR_FMT_ARGB4444
,

65 
JPG_COLOR_FMT_ARGB1555
,

66 
JPG_COLOR_FMT_ARGB8565
,

67 
JPG_COLOR_FMT_ARGB8888
,

68 
JPG_COLOR_FMT_CLUT1
,

69 
JPG_COLOR_FMT_CLUT2
,

70 
JPG_COLOR_FMT_CLUT4
,

71 
JPG_COLOR_FMT_CLUT8
,

72 
JPG_COLOR_FMT_ACLUT44
,

73 
JPG_COLOR_FMT_ACLUT88
,

74 
JPG_COLOR_FMT_A1
,

75 
JPG_COLOR_FMT_A8
,

76 
JPG_COLOR_FMT_YCBCR888
,

77 
JPG_COLOR_FMT_AYCBCR8888
,

78 
JPG_COLOR_FMT_YCBCR422
,

79 
JPG_COLOR_FMT_BYTE
,

80 
JPG_COLOR_FMT_HALFWORD
,

81 
JPG_ILCOLOR_FMT_BUTT


82 } 
	tJPG_COLORFMT_E
;

85 
	ehiJPG_MBCOLORFMT_E


87 
JPG_MBCOLOR_FMT_JPG_YCbCr400MBP
,

88 
JPG_MBCOLOR_FMT_JPG_YCbCr422MBHP
,

89 
JPG_MBCOLOR_FMT_JPG_YCbCr422MBVP
,

90 
JPG_MBCOLOR_FMT_MP1_YCbCr420MBP
,

91 
JPG_MBCOLOR_FMT_MP2_YCbCr420MBP
,

92 
JPG_MBCOLOR_FMT_MP2_YCbCr420MBI
,

93 
JPG_MBCOLOR_FMT_JPG_YCbCr420MBP
,

94 
JPG_MBCOLOR_FMT_JPG_YCbCr444MBP
,

95 
JPG_MBCOLOR_FMT_BUTT


96 } 
	tJPG_MBCOLORFMT_E
;

99 
	ehiJPG_PICTYPE_E


101 
JPG_PICTYPE_BASELINE
 = 0,

102 
JPG_PICTYPE_EXTENDED
,

103 
JPG_PICTYPE_PROGRESSIVE
,

104 
JPG_PICTYPE_LOSSLESS
,

105 
JPG_PICTYPE_BUTT


106 }
	tJPG_PICTYPE_E
;

109 
	shiJPG_PICINFO_S


111 
JPG_PICTYPE_E
 
Profûe
;

112 
HI_U32
 
Width
;

113 
HI_U32
 
Height
;

114 
HI_U32
 
Sam∂ePªcisi⁄
;

115 
HI_U32
 
Comp⁄ítNum
;

116 
JPG_SOURCEFMT_E
 
EncodeF‹m©
;

117 }
	tJPG_PICINFO_S
;

120 
	shiJPG_PRIMARYINFO_S


122 
HI_U32
 
Cou¡
;

123 
JPG_PICINFO_S
* 
pPicInfo
;

124 }
	tJPG_PRIMARYINFO_S
;

127 
	shiJPG_ILSURFACE_S


129 
JPG_COLORFMT_E
 
Cﬁ‹Fmt
;

130 
HI_U32
 
PhyAddr
;

131 
HI_VOID
* 
VútAddr
;

132 
HI_U32
 
Height
;

133 
HI_U32
 
Width
;

134 
HI_U32
 
Såide
;

135 
HI_U8
* 
pClutPhyAddr
;

136 
HI_BOOL
 
AÕhaMax255
;

137 
HI_BOOL
 
SubbyãAlign
;

138 
HI_U8
 
AÕha0
;

139 
HI_U8
 
AÕha1
;

140 } 
	tJPG_ILSURFACE_S
;

142 
	shiJPG_MBSURFACE_S


144 
JPG_MBCOLORFMT_E
 
MbFmt
;

145 
HI_U32
 
YPhyAddr
;

146 
HI_VOID
* 
YVútAddr
;

147 
HI_U32
 
YWidth
;

148 
HI_U32
 
YHeight
;

149 
HI_U32
 
YDecWidth
;

150 
HI_U32
 
YDecHeight
;

151 
HI_U32
 
YSåide
;

152 
HI_U32
 
CbCrPhyAddr
;

153 
HI_VOID
* 
CbCrVútAddr
;

154 
HI_U32
 
CbCrSåide
;

155 } 
	tJPG_MBSURFACE_S
;

158 
	shiJPG_SURFACE_S


160 
JPG_OUTTYPE_E
 
OutTy≥
;

163 
JPG_ILSURFACE_S
 
SurÁ˚
;

164 
JPG_MBSURFACE_S
 
MbSurÁ˚
;

165 }
SurÁ˚Info
;

166 }
	tJPG_SURFACE_S
;

168 #ifde‡
__˝lu•lus


169 #i‡
__˝lu•lus


	@HiSDK/include/hi_math.h

27 #i‚de‡
__HI_MATH_H__


28 
	#__HI_MATH_H__


	)

30 
	~"hi_ty≥.h
"

32 #ifde‡
__˝lu•lus


33 #i‡
__˝lu•lus


43 
	#ABS
(
x
Ë–(xË>0 ? (xË: (-(x)Ë)

	)

44 
	#SIGN
(
x
Ë–(xË>0 ? 1 : -1 )

	)

45 
	#CMP
(
x
,
y
Ë(((xË=(y)Ë? 0 : (((xË> (y)Ë? 1 : -1))

	)

55 
	#MAX2
(
x
,
y
Ë–(x)>(yË? (x):(yË)

	)

56 
	#MIN2
(
x
,
y
Ë–(x)<(yË? (x):(yË)

	)

57 
	#MAX3
(
x
,
y
,
z
Ë–(x)>(yË? 
	`MAX2
(x,zË: MAX2(y,zË)

	)

58 
	#MIN3
(
x
,
y
,
z
Ë–(x)<(yË? 
	`MIN2
(x,zË: MIN2(y,zË)

	)

59 
	#MEDIAN
(
x
,
y
,
z
Ë(((x)+(y)+(zË- 
	`MAX3
(x,y,z)Ë- 
	`MIN3
(x,y,zË)

	)

60 
	#MEAN2
(
x
,
y
Ë(((x)+(y)Ë>> 1 )

	)

68 
	#CLIP3
(
x
,
mö
,
max
Ë–(x)< (möË? (möË: ((x)>(max)?(max):(x)Ë)

	)

69 
	#WRAP_MAX
(
x
,
max
,
mö
Ë–(x)>=(maxË? (möË: (xË)

	)

70 
	#WRAP_MIN
(
x
,
mö
,
max
Ë–(x)<=(möË? (maxË: (xË)

	)

71 
	#VALUE_BETWEEN
(
x
,
mö
,
max
Ë(((x)>=(mö)Ë&& ((xË<(max)))

	)

83 
	#MULTI_OF_2_POWER
(
x
,
a
Ë(!((xË& (◊Ë- 1ËË)

	)

84 
	#CEILING_2_POWER
(
x
,
a
Ë–((xË+ (◊Ë- 1ËË& ( ~(◊Ë- 1ËË)

	)

85 
	#FLOOR_2_POWER
(
x
,
a
Ë–(xË& (~(◊Ë- 1ËË)

	)

86 
	#HIALIGN
(
x
, 
a
Ë(◊Ë* (((xË+ (aË- 1Ë/ (a)))

	)

87 
	#HICEILING
(
x
, 
a
Ë(((x)+◊)-1)/◊))

	)

95 
	#SPAN
(
ty≥
, 
begö
, 
íd
)\

97 
ty≥
 
b
 = (
begö
); \

98 
ty≥
 
e
 = (
íd
); \

99 (
ty≥
)((
b
 >
e
) ? (b -É) : (b + ((~((type)0))-e))); \

100 })

	)

106 
	#ENDIAN32
–
x
 ) \

107 ––(
x
) << 24 ) | \

108 ––(
x
) & 0x0000ff00 ) << 8 ) | \

109 ––(
x
) & 0x00ff0000 ) >> 8 ) | \

110 ––(
x
Ë>> 24 ) & 0x000000f‡Ë)

	)

112 
__ölöe
 
HI_BOOL
 
IS_LITTLE_END
()

114 
	uunEND_TEST_U


116 
HI_CHAR
 
cTe°
[4];

117 
HI_U32
 
u32Te°
;

118 } 
unEndTe°
;

120 
unEndTe°
.
cTe°
[0] = 0x01;

121 
unEndTe°
.
cTe°
[1] = 0x02;

122 
unEndTe°
.
cTe°
[2] = 0x03;

123 
unEndTe°
.
cTe°
[3] = 0x04;

125  (
unEndTe°
.
u32Te°
 > 0x01020304Ë? (
HI_TRUE
Ë: (
HI_FALSE
);

137 
	#FRACTION32
(
de
,
nu
Ë–((deË<< 16Ë| (nuË)

	)

138 
	#NUMERATOR32
(
x
Ë–(xË& 0xffff)

	)

139 
	#DENOMINATOR32
(
x
Ë–(xË>> 16 )

	)

147 
	#RGB
(
r
,
g
,
b
Ë(((‘Ë& 0xffË<< 16Ë| (((gË& 0xffË<< 8Ë| ((bË& 0xff))

	)

148 
	#RGB_R
(
c
Ë–((cË& 0xff0000Ë>> 16)

	)

149 
	#RGB_G
(
c
Ë–((cË& 0xff00Ë>> 8)

	)

150 
	#RGB_B
(
c
Ë–(cË& 0xff)

	)

158 
	#YUV
(
y
,
u
,
v
Ë((((yË& 0xffË<< 16Ë| (((uË& 0xffË<< 8Ë| ((vË& 0xff))

	)

159 
	#YUV_Y
(
c
Ë–((cË& 0xff0000Ë>> 16)

	)

160 
	#YUV_U
(
c
Ë–((cË& 0xff00Ë>> 8)

	)

161 
	#YUV_V
(
c
Ë–(cË& 0xff)

	)

167 
__ölöe
 
HI_VOID
 
Rgb2Yc
(
HI_U8
 
r
, HI_U8 
g
, HI_U8 
b
, HI_U8 * 
py
, HI_U8 * 
pcb
, HI_U8 * 
p¸
)

170 *
py
 = (
HI_U8
)(((
r
*66+
g
*129+
b
*25) >> 8) + 16);

173 *
pcb
 = (
HI_U8
)((((
b
*112-
r
*38)-
g
*74) >> 8) + 128);

176 *
p¸
 = (
HI_U8
)((((
r
*112-
g
*94)-
b
*18) >> 8) + 128);

179 
__ölöe
 
HI_U32
 
Rgb2Yuv
(HI_U32 
u32Rgb
)

181 
HI_U8
 
y
,
u
,
v
;

183 
Rgb2Yc
(
RGB_R
(
u32Rgb
), 
RGB_G
(u32Rgb), 
RGB_B
(u32Rgb), &
y
, &
u
, &
v
);

185  
YUV
(
y
,
u
,
v
);

191 
__ölöe
 
HI_VOID
 
GëYCFromRGB
(
HI_U32
 
rgb
, HI_U32 * 
pY
, HI_U32 * 
pC
)

193 
HI_U8
 
y
, 
cb
, 
¸
;

194 
HI_U32
 
cﬁ‹_y
, 
cﬁ‹_c
, 
tmp
;

196 
Rgb2Yc
(
RGB_R
(
rgb
), 
RGB_G
‘gb), 
RGB_B
‘gb), &
y
, &
cb
, &
¸
);

198 
tmp
 = 
y
 & 0xFF;

199 
cﬁ‹_y
 = (
tmp
<<24) + (tmp<<16) + (tmp<<8) +Åmp;

201 
tmp
 = 
cb
 & 0xFF;

202 
cﬁ‹_c
 = (
tmp
<<24) + (tmp<<8);

204 
tmp
 = 
¸
 & 0xFF;

205 
cﬁ‹_c
 = cﬁ‹_¯+ (
tmp
<<16) +Åmp;

207 *
pY
 = 
cﬁ‹_y
;

208 *
pC
 = 
cﬁ‹_c
;

223 
	shiFPS_CTRL_S


225 
HI_U32
 
u32FÂs
;

226 
HI_U32
 
u32TÂs
;

227 
HI_U32
 
u32FrmKey
;

228 } 
	tFPS_CTRL_S
;

230 
__ölöe
 
HI_VOID
 
InôFps
(
FPS_CTRL_S
 *
pFrmCål
, 
HI_U32
 
u32FuŒFps
,

231 
HI_U32
 
u32TagFps
)

233 
pFrmCål
->
u32FÂs
 = 
u32FuŒFps
;

234 
pFrmCål
->
u32TÂs
 = 
u32TagFps
;

235 
pFrmCål
->
u32FrmKey
 = 0;

238 
__ölöe
 
HI_BOOL
 
FpsC⁄åﬁ
(
FPS_CTRL_S
 *
pFrmCål
)

240 
HI_BOOL
 
bRëu∫
 = 
HI_FALSE
;

242 
pFrmCål
->
u32FrmKey
 +pFrmCål->
u32TÂs
;

243 i‡(
pFrmCål
->
u32FrmKey
 >pFrmCål->
u32FÂs
)

245 
pFrmCål
->
u32FrmKey
 -pFrmCål->
u32FÂs
;

246 
bRëu∫
 = 
HI_TRUE
;

249  
bRëu∫
;

256 #ifde‡
__KERNEL__


257 
	~<löux/time.h
>

259 
	~<sys/time.h
>

261 
__ölöe
 
HI_U32
 
GëSysTimeBySec
()

263 
timevÆ
 
°Time
;

264 #ifde‡
__KERNEL__


265 
do_gëtimeofday
(&
°Time
);

267 
gëtimeofday
(&
°Time
, 
NULL
);

269  
°Time
.
tv_£c
;

272 
__ölöe
 
HI_U64
 
GëSysTimeByU£c
()

274 
timevÆ
 
°Time
;

275 #ifde‡
__KERNEL__


276 
do_gëtimeofday
(&
°Time
);

278 
gëtimeofday
(&
°Time
, 
NULL
);

280  (
°Time
.
tv_£c
 * 1000000LLUË+ stTime.
tv_u£c
;

284 #ifde‡
__˝lu•lus


285 #i‡
__˝lu•lus


	@HiSDK/include/hi_mem.h

1 #i‚de‡
__HI_MEM_H__


2 
	#__HI_MEM_H__


	)

5 #ifde‡
__˝lu•lus


6 #i‡
__˝lu•lus


11 *
mem˝y1
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

12 *
mem˝y_back
(*
de°
, c⁄° *
§c
, 
size_t
 
n
);

13 *
mem£t1
(*
s
, 
c
, 
size_t
 
n
);

14 
memcmp1
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
);

15 *
°r˝y1
(*
de°
, c⁄° *
§c
);

16 
°rcmp1
(c⁄° *
s1
, c⁄° *
s2
);

17 
size_t
 
°æí1
(c⁄° *
s
);

20 
	#mem˝y
 
mem˝y_back


	)

21 
	#mem£t
 
mem£t1


	)

22 
	#memcmp
 
memcmp1


	)

23 
	#°r˝y
 
°r˝y1


	)

24 
	#°rcmp
 
°rcmp1


	)

25 
	#°æí
 
°æí1


	)

28 #ifde‡
__˝lu•lus


29 #i‡
__˝lu•lus


	@HiSDK/include/hi_tde_api.h

12 #i‚de‡
_HI_API_TDE2_H_


13 
	#_HI_API_TDE2_H_


	)

15 #ifde‡
__˝lu•lus


16 #i‡
__˝lu•lus


21 
	~"hi_ty≥.h
"

22 
	~"hi_tde_ty≥.h
"

24 
	#HI_TDE_O≥n
 
HI_TDE2_O≥n


	)

25 
	#HI_TDE_Clo£
 
HI_TDE2_Clo£


	)

26 
	#HI_TDE_BegöJob
 
HI_TDE2_BegöJob


	)

40 
HI_S32
 
HI_TDE2_O≥n
(
HI_VOID
);

50 
HI_VOID
 
HI_TDE2_Clo£
(HI_VOID);

60 
TDE_HANDLE
 
HI_TDE2_BegöJob
(
HI_VOID
);

73 
HI_S32
 
HI_TDE2_EndJob
(
TDE_HANDLE
 
s32H™dÀ
, 
HI_BOOL
 
bSync
, HI_BOOL 
bBlock
, 
HI_U32
 
u32TimeOut
);

83 
HI_S32
 
HI_TDE2_C™˚lJob
(
TDE_HANDLE
 
s32H™dÀ
);

93 
HI_S32
 
HI_TDE2_WaôF‹D⁄e
(
TDE_HANDLE
 
s32H™dÀ
);

103 
HI_S32
 
HI_TDE2_WaôAŒD⁄e
(
HI_VOID
);

114 
HI_S32
 
HI_TDE2_Re£t
(
HI_VOID
);

128 
HI_S32
 
HI_TDE2_QuickC›y
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°Src
, 
TDE2_RECT_S
 *
p°SrcRe˘
,

129 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
);

142 
HI_S32
 
HI_TDE2_QuickFûl
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
,

143 
HI_U32
 
u32FûlD©a
);

157 
HI_S32
 
HI_TDE2_QuickResize
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°Src
, 
TDE2_RECT_S
 *
p°SrcRe˘
,

158 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
);

172 
HI_S32
 
HI_TDE2_QuickDeÊickî
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°Src
, 
TDE2_RECT_S
 *
p°SrcRe˘
,

173 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
);

191 
HI_S32
 
HI_TDE2_Bôblô
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
 *
p°BackGroundRe˘
,

192 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
, TDE2_SURFACE_S* 
p°D°
,

193 
TDE2_RECT_S
 *
p°D°Re˘
, 
TDE2_OPT_S
* 
p°O±
);

210 
HI_S32
 
HI_TDE2_SﬁidDøw
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
,

211 
TDE2_SURFACE_S
 *
p°D°
,

212 
TDE2_RECT_S
 *
p°D°Re˘
, 
TDE2_FILLCOLOR_S
 *
p°FûlCﬁ‹
,

213 
TDE2_OPT_S
 *
p°O±
);

228 
HI_S32
 
HI_TDE2_MbBlô
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_MB_S
* 
p°MB
, 
TDE2_RECT_S
 *
p°MbRe˘
, 
TDE2_SURFACE_S
* 
p°D°
, TDE2_RECT_S *
p°D°Re˘
,

229 
TDE2_MBOPT_S
* 
p°MbO±
);

250 
HI_S32
 
HI_TDE2_Bôm≠MaskR›
(
TDE_HANDLE
 
s32H™dÀ
,

251 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
 *
p°BackGroundRe˘
,

252 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
,

253 
TDE2_SURFACE_S
* 
p°Mask
, 
TDE2_RECT_S
 *
p°MaskRe˘
,

254 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
,

255 
TDE2_ROP_CODE_E
 
íR›Code_Cﬁ‹
, TDE2_ROP_CODE_E 
íR›Code_AÕha
);

276 
HI_S32
 
HI_TDE2_Bôm≠MaskBÀnd
(
TDE_HANDLE
 
s32H™dÀ
,

277 
TDE2_SURFACE_S
* 
p°BackGround
, 
TDE2_RECT_S
 *
p°BackGroundRe˘
,

278 
TDE2_SURFACE_S
* 
p°F‹eGround
, 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
,

279 
TDE2_SURFACE_S
* 
p°Mask
, 
TDE2_RECT_S
 *
p°MaskRe˘
,

280 
TDE2_SURFACE_S
* 
p°D°
, 
TDE2_RECT_S
 *
p°D°Re˘
,

281 
HI_U8
 
u8AÕha
, 
TDE2_ALUCMD_E
 
íBÀndMode
);

293 
HI_S32
 
HI_TDE2_SëDeÊickîLevñ
(
TDE_DEFLICKER_LEVEL_E
 
íDeÊickîLevñ
);

303 
HI_S32
 
HI_TDE2_GëDeÊickîLevñ
(
TDE_DEFLICKER_LEVEL_E
 *
pDeÊickîLevñ
);

313 
HI_S32
 
HI_TDE2_SëAÕhaThªshﬁdVÆue
(
HI_U8
 
u8ThªshﬁdVÆue
);

323 
HI_S32
 
HI_TDE2_GëAÕhaThªshﬁdVÆue
(
HI_U8
 *
pu8ThªshﬁdVÆue
);

333 
HI_S32
 
HI_TDE2_SëAÕhaThªshﬁdSèã
(
HI_BOOL
 
bEnAÕhaThªshﬁd
);

343 
HI_S32
 
HI_TDE2_GëAÕhaThªshﬁdSèã
(
HI_BOOL
 * 
p_bEnAÕhaThªshﬁd
);

360 
HI_S32
 
HI_TDE2_P©ã∫Fûl
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE2_SURFACE_S
 *
p°BackGround
,

361 
TDE2_RECT_S
 *
p°BackGroundRe˘
, 
TDE2_SURFACE_S
 *
p°F‹eGround
,

362 
TDE2_RECT_S
 *
p°F‹eGroundRe˘
, 
TDE2_SURFACE_S
 *
p°D°
,

363 
TDE2_RECT_S
 *
p°D°Re˘
, 
TDE2_PATTERN_FILL_OPT_S
 *
p°O±
);

373 
HI_S32
 
HI_TDE2_E«bÀRegi⁄DeÊickî
(
HI_BOOL
 
bRegi⁄DeÊickî
);

383 
HI_S32
 
HI_TDE2_Mu…iBÀndög
(
TDE_HANDLE
 
s32H™dÀ
, 
TDE_SURFACE_LIST_S
 *
p°SurÁ˚Li°
);

386 #ifde‡
__˝lu•lus


387 #i‡
__˝lu•lus


	@HiSDK/include/hi_tde_errcode.h

13 #i‚de‡
__TDE_ERRCODE_H__


14 
	#__TDE_ERRCODE_H__


	)

17 
	~"hi_ty≥.h
"

19 #ifde‡
__˝lu•lus


20 #i‡
__˝lu•lus


27 
	#HI_ERR_TDE_BASE
 ((
HI_S32
)–((0x80UL + 0x20UL)<<24Ë| (100 << 16 ) | (4 << 13Ë| 1 ))

	)

31 
HI_ERR_TDE_DEV_NOT_OPEN
 = 
HI_ERR_TDE_BASE
,

32 
HI_ERR_TDE_DEV_OPEN_FAILED
,

33 
HI_ERR_TDE_NULL_PTR
,

34 
HI_ERR_TDE_NO_MEM
,

35 
HI_ERR_TDE_INVALID_HANDLE
,

36 
HI_ERR_TDE_INVALID_PARA
,

37 
HI_ERR_TDE_NOT_ALIGNED
,

38 
HI_ERR_TDE_MINIFICATION
,

39 
HI_ERR_TDE_CLIP_AREA
,

40 
HI_ERR_TDE_JOB_TIMEOUT
,

41 
HI_ERR_TDE_UNSUPPORTED_OPERATION
,

42 
HI_ERR_TDE_QUERY_TIMEOUT
,

43 
HI_ERR_TDE_INTERRUPT


47 #ifde‡
__˝lu•lus


48 #i‡
__˝lu•lus


	@HiSDK/include/hi_tde_type.h

19 #i‚de‡
__TDE_TYPE_H__


20 
	#__TDE_TYPE_H__


	)

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
	~"hi_tde_îrcode.h
"

35 
HI_S32
 
	tTDE_HANDLE
;

38 
HI_VOID
 (* 
	tTDE_FUNC_CB
Ë(
	tHI_VOID
 *
	tpP¨aml
, HI_VOID *
	tpP¨amr
);

42 
	ehiTDE2_COLOR_FMT_E


44 
TDE2_COLOR_FMT_RGB444
 = 0,

45 
TDE2_COLOR_FMT_BGR444
,

46 
TDE2_COLOR_FMT_RGB555
,

47 
TDE2_COLOR_FMT_BGR555
,

48 
TDE2_COLOR_FMT_RGB565
,

49 
TDE2_COLOR_FMT_BGR565
,

50 
TDE2_COLOR_FMT_RGB888
,

51 
TDE2_COLOR_FMT_BGR888
,

52 
TDE2_COLOR_FMT_ARGB4444
,

53 
TDE2_COLOR_FMT_ABGR4444
,

54 
TDE2_COLOR_FMT_RGBA4444
,

55 
TDE2_COLOR_FMT_BGRA4444
,

56 
TDE2_COLOR_FMT_ARGB1555
,

57 
TDE2_COLOR_FMT_ABGR1555
,

58 
TDE2_COLOR_FMT_RGBA1555
,

59 
TDE2_COLOR_FMT_BGRA1555
,

60 
TDE2_COLOR_FMT_ARGB8565
,

61 
TDE2_COLOR_FMT_ABGR8565
,

62 
TDE2_COLOR_FMT_RGBA8565
,

63 
TDE2_COLOR_FMT_BGRA8565
,

64 
TDE2_COLOR_FMT_ARGB8888
,

65 
TDE2_COLOR_FMT_ABGR8888
,

66 
TDE2_COLOR_FMT_RGBA8888
,

67 
TDE2_COLOR_FMT_BGRA8888
,

68 
TDE2_COLOR_FMT_RABG8888
,

69 
TDE2_COLOR_FMT_CLUT1
,

70 
TDE2_COLOR_FMT_CLUT2
,

71 
TDE2_COLOR_FMT_CLUT4
,

72 
TDE2_COLOR_FMT_CLUT8
,

73 
TDE2_COLOR_FMT_ACLUT44
,

74 
TDE2_COLOR_FMT_ACLUT88
,

75 
TDE2_COLOR_FMT_A1
,

76 
TDE2_COLOR_FMT_A8
,

77 
TDE2_COLOR_FMT_YCbCr888
,

78 
TDE2_COLOR_FMT_AYCbCr8888
,

79 
TDE2_COLOR_FMT_YCbCr422
,

80 
TDE2_COLOR_FMT_byã
,

81 
TDE2_COLOR_FMT_hÆfw‹d
,

82 
TDE2_COLOR_FMT_JPG_YCbCr400MBP
,

83 
TDE2_COLOR_FMT_JPG_YCbCr422MBHP
,

84 
TDE2_COLOR_FMT_JPG_YCbCr422MBVP
,

85 
TDE2_COLOR_FMT_MP1_YCbCr420MBP
,

86 
TDE2_COLOR_FMT_MP2_YCbCr420MBP
,

87 
TDE2_COLOR_FMT_MP2_YCbCr420MBI
,

88 
TDE2_COLOR_FMT_JPG_YCbCr420MBP
,

89 
TDE2_COLOR_FMT_JPG_YCbCr444MBP
,

90 
TDE2_COLOR_FMT_BUTT


91 } 
	tTDE2_COLOR_FMT_E
;

94 
	ehiTDE2_MB_COLORFMT_E


96 
TDE2_MB_COLOR_FMT_JPG_YCbCr400MBP
 = 0,

97 
TDE2_MB_COLOR_FMT_JPG_YCbCr422MBHP
,

98 
TDE2_MB_COLOR_FMT_JPG_YCbCr422MBVP
,

99 
TDE2_MB_COLOR_FMT_MP1_YCbCr420MBP
,

100 
TDE2_MB_COLOR_FMT_MP2_YCbCr420MBP
,

101 
TDE2_MB_COLOR_FMT_MP2_YCbCr420MBI
,

102 
TDE2_MB_COLOR_FMT_JPG_YCbCr420MBP
,

103 
TDE2_MB_COLOR_FMT_JPG_YCbCr444MBP
,

104 
TDE2_MB_COLOR_FMT_BUTT


105 } 
	tTDE2_MB_COLOR_FMT_E
;

108 
	shiTDE2_SURFACE_S


111 
HI_U32
 
u32PhyAddr
;

114 
TDE2_COLOR_FMT_E
 
íCﬁ‹Fmt
;

117 
HI_U32
 
u32Height
;

120 
HI_U32
 
u32Width
;

123 
HI_U32
 
u32Såide
;

126 
HI_U8
* 
pu8ClutPhyAddr
;

129 
HI_BOOL
 
bYCbCrClut
;

132 
HI_BOOL
 
bAÕhaMax255
;

135 
HI_BOOL
 
bAÕhaExt1555
;

136 
HI_U8
 
u8AÕha0
;

137 
HI_U8
 
u8AÕha1
;

139 
HI_U32
 
u32CbCrPhyAddr
;

140 
HI_U32
 
u32CbCrSåide
;

141 } 
	tTDE2_SURFACE_S
;

144 
	shiTDE2_MB_S


146 
TDE2_MB_COLOR_FMT_E
 
íMbFmt
;

147 
HI_U32
 
u32YPhyAddr
;

148 
HI_U32
 
u32YWidth
;

149 
HI_U32
 
u32YHeight
;

150 
HI_U32
 
u32YSåide
;

151 
HI_U32
 
u32CbCrPhyAddr
;

152 
HI_U32
 
u32CbCrSåide
;

153 } 
	tTDE2_MB_S
;

155 
	shiTDE2_RECT_S


157 
HI_S32
 
s32Xpos
;

158 
HI_S32
 
s32Ypos
;

159 
HI_U32
 
u32Width
;

160 
HI_U32
 
u32Height
;

161 } 
	tTDE2_RECT_S
;

164 
	ehiTDE2_ALUCMD_E


166 
TDE2_ALUCMD_NONE
 = 0x0,

167 
TDE2_ALUCMD_BLEND
 = 0x1,

168 
TDE2_ALUCMD_ROP
 = 0x2,

169 
TDE2_ALUCMD_COLORIZE
 = 0x4,

170 
TDE2_ALUCMD_BUTT
 = 0x8

171 } 
	tTDE2_ALUCMD_E
;

174 
	ehiTDE2_ROP_CODE_E


176 
TDE2_ROP_BLACK
 = 0,

177 
TDE2_ROP_NOTMERGEPEN
,

178 
TDE2_ROP_MASKNOTPEN
,

179 
TDE2_ROP_NOTCOPYPEN
,

180 
TDE2_ROP_MASKPENNOT
,

181 
TDE2_ROP_NOT
,

182 
TDE2_ROP_XORPEN
,

183 
TDE2_ROP_NOTMASKPEN
,

184 
TDE2_ROP_MASKPEN
,

185 
TDE2_ROP_NOTXORPEN
,

186 
TDE2_ROP_NOP
,

187 
TDE2_ROP_MERGENOTPEN
,

188 
TDE2_ROP_COPYPEN
,

189 
TDE2_ROP_MERGEPENNOT
,

190 
TDE2_ROP_MERGEPEN
,

191 
TDE2_ROP_WHITE
,

192 
TDE2_ROP_BUTT


193 } 
	tTDE2_ROP_CODE_E
;

196 
	ehiTDE2_MIRROR_E


198 
TDE2_MIRROR_NONE
 = 0,

199 
TDE2_MIRROR_HORIZONTAL
,

200 
TDE2_MIRROR_VERTICAL
,

201 
TDE2_MIRROR_BOTH
,

202 
TDE2_MIRROR_BUTT


203 } 
	tTDE2_MIRROR_E
;

206 
	ehiTDE2_CLIPMODE_E


208 
TDE2_CLIPMODE_NONE
 = 0,

209 
TDE2_CLIPMODE_INSIDE
,

210 
TDE2_CLIPMODE_OUTSIDE
,

211 
TDE2_CLIPMODE_BUTT


212 } 
	tTDE2_CLIPMODE_E
;

215 
	ehiTDE2_MBRESIZE_E


217 
TDE2_MBRESIZE_NONE
 = 0,

218 
TDE2_MBRESIZE_QUALITY_LOW
,

219 
TDE2_MBRESIZE_QUALITY_MIDDLE
,

220 
TDE2_MBRESIZE_QUALITY_HIGH
,

221 
TDE2_MBRESIZE_BUTT


222 } 
	tTDE2_MBRESIZE_E
;

225 
	shiTDE2_FILLCOLOR_S


227 
TDE2_COLOR_FMT_E
 
íCﬁ‹Fmt
;

228 
HI_U32
 
u32FûlCﬁ‹
;

229 } 
	tTDE2_FILLCOLOR_S
;

232 
	ehiTDE2_COLORKEY_MODE_E


234 
TDE2_COLORKEY_MODE_NONE
 = 0,

235 
TDE2_COLORKEY_MODE_FOREGROUND
,

236 
TDE2_COLORKEY_MODE_BACKGROUND
,

237 
TDE2_COLORKEY_MODE_BUTT


238 } 
	tTDE2_COLORKEY_MODE_E
;

241 
	shiTDE2_COLORKEY_COMP_S


243 
HI_U8
 
u8CompMö
;

244 
HI_U8
 
u8CompMax
;

245 
HI_U8
 
bCompOut
;

246 
HI_U8
 
bCompIgn‹e
;

247 
HI_U8
 
u8CompMask
;

248 
HI_U8
 
u8Re£rved
;

249 
HI_U8
 
u8Re£rved1
;

250 
HI_U8
 
u8Re£rved2
;

251 } 
	tTDE2_COLORKEY_COMP_S
;

254 
	uhiTDE2_COLORKEY_U


258 
TDE2_COLORKEY_COMP_S
 
°AÕha
;

259 
TDE2_COLORKEY_COMP_S
 
°Red
;

260 
TDE2_COLORKEY_COMP_S
 
°Gªí
;

261 
TDE2_COLORKEY_COMP_S
 
°Blue
;

262 } 
°ruCkARGB
;

265 
TDE2_COLORKEY_COMP_S
 
°AÕha
;

266 
TDE2_COLORKEY_COMP_S
 
°Y
;

267 
TDE2_COLORKEY_COMP_S
 
°Cb
;

268 
TDE2_COLORKEY_COMP_S
 
°Cr
;

269 } 
°ruCkYCbCr
;

272 
TDE2_COLORKEY_COMP_S
 
°AÕha
;

273 
TDE2_COLORKEY_COMP_S
 
°Clut
;

274 } 
°ruCkClut
;

275 } 
	tTDE2_COLORKEY_U
;

278 
	ehiTDE2_OUTALPHA_FROM_E


280 
TDE2_OUTALPHA_FROM_NORM
 = 0,

282 
TDE2_OUTALPHA_FROM_BACKGROUND
,

283 
TDE2_OUTALPHA_FROM_FOREGROUND
,

284 
TDE2_OUTALPHA_FROM_GLOBALALPHA
,

285 
TDE2_OUTALPHA_FROM_BUTT


286 } 
	tTDE2_OUTALPHA_FROM_E
;

289 
	ehiTDE2_FILTER_MODE_E


291 
TDE2_FILTER_MODE_COLOR
 = 0,

292 
TDE2_FILTER_MODE_ALPHA
,

293 
TDE2_FILTER_MODE_BOTH
,

294 
TDE2_FILTER_MODE_BUTT


295 } 
	tTDE2_FILTER_MODE_E
;

298 
	ehiTDE2_DEFLICKER_MODE_E


300 
TDE2_DEFLICKER_MODE_NONE
 = 0,

301 
TDE2_DEFLICKER_MODE_RGB
,

302 
TDE2_DEFLICKER_MODE_BOTH
,

303 
TDE2_DEFLICKER_MODE_BUTT


304 }
	tTDE2_DEFLICKER_MODE_E
;

307 
	ehiTDE2_BLEND_MODE_E


309 
TDE2_BLEND_ZERO
 = 0x0,

310 
TDE2_BLEND_ONE
,

311 
TDE2_BLEND_SRC2COLOR
,

312 
TDE2_BLEND_INVSRC2COLOR
,

313 
TDE2_BLEND_SRC2ALPHA
,

314 
TDE2_BLEND_INVSRC2ALPHA
,

315 
TDE2_BLEND_SRC1COLOR
,

316 
TDE2_BLEND_INVSRC1COLOR
,

317 
TDE2_BLEND_SRC1ALPHA
,

318 
TDE2_BLEND_INVSRC1ALPHA
,

319 
TDE2_BLEND_SRC2ALPHASAT
,

320 
TDE2_BLEND_BUTT


321 }
	tTDE2_BLEND_MODE_E
;

327 
	ehiTDE2_BLENDCMD_E


329 
TDE2_BLENDCMD_NONE
 = 0x0,

330 
TDE2_BLENDCMD_CLEAR
,

331 
TDE2_BLENDCMD_SRC
,

332 
TDE2_BLENDCMD_SRCOVER
,

333 
TDE2_BLENDCMD_DSTOVER
,

334 
TDE2_BLENDCMD_SRCIN
,

335 
TDE2_BLENDCMD_DSTIN
,

336 
TDE2_BLENDCMD_SRCOUT
,

337 
TDE2_BLENDCMD_DSTOUT
,

338 
TDE2_BLENDCMD_SRCATOP
,

339 
TDE2_BLENDCMD_DSTATOP
,

340 
TDE2_BLENDCMD_ADD
,

341 
TDE2_BLENDCMD_XOR
,

342 
TDE2_BLENDCMD_DST
,

343 
TDE2_BLENDCMD_CONFIG
,

344 
TDE2_BLENDCMD_BUTT


345 }
	tTDE2_BLENDCMD_E
;

348 
	shiTDE2_BLEND_OPT_S


350 
HI_BOOL
 
bGlobÆAÕhaE«bÀ
;

351 
HI_BOOL
 
bPixñAÕhaE«bÀ
;

352 
HI_BOOL
 
bSrc1AÕhaPªmu…i
;

353 
HI_BOOL
 
bSrc2AÕhaPªmu…i
;

354 
TDE2_BLENDCMD_E
 
eBÀndCmd
;

355 
TDE2_BLEND_MODE_E
 
eSrc1BÀndMode
;

356 
TDE2_BLEND_MODE_E
 
eSrc2BÀndMode
;

357 }
	tTDE2_BLEND_OPT_S
;

360 
	shiTDE2_CSC_OPT_S


362 
HI_BOOL
 
bICSCU£rE«bÀ
;

363 
HI_BOOL
 
bICSCP¨amRñﬂd
;

364 
HI_BOOL
 
bOCSCU£rE«bÀ
;

365 
HI_BOOL
 
bOCSCP¨amRñﬂd
;

366 
HI_U32
 
u32ICSCP¨amAddr
;

367 
HI_U32
 
u32OCSCP¨amAddr
;

368 }
	tTDE2_CSC_OPT_S
;

371 
	shiTDE2_OPT_S


374 
TDE2_ALUCMD_E
 
íAluCmd
;

377 
TDE2_ROP_CODE_E
 
íR›Code_Cﬁ‹
;

380 
TDE2_ROP_CODE_E
 
íR›Code_AÕha
;

383 
TDE2_COLORKEY_MODE_E
 
íCﬁ‹KeyMode
;

386 
TDE2_COLORKEY_U
 
unCﬁ‹KeyVÆue
;

389 
TDE2_CLIPMODE_E
 
íClùMode
;

392 
TDE2_RECT_S
 
°ClùRe˘
;

395 
TDE2_DEFLICKER_MODE_E
 
íDeÊickîMode
;

398 
HI_BOOL
 
bResize
;

401 
TDE2_FILTER_MODE_E
 
íFûãrMode
;

404 
TDE2_MIRROR_E
 
íMúr‹
;

407 
HI_BOOL
 
bClutRñﬂd
;

410 
HI_U8
 
u8GlobÆAÕha
;

413 
TDE2_OUTALPHA_FROM_E
 
íOutAÕhaFrom
;

415 
HI_U32
 
u32Cﬁ‹ize
;

417 
TDE2_BLEND_OPT_S
 
°BÀndO±
;

419 
TDE2_CSC_OPT_S
 
°CscO±
;

420 } 
	tTDE2_OPT_S
;

424 
	shiTDE2_MBOPT_S


427 
TDE2_CLIPMODE_E
 
íClùMode
;

430 
TDE2_RECT_S
 
°ClùRe˘
;

433 
HI_BOOL
 
bDeÊickî
;

436 
TDE2_MBRESIZE_E
 
íResize
;

439 
HI_BOOL
 
bSëOutAÕha
;

440 
HI_U8
 
u8OutAÕha
;

441 } 
	tTDE2_MBOPT_S
;

444 
	shiTDE2_PATTERN_FILL_OPT_S


446 
TDE2_ALUCMD_E
 
íAluCmd
;

448 
TDE2_ROP_CODE_E
 
íR›Code_Cﬁ‹
;

450 
TDE2_ROP_CODE_E
 
íR›Code_AÕha
;

452 
TDE2_COLORKEY_MODE_E
 
íCﬁ‹KeyMode
;

454 
TDE2_COLORKEY_U
 
unCﬁ‹KeyVÆue
;

456 
TDE2_CLIPMODE_E
 
íClùMode
;

458 
TDE2_RECT_S
 
°ClùRe˘
;

460 
HI_BOOL
 
bClutRñﬂd
;

462 
HI_U8
 
u8GlobÆAÕha
;

464 
TDE2_OUTALPHA_FROM_E
 
íOutAÕhaFrom
;

466 
HI_U32
 
u32Cﬁ‹ize
;

468 
TDE2_BLEND_OPT_S
 
°BÀndO±
;

470 
TDE2_CSC_OPT_S
 
°CscO±
;

472 }
	tTDE2_PATTERN_FILL_OPT_S
;

477 
	ehiTDE_DEFLICKER_LEVEL_E


479 
TDE_DEFLICKER_AUTO
 = 0,

480 
TDE_DEFLICKER_LOW
,

481 
TDE_DEFLICKER_MIDDLE
,

482 
TDE_DEFLICKER_HIGH
,

483 
TDE_DEFLICKER_BUTT


484 }
	tTDE_DEFLICKER_LEVEL_E
;

487 
	shiTDE_COMPOSOR_S


489 
TDE2_SURFACE_S
 
°SrcSurÁ˚
;

490 
TDE2_RECT_S
 
°InRe˘
;

491 
TDE2_RECT_S
 
°OutRe˘
;

492 
TDE2_OPT_S
 
°O±
;

493 }
	tTDE_COMPOSOR_S
;

496 
	shiTDE_SURFACE_LIST_S


498 
HI_U32
 
u32SurÁ˚Num
;

499 
TDE2_SURFACE_S
 *
pD°SurÁ˚
;

500 
TDE_COMPOSOR_S
 *
p°Compos‹
;

501 }
	tTDE_SURFACE_LIST_S
;

502 #ifde‡
__˝lu•lus


503 #i‡
__˝lu•lus


	@HiSDK/include/hi_type.h

30 #i‚de‡
__HI_TYPE_H__


31 
	#__HI_TYPE_H__


	)

34 #ifde‡
__˝lu•lus


35 #i‡
__˝lu•lus


44 
	tHI_U8
;

45 
	tHI_U16
;

46 
	tHI_U32
;

48 sig√d 
	tHI_S8
;

49 
	tHI_S16
;

50 
	tHI_S32
;

56 
	tHI_U0Q8
;

57 
	tHI_U1Q7
;

58 
	tHI_U5Q3
;

61 
	tHI_U0Q16
;

62 
	tHI_U4Q12
;

63 
	tHI_U6Q10
;

64 
	tHI_U8Q8
;

65 
	tHI_U12Q4
;

66 
	tHI_U14Q2
;

69 
	tHI_S9Q7
;

70 
	tHI_S14Q2
;

73 
	tHI_U22Q10
;

74 
	tHI_U25Q7
;

77 
	tHI_S25Q7
;

84 
	tHI_U8Q4F4
;

87 
	tHI_FLOAT
;

89 #i‚de‡
_M_IX86


90 
	tHI_U64
;

91 
	tHI_S64
;

93 
__öt64
 
	tHI_U64
;

94 
__öt64
 
	tHI_S64
;

97 
	tHI_CHAR
;

98 
	#HI_VOID
 

	)

104 
HI_FALSE
 = 0,

105 
HI_TRUE
 = 1,

106 } 
	tHI_BOOL
;

108 #i‚de‡
NULL


109 
	#NULL
 0L

	)

112 
	#HI_NULL
 0L

	)

113 
	#HI_SUCCESS
 0

	)

114 
	#HI_FAILURE
 (-1)

	)

117 #ifde‡
__˝lu•lus


118 #i‡
__˝lu•lus


	@HiSDK/include/hifb.h

18 #i‚de‡
__HIFB_H__


19 
	#__HIFB_H__


	)

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


27 
	~"hi_ty≥.h
"

28 
	~<löux/fb.h
>

31 
	#IOC_TYPE_HIFB
 'F'

	)

33 
	#FBIOGET_COLORKEY_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 90, 
HIFB_COLORKEY_S
)

	)

35 
	#FBIOPUT_COLORKEY_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 91, 
HIFB_COLORKEY_S
)

	)

37 
	#FBIOGET_ALPHA_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 92, 
HIFB_ALPHA_S
)

	)

39 
	#FBIOPUT_ALPHA_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 93, 
HIFB_ALPHA_S
)

	)

41 
	#FBIOGET_SCREEN_ORIGIN_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 94, 
HIFB_POINT_S
)

	)

43 
	#FBIOPUT_SCREEN_ORIGIN_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 95, 
HIFB_POINT_S
)

	)

45 
	#FBIOGET_DEFLICKER_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 98, 
HIFB_DEFLICKER_S
)

	)

47 
	#FBIOPUT_DEFLICKER_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 99, 
HIFB_DEFLICKER_S
)

	)

49 
	#FBIOGET_VBLANK_HIFB
 
	`_IO
(
IOC_TYPE_HIFB
, 100)

	)

51 
	#FBIOPUT_SHOW_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 101, 
HI_BOOL
)

	)

53 
	#FBIOGET_SHOW_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 102, 
HI_BOOL
)

	)

55 
	#FBIOGET_CAPABILITY_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 103, 
HIFB_CAPABILITY_S
)

	)

57 
	#FBIOPUT_SCREENSIZE
 
	`_IOW
(
IOC_TYPE_HIFB
, 130, 
HIFB_SIZE_S
*)

	)

59 
	#FBIOGET_SCREENSIZE
 
	`_IOR
(
IOC_TYPE_HIFB
, 131, 
HIFB_SIZE_S
*)

	)

62 
	#FBIOFLIP_SURFACE
 
	`_IOW
(
IOC_TYPE_HIFB
, 132, 
HIFB_SURFACEEX_S
)

	)

65 
	#FBIOPUT_COMPRESSION_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 133, 
HI_BOOL
)

	)

67 
	#FBIOGET_COMPRESSION_HIFB
 
	`_IOR
(
IOC_TYPE_HIFB
, 134, 
HI_BOOL
)

	)

72 
HI_U32
 
u32Width
;

73 
HI_U32
 
u32Height
;

74 }
	tHIFB_SIZE_S
;

76 
ölöe
 
HI_U8
 
hifb_rgb
(c⁄° 
fb_bôfõld
* 
pBô
, 
HI_S32
 
cﬁ‹
)

78  ((
HI_U8
)((((
HI_U32
)
cﬁ‹
)>>
pBô
->
off£t
Ë<< (8-pBô->
Àngth
)) +

79 ((
HI_U8
)(((
HI_U32
)(
cﬁ‹
)>>
pBô
->
off£t
Ë<< (8-pBô->
Àngth
)) >>ÖBit->length));

82 
ölöe
 
HI_S32
 
hifb_cﬁ‹2key
(c⁄° 
fb_v¨_s¸ìnöfo
* 
pV¨
, HI_S32 
cﬁ‹
)

84 i‡(
pV¨
->
bôs_≥r_pixñ
 <= 8)

86  
cﬁ‹
;

90 
HI_U8
 
r
, 
g
, 
b
;

91 
r
 = 
hifb_rgb
(&
pV¨
->
ªd
, 
cﬁ‹
);

92 
g
 = 
hifb_rgb
(&
pV¨
->
gªí
, 
cﬁ‹
);

93 
b
 = 
hifb_rgb
(&
pV¨
->
blue
, 
cﬁ‹
);

94  (
r
<<16Ë+ (
g
<<8Ë+ 
b
;

100 
HI_BOOL
 
bKeyE«bÀ
;

101 
HI_U32
 
u32Key
;

102 }
	tHIFB_COLORKEY_S
;

106 
HI_S32
 
x
;

107 
HI_S32
 
y
;

108 
HI_S32
 
w
;

109 
HI_S32
 
h
;

110 } 
	tHIFB_RECT
;

114 
HI_S32
 
s32XPos
;

115 
HI_S32
 
s32YPos
;

116 }
	tHIFB_POINT_S
;

118 
	shiHIFB_DEFLICKER_S


120 
HI_U32
 
u32HDfLevñ
;

121 
HI_U32
 
u32VDfLevñ
;

122 
HI_U8
 *
pu8HDfC€f
;

123 
HI_U8
 *
pu8VDfC€f
;

124 }
	tHIFB_DEFLICKER_S
;

129 
HI_BOOL
 
bAÕhaE«bÀ
;

130 
HI_BOOL
 
bAÕhaCh™√l
;

131 
HI_U8
 
u8AÕha0
;

132 
HI_U8
 
u8AÕha1
;

133 
HI_U8
 
u8GlobÆAÕha
;

134 
HI_U8
 
u8Re£rved
;

135 }
	tHIFB_ALPHA_S
;

139 
HIFB_FMT_RGB565
 = 0,

140 
HIFB_FMT_RGB888
,

142 
HIFB_FMT_KRGB444
,

143 
HIFB_FMT_KRGB555
,

144 
HIFB_FMT_KRGB888
,

146 
HIFB_FMT_ARGB4444
,

147 
HIFB_FMT_ARGB1555
,

148 
HIFB_FMT_ARGB8888
,

149 
HIFB_FMT_ARGB8565
,

151 
HIFB_FMT_RGBA4444
,

152 
HIFB_FMT_RGBA5551
,

153 
HIFB_FMT_RGBA5658
,

154 
HIFB_FMT_RGBA8888
,

156 
HIFB_FMT_BGR565
,

157 
HIFB_FMT_BGR888
,

158 
HIFB_FMT_ABGR4444
,

159 
HIFB_FMT_ABGR1555
,

160 
HIFB_FMT_ABGR8888
,

161 
HIFB_FMT_ABGR8565
,

162 
HIFB_FMT_KBGR444
,

163 
HIFB_FMT_KBGR555
,

164 
HIFB_FMT_KBGR888
,

166 
HIFB_FMT_1BPP
,

167 
HIFB_FMT_2BPP
,

168 
HIFB_FMT_4BPP
,

169 
HIFB_FMT_8BPP
,

170 
HIFB_FMT_ACLUT44
,

171 
HIFB_FMT_ACLUT88
,

172 
HIFB_FMT_PUYVY
,

173 
HIFB_FMT_PYUYV
,

174 
HIFB_FMT_PYVYU
,

175 
HIFB_FMT_YUV888
,

176 
HIFB_FMT_AYUV8888
,

177 
HIFB_FMT_YUVA8888
,

178 
HIFB_FMT_BUTT


179 }
	tHIFB_COLOR_FMT_E
;

183 
HI_BOOL
 
bKeyRgb
;

184 
HI_BOOL
 
bKeyAÕha
;

185 
HI_BOOL
 
bGlobÆAÕha
;

186 
HI_BOOL
 
bCm≠
;

187 
HI_BOOL
 
bHasCm≠Reg
;

188 
HI_BOOL
 
bCﬁFmt
[
HIFB_FMT_BUTT
];

189 
HI_BOOL
 
bVoSˇÀ
;

190 
HI_BOOL
 
bLayîSuµ‹ãd
;

191 
HI_U32
 
u32MaxWidth
;

192 
HI_U32
 
u32MaxHeight
;

193 
HI_U32
 
u32MöWidth
;

194 
HI_U32
 
u32MöHeight
;

195 
HI_U32
 
u32VDefLevñ
;

196 
HI_U32
 
u32HDefLevñ
;

197 
HI_BOOL
 
bDcmp
;

198 
HI_BOOL
 
bPªMul
;

199 }
	tHIFB_CAPABILITY_S
;

204 
HIFB_LAYER_BUF_DOUBLE
 = 0x0,

205 
HIFB_LAYER_BUF_ONE
 = 0x1,

206 
HIFB_LAYER_BUF_NONE
 = 0x2,

207 
HIFB_LAYER_BUF_DOUBLE_IMMEDIATE
=0x3,

208 
HIFB_LAYER_BUF_BUTT


209 } 
	tHIFB_LAYER_BUF_E
;

214 
HI_U32
 
u32PhyAddr
;

215 
HI_U32
 
u32Width
;

216 
HI_U32
 
u32Height
;

217 
HI_U32
 
u32Pôch
;

218 
HIFB_COLOR_FMT_E
 
íFmt
;

219 }
	tHIFB_SURFACE_S
;

223 
HI_U32
 
u32PhyAddr
;

224 
HIFB_ALPHA_S
 
°AÕha
;

225 
HIFB_COLORKEY_S
 
°Cﬁ‹key
;

226 }
	tHIFB_SURFACEEX_S
;

231 
HIFB_SURFACE_S
 
°C™vas
;

232 
HIFB_RECT
 
Upd©eRe˘
;

233 }
	tHIFB_BUFFER_S
;

238 
HIFB_SURFACE_S
 
°Curs‹
;

239 
HIFB_POINT_S
 
°HŸPos
;

240 } 
	tHIFB_CURSOR_S
;

245 
HI_U32
 
u32SèπSe˘i⁄
;

246 
HI_U32
 
u32Z⁄eNums
;

247 } 
	tHIFB_DDRZONE_S
;

251 
	#FBIOPUT_CURSOR_INFO
 
	`_IOW
(
IOC_TYPE_HIFB
, 104, 
HIFB_CURSOR_S
 *)

	)

252 
	#FBIOGET_CURSOR_INFO
 
	`_IOW
(
IOC_TYPE_HIFB
, 105, 
HIFB_CURSOR_S
 *)

	)

254 
	#FBIOPUT_CURSOR_STATE
 
	`_IOW
(
IOC_TYPE_HIFB
, 106, 
HI_BOOL
 *)

	)

255 
	#FBIOGET_CURSOR_STATE
 
	`_IOW
(
IOC_TYPE_HIFB
, 107, 
HI_BOOL
 *)

	)

257 
	#FBIOPUT_CURSOR_POS
 
	`_IOW
(
IOC_TYPE_HIFB
, 108, 
HIFB_POINT_S
 *)

	)

258 
	#FBIOGET_CURSOR_POS
 
	`_IOR
(
IOC_TYPE_HIFB
, 109, 
HIFB_POINT_S
 *)

	)

260 
	#FBIOPUT_CURSOR_COLORKEY
 
	`_IOR
(
IOC_TYPE_HIFB
, 110, 
HIFB_COLORKEY_S
 *)

	)

261 
	#FBIOGET_CURSOR_COLORKEY
 
	`_IOW
(
IOC_TYPE_HIFB
, 111, 
HIFB_COLORKEY_S
 *)

	)

262 
	#FBIOPUT_CURSOR_ALPHA
 
	`_IOR
(
IOC_TYPE_HIFB
, 112, 
HIFB_ALPHA_S
 *)

	)

263 
	#FBIOGET_CURSOR_ALPHA
 
	`_IOW
(
IOC_TYPE_HIFB
, 113, 
HIFB_ALPHA_S
 *)

	)

267 
	#FBIOPUT_CURSOR_ATTCHCURSOR
 
	`_IOW
(
IOC_TYPE_HIFB
, 114, 
HI_U32
 *)

	)

268 
	#FBIOPUT_CURSOR_DETACHCURSOR
 
	`_IOW
(
IOC_TYPE_HIFB
, 115, 
HI_U32
 *)

	)

274 
HIFB_LAYER_ANTIFLICKER_NONE
 = 0x0,

275 
HIFB_LAYER_ANTIFLICKER_LOW
 = 0x1,

276 
HIFB_LAYER_ANTIFLICKER_MIDDLE
 = 0x2,

277 
HIFB_LAYER_ANTIFLICKER_HIGH
 = 0x3,

278 
HIFB_LAYER_ANTIFLICKER_AUTO
 = 0x4,

279 
HIFB_LAYER_ANTIFLICKER_BUTT


280 }
	tHIFB_LAYER_ANTIFLICKER_LEVEL_E
;

285 
HIFB_LAYERMASK_BUFMODE
 = 0x1,

286 
HIFB_LAYERMASK_ANTIFLICKER_MODE
 = 0x2,

287 
HIFB_LAYERMASK_POS
 = 0x4,

288 
HIFB_LAYERMASK_CANVASSIZE
 = 0x8,

289 
HIFB_LAYERMASK_DISPSIZE
 = 0x10,

290 
HIFB_LAYERMASK_SCREENSIZE
 = 0x20,

291 
HIFB_LAYERMASK_BMUL
 = 0x40,

292 
HIFB_LAYERMASK_BUTT


293 }
	tHIFB_LAYER_INFO_MASKBIT
;

298 
HIFB_LAYER_BUF_E
 
BufMode
;

299 
HIFB_LAYER_ANTIFLICKER_LEVEL_E
 
eA¡iÊickîLevñ
;

300 
HI_S32
 
s32XPos
;

301 
HI_S32
 
s32YPos
;

302 
HI_S32
 
u32C™vasWidth
;

303 
HI_S32
 
u32C™vasHeight
;

304 
HI_U32
 
u32Di•œyWidth
;

305 
HI_U32
 
u32Di•œyHeight
;

306 
HI_U32
 
u32S¸ìnWidth
;

307 
HI_U32
 
u32S¸ìnHeight
;

308 
HI_BOOL
 
bPªMul
;

309 
HI_U32
 
u32Mask
;

310 }
	tHIFB_LAYER_INFO_S
;

313 
	#FBIOPUT_LAYER_INFO
 
	`_IOW
(
IOC_TYPE_HIFB
, 120, 
HIFB_LAYER_INFO_S
*)

	)

315 
	#FBIOGET_LAYER_INFO
 
	`_IOR
(
IOC_TYPE_HIFB
, 121, 
HIFB_LAYER_INFO_S
*)

	)

317 
	#FBIOGET_CANVAS_BUFFER
 
	`_IOR
(
IOC_TYPE_HIFB
, 123, 
HIFB_BUFFER_S
*)

	)

319 
	#FBIO_REFRESH
 
	`_IOW
(
IOC_TYPE_HIFB
, 124, 
HIFB_BUFFER_S
*)

	)

322 
	#FBIO_WAITFOR_FREFRESH_DONE
 
	`_IO
(
IOC_TYPE_HIFB
, 125)

	)

325 
	#FBIOPUT_MDDRDETECT_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 135, 
HIFB_DDRZONE_S
*)

	)

327 
	#FBIOGET_MDDRDETECT_HIFB
 
	`_IOW
(
IOC_TYPE_HIFB
, 136, 
HIFB_DDRZONE_S
*)

	)

332 #ifde‡
__˝lu•lus


333 #i‡
__˝lu•lus


	@HiSDK/include/jpg_decctrl.h

11 #i‚de‡
_JPG_STATE_H_


12 
	#_JPG_STATE_H_


	)

14 
	~"hi_ty≥.h
"

15 
	~"hi_jpg_ty≥.h
"

17 #ifde‡
__˝lu•lus


18 #i‡
__˝lu•lus


28 
	ehiJPG_STATE_E


30 
JPG_STATE_STOP
 = 0,

32 
JPG_STATE_PARSING
,

33 
JPG_STATE_PARTPARSED
,

34 
JPG_STATE_THUMBPARSED
,

35 
JPG_STATE_PARSED
,

36 
JPG_STATE_PARSEERR
,

38 
JPG_STATE_DECODING
,

39 
JPG_STATE_DECODED
,

40 
JPG_STATE_DECODEERR
,

42 
JPG_STATE_BUTT


43 }
	tJPG_STATE_E
;

45 
	shiJPGDEC_WRITESTREAM_S


47 
HI_VOID
 *
pSåómAddr
;

48 
HI_U32
 
SåómLí
;

49 
HI_BOOL
 
EndFœg
;

50 
HI_U32
 
C›yLí
;

51 
HI_BOOL
 
NìdC›yFœg
;

52 }
	tJPGDEC_WRITESTREAM_S
;

71 
HI_S32
 
JPG_Cª©eDecodî
(
JPG_HANDLE
 *
pH™dÀ
, 
JPG_IMGTYPE_E
 
ImgTy≥
, 
HI_U32
 
ImgLí
);

81 
HI_S32
 
JPG_De°royDecodî
(
JPG_HANDLE
 
H™dÀ
);

93 
HI_S32
 
JPG_SëOutYCbCr420
(
JPG_HANDLE
 
H™dÀ
,
HI_BOOL
 
bOutYCbCr420
);

105 
HI_S32
 
JPG_GëOutYCbCr420
(
JPG_HANDLE
 
H™dÀ
,
HI_BOOL
 *
bOutYCbCr420
);

118 
HI_S32
 
JPG_SëLuPixSumFœg
(
JPG_HANDLE
 
H™dÀ
,
HI_BOOL
 
bLuPixSum
);

130 
HI_S32
 
JPG_GëLuPixSumFœg
(
JPG_HANDLE
 
H™dÀ
,
HI_BOOL
 *
bLuPixSum
);

142 
HI_S32
 
JPG_GëLuPixSum
(
JPG_HANDLE
 
H™dÀ
,
HI_U64
 *
u64LuPixSum
);

159 
HI_S32
 
JPG_Probe
(
JPG_HANDLE
 
H™dÀ
, 
HI_VOID
* 
pBuf
, 
HI_U32
 
BufLí
);

176 
HI_S32
 
JPG_Decode
(
JPG_HANDLE
 
H™dÀ
, 
JPG_SURFACE_S
 *
pSurÁ˚
, 
HI_U32
 
Index
);

190 
HI_S32
 
JPG_GëPrim¨yInfo
(
JPG_HANDLE
 
H™dÀ
, 
JPG_PRIMARYINFO_S
 **
pPrim¨yInfo
);

200 
HI_S32
 
JPG_Rñó£Prim¨yInfo
(
JPG_HANDLE
 
H™dÀ
, c⁄° 
JPG_PRIMARYINFO_S
 *
pImageInfo
);

216 
HI_S32
 
JPG_GëPicInfo
(
JPG_HANDLE
 
H™dÀ
, 
JPG_PICINFO_S
 *
pPicInfo
,

217 
HI_U32
 
Index
);

230 
HI_S32
 
JPG_GëSètus
(
JPG_HANDLE
 
H™dÀ
, 
JPG_STATE_E
 *
pSèã
, 
HI_U32
 *
pIndex
);

244 
HI_S32
 
JPG_SídSåóm
(
HI_U32
 
H™dÀ
, 
JPGDEC_WRITESTREAM_S
 *
pWrôeInfo
);

255 
HI_S32
 
JPG_Re£tDecodî
(
JPG_HANDLE
 
H™dÀ
);

266 
HI_S32
 
JPG_Re£tDecodî1
(
JPG_HANDLE
 
H™dÀ
);

277 
HI_S32
 
JPG_IsNìdSåóm
(
JPG_HANDLE
 
H™dÀ
, 
HI_VOID
** 
pAddr
, 
HI_U32
 *
pSize
);

292 
HI_S32
 
JPG_GëExifD©a
(
JPG_HANDLE
 
H™dÀ
, 
HI_VOID
** 
pAddr
, 
HI_U32
 *
pSize
);

304 
HI_S32
 
JPG_Rñó£ExifD©a
(
JPG_HANDLE
 
H™dÀ
, c⁄° 
HI_VOID
* 
pAddr
);

319 
HI_S32
 
JPG_HdecCheck
(
JPG_HANDLE
 
H™dÀ
, 
HI_U32
 
Index
);

322 #ifde‡
CONFIG_JPGD_SETMEM


334 
HI_U32
 
JPG_SëBuf_PhyAddr
(HI_U32 
Size
, HI_U32 
Æign
, 
HI_VOID
** 
µVútAddr
);

338 #ifde‡
__˝lu•lus


339 #i‡
__˝lu•lus


	@HiSDK/include/jpg_err.h

19 #i‚de‡
__JPG_ERR_H__


20 
	#__JPG_ERR_H__


	)

31 #ifde‡
__˝lu•lus


32 #i‡
__˝lu•lus


49 
	#HI_JPEGD_ERR_APPID
 (0x80UL + 0x20UL)

	)

50 
	#HI_JPEGD_DEF_ERR
–
mid
, 
Àvñ
, 
îrid
Ë\

	)

51 ((
HI_S32
)–((
HI_JPEGD_ERR_APPID
)<<24Ë| ((
mid
Ë<< 16 ) | ((
Àvñ
)<<13Ë| (
îrid
) ))

58 
	#MID_JPG
 0x25

	)

62 
	#HI_ERR_JPG_PTR_NULL
\

	)

63 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_PTR_NULL
)

65 
	#HI_ERR_JPG_DEV_OPENED
\

	)

66 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEV_OPENED
)

68 
	#HI_ERR_JPG_DEV_NOOPEN
\

	)

69 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEV_NOOPEN
)

71 
	#HI_ERR_JPG_INVALID_PARA
\

	)

72 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_INVALID_PARA
)

74 
	#HI_ERR_JPG_INVALID_FILE
\

	)

75 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_INVALID_FILE
)

77 
	#HI_ERR_JPG_NO_MEM
\

	)

78 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_NO_MEM
)

80 
	#HI_ERR_JPG_INVALID_SOURCE
\

	)

81 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_INVALID_SOURCE
)

83 
	#HI_ERR_JPG_TIME_OUT
\

	)

84 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_TIME_OUT
)

86 
	#HI_ERR_JPG_INVALID_HANDLE
\

	)

87 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_INVALID_HANDLE
)

89 
	#HI_ERR_JPG_EXIST_INSTANCE
\

	)

90 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_EXIST_INSTANCE
)

92 
	#HI_ERR_JPG_THUMB_NOEXIST
\

	)

93 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_THUMB_NOEXIST
)

95 
	#HI_ERR_JPG_NO_TASK
\

	)

96 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_NO_TASK
)

98 
	#HI_ERR_JPG_NOSUPPORT_FMT
\

	)

99 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_NOSUPPORT_FMT
)

101 
	#HI_ERR_JPG_DEC_BUSY
\

	)

102 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEC_BUSY
)

104 
	#HI_ERR_JPG_DEC_PARSING
\

	)

105 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEC_PARSING
)

107 
	#HI_ERR_JPG_DEC_DECODING
\

	)

108 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEC_DECODING
)

110 
	#HI_ERR_JPG_WANT_STREAM
\

	)

111 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_WANT_STREAM
)

113 
	#HI_ERR_JPG_DEC_FAIL
\

	)

114 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEC_FAIL
)

116 
	#HI_ERR_JPG_PARSE_FAIL
\

	)

117 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_PARSE_FAIL
)

119 
	#HI_ERR_JPG_DEC_RUNNING
\

	)

120 
HI_JPEGD_DEF_ERR
(
MID_JPG
, 
HI_LOG_LEVEL_ERROR
, 
ERR_JPG_DEC_RUNNING
)

123 
	ehiLOG_ERRLEVEL_E


125 
HI_LOG_LEVEL_DEBUG
 = 0,

126 
HI_LOG_LEVEL_INFO
 ,

127 
HI_LOG_LEVEL_NOTICE
,

128 
HI_LOG_LEVEL_WARNING
,

129 
HI_LOG_LEVEL_ERROR
,

130 
HI_LOG_LEVEL_CRIT
,

131 
HI_LOG_LEVEL_ALERT
,

132 
HI_LOG_LEVEL_FATAL
,

133 
HI_LOG_LEVEL_BUTT


134 } 
	tLOG_ERRLEVEL_E
;

139 
	ehiJPG_Eº‹Code_E


141 
ERR_JPG_PTR_NULL
 = 0x1,

142 
ERR_JPG_DEV_OPENED
 = 0x2,

143 
ERR_JPG_DEV_NOOPEN
 = 0x3,

144 
ERR_JPG_INVALID_PARA
 = 0x4,

145 
ERR_JPG_INVALID_FILE
 = 0x5,

146 
ERR_JPG_NO_MEM
 = 0x6,

147 
ERR_JPG_INVALID_SOURCE
 = 0x7,

148 
ERR_JPG_TIME_OUT
 = 0x8,

149 
ERR_JPG_INVALID_HANDLE
 = 0x9,

150 
ERR_JPG_EXIST_INSTANCE
 = 0xA,

151 
ERR_JPG_THUMB_NOEXIST
 = 0xB,

152 
ERR_JPG_NO_TASK
 = 0xC,

153 
ERR_JPG_NOSUPPORT_FMT
 = 0xD,

154 
ERR_JPG_DEC_BUSY
 = 0xE,

155 
ERR_JPG_DEC_PARSING
 = 0xF,

156 
ERR_JPG_DEC_DECODING
 = 0x10,

157 
ERR_JPG_WANT_STREAM
 = 0x11,

158 
ERR_JPG_DEC_FAIL
 = 0x12,

159 
ERR_JPG_PARSE_FAIL
 = 0x13,

160 
ERR_JPG_DEC_RUNNING
 = 0x14

169 #ifde‡
__˝lu•lus


171 #i‡
__˝lu•lus


	@HiSDK/include/list.h

32 #i‚de‡
_HPT_LIST_H_


33 
	#_HPT_LIST_H_


	)

35 #i‚de‡
_LINUX_LIST_H


37 #i‚de‡
HPT_INLINE


38 
	#HPT_INLINE
 
__ölöe


	)

41 
	tHPT_UPTR
;

43 
	sli°_hód
 {

44 
li°_hód
 *
	m√xt
, *
	m¥ev
;

47 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

49 
	#INIT_LIST_HEAD
(
±r
Ëdÿ{ (±r)->
√xt
 = (±r); (±r)->
¥ev
 = (±r); } 0)

	)

51 
HPT_INLINE
 
	$__li°_add
(
li°_hód
 * 
_√w
, li°_hód * 
¥ev
, li°_hód * 
√xt
)

53 
√xt
->
¥ev
 = 
_√w
;

54 
_√w
->
√xt
 =Çext;

55 
_√w
->
¥ev
 =Örev;

56 
¥ev
->
√xt
 = 
_√w
;

57 
	}
}

59 
HPT_INLINE
 
	$li°_add
(
li°_hód
 *
_√w
, li°_hód *
hód
)

61 
	`__li°_add
(
_√w
, 
hód
, hód->
√xt
);

62 
	}
}

64 
HPT_INLINE
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
hód
)

66 
	`__li°_add
(
_√w
, 
hód
->
¥ev
, head);

67 
	}
}

69 
HPT_INLINE
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

71 
√xt
->
¥ev
 =Örev;

72 
¥ev
->
√xt
 =Çext;

73 
	}
}

75 
HPT_INLINE
 
	$li°_dñ
(
li°_hód
 *
íåy
)

77 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

78 
	}
}

80 
HPT_INLINE
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

82 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

83 
	`INIT_LIST_HEAD
(
íåy
);

84 
	}
}

86 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

88 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

89 
	`li°_add
(
li°
, 
hód
);

90 
	}
}

92 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

93 
li°_hód
 *
hód
)

95 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

96 
	`li°_add_èû
(
li°
, 
hód
);

97 
	}
}

99 
HPT_INLINE
 
	$li°_em±y
(
li°_hód
 *
hód
)

101  
hód
->
√xt
 == head;

102 
	}
}

104 
HPT_INLINE
 
	$__li°_•li˚
(
li°_hód
 *
li°
,

105 
li°_hód
 *
hód
)

107 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

108 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

109 
li°_hód
 *
©
 = 
hód
->
√xt
;

111 
fú°
->
¥ev
 = 
hód
;

112 
hód
->
√xt
 = 
fú°
;

114 
œ°
->
√xt
 = 
©
;

115 
©
->
¥ev
 = 
œ°
;

116 
	}
}

118 
HPT_INLINE
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

120 i‡(!
	`li°_em±y
(
li°
))

121 
	`__li°_•li˚
(
li°
, 
hód
);

122 
	}
}

124 
HPT_INLINE
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
, li°_hód *
hód
)

126 i‡(!
	`li°_em±y
(
li°
)) {

127 
	`__li°_•li˚
(
li°
, 
hód
);

128 
	`INIT_LIST_HEAD
(
li°
);

130 
	}
}

134 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

135 ((
ty≥
 *)(()(
±r
)-(()(&(—y≥ *)1)->
membî
Ë- 1)))

	)

137 
	#li°_f‹_óch
(
pos
, 
hód
) \

138 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

140 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

141 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

142 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

144 
	#gë_fú°_ôem
(
©èched
, 
ty≥
, 
membî
) \

145 ((
ty≥
 *)((*)((
©èched
)->
√xt
)-(
HPT_UPTR
)(&(—y≥ *)0)->
membî
)))

	)

	@HiSDK/include/mkp/mod_ext.h

30 
	~<löux/moduÀ.h
>

31 
	~<löux/kî√l.h
>

32 
	~<löux/öô.h
>

34 
	~"hi_ty≥.h
"

35 
	~"hi_î∫o.h
"

38 #i‚de‡
__MOD_EXT_H__


39 
	#__MOD_EXT_H__


	)

41 
	#MAX_MPP_MODULES
 
HI_ID_BUTT


	)

43 
	#VERSION_MAGIC
 20131111

	)

45 
	shiMOD_NAME_S


47 
MOD_ID_E
 
	míModId
;

48 
HI_CHAR
 
	maModName
[16];

49 }
	tMOD_NAME_S
;

51 
	ehiMOD_NOTICE_ID_E


53 
	mMOD_NOTICE_STOP
 = 0x11,

54 }
	tMOD_NOTICE_ID_E
;

56 
	ehiMOD_STATE_E


58 
	mMOD_STATE_FREE
 = 0x11,

59 
	mMOD_STATE_BUSY
 = 0X22,

60 }
	tMOD_STATE_E
;

62 
HI_S32
 
	tFN_MOD_Inô
(
	tHI_VOID
 *);

63 
HI_VOID
 
	tFN_MOD_Exô
(
	tHI_VOID
);

64 
HI_VOID
 
	tFN_MOD_NŸify
(
	tMOD_NOTICE_ID_E
 
	tíNŸi˚Id
);

65 
HI_VOID
 
	tFN_MOD_QuîySèã
(
	tMOD_STATE_E
 *
	tp°Sèã
);

66 
HI_U32
 
	tFN_MOD_VîCheckî
(
	tHI_VOID
);

68 
	shiMPP_MODULE_S


70 
moduÀ
 *
	mp°Ow√r
;

71 
MOD_ID_E
 
	míModId
;

73 
FN_MOD_Inô
 *
	mp‚Inô
;

74 
FN_MOD_Exô
 *
	mp‚Exô
;

75 
FN_MOD_QuîySèã
 *
	mp‚QuîySèã
;

76 
FN_MOD_NŸify
 *
	mp‚NŸify
;

77 
FN_MOD_VîCheckî
 *
	mp‚VîCheckî
;

79 
HI_VOID
 *
	mp°Exp‹tFuncs
;

80 
HI_VOID
 *
	mpD©a
;

82 
HI_CHAR
 *
	mpVîsi⁄
;

83 }
	tUMAP_MODULE_S
;

85 
UMAP_MODULE_S
 
g_a°ModuÀs
[
MAX_MPP_MODULES
];

86 
MOD_NAME_S
 
g_aModName
[
MAX_MPP_MODULES
];

88 
HI_VOID
 
CMPI_St›ModuÀs
(HI_VOID);

89 
HI_S32
 
CMPI_QuîyModuÀs
(
HI_VOID
);

90 
HI_S32
 
CMPI_InôModuÀs
(
HI_VOID
);

91 
HI_VOID
 
CMPI_ExôModuÀs
(HI_VOID);

92 
HI_S32
 
CMPI_Regi°îMod
(
UMAP_MODULE_S
 *
p°ModuÀs
);

93 
HI_VOID
 
CMPI_UnRegi°îMod
(
MOD_ID_E
 
íModId
);

97 
	#CHECK_FUNC_ENTRY
(
id
Ë(
NULL
 !(
g_a°ModuÀs
[id].
p°Exp‹tFuncs
))

	)

98 
	#FUNC_ENTRY
(
ty≥
,
id
Ë(—y≥*)(
g_a°ModuÀs
[id].
p°Exp‹tFuncs
))

	)

	@HiSDK/include/mpi_adec.h

16 #i‚de‡
__MPI_ADEC_H__


17 
	#__MPI_ADEC_H__


	)

19 
	~"hi_comm⁄.h
"

20 
	~"hi_comm_aio.h
"

21 
	~"hi_comm_adec.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_ADEC_Cª©eChn
(
ADEC_CHN
 
AdChn
, 
ADEC_CHN_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_ADEC_De°royChn
(
ADEC_CHN
 
AdChn
);

33 
HI_S32
 
HI_MPI_ADEC_SídSåóm
(
ADEC_CHN
 
AdChn
, c⁄° 
AUDIO_STREAM_S
 *
p°Såóm
, 
HI_BOOL
 
bBlock
);

35 
HI_S32
 
HI_MPI_ADEC_CÀ¨ChnBuf
(
ADEC_CHN
 
AdChn
);

37 
HI_S32
 
HI_MPI_ADEC_Regei°îDecodî
(HI_S32 *
ps32H™dÀ
, 
ADEC_DECODER_S
 *
p°Decodî
);

38 
HI_S32
 
HI_MPI_ADEC_UnRegi°îDecodî
(HI_S32 
s32H™dÀ
);

41 #ifde‡
__˝lu•lus


42 #i‡
__˝lu•lus


	@HiSDK/include/mpi_aenc.h

16 #i‚de‡
__MPI_AENC_H__


17 
	#__MPI_AENC_H__


	)

19 
	~"hi_comm⁄.h
"

20 
	~"hi_comm_aio.h
"

21 
	~"hi_comm_´nc.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_AENC_Cª©eChn
(
AENC_CHN
 
AeChn
, c⁄° 
AENC_CHN_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_AENC_De°royChn
(
AENC_CHN
 
AeChn
);

33 
HI_S32
 
HI_MPI_AENC_SídFøme
(
AENC_CHN
 
AeChn
, c⁄° 
AUDIO_FRAME_S
 *
p°Frm
, c⁄° 
AEC_FRAME_S
 *
p°AecFrm
);

35 
HI_S32
 
HI_MPI_AENC_GëSåóm
(
AENC_CHN
 
AeChn
, 
AUDIO_STREAM_S
 *
p°Såóm
, HI_S32 
s32MûliSec
);

36 
HI_S32
 
HI_MPI_AENC_Rñó£Såóm
(
AENC_CHN
 
AeChn
, c⁄° 
AUDIO_STREAM_S
 *
p°Såóm
);

38 
HI_S32
 
HI_MPI_AENC_GëFd
(
AENC_CHN
 
AeChn
);

40 
HI_S32
 
HI_MPI_AENC_Regei°îEncodî
(HI_S32 *
ps32H™dÀ
, 
AENC_ENCODER_S
 *
p°Encodî
);

41 
HI_S32
 
HI_MPI_AENC_UnRegi°îEncodî
(HI_S32 
s32H™dÀ
);

44 #ifde‡
__˝lu•lus


45 #i‡
__˝lu•lus


	@HiSDK/include/mpi_ai.h

16 #i‚de‡
__MPI_AI_H__


17 
	#__MPI_AI_H__


	)

19 
	~"hi_ty≥.h
"

20 
	~"hi_comm⁄.h
"

21 
	~"hi_comm_aio.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_AI_SëPubAâr
(
AUDIO_DEV
 
AudioDevId
, c⁄° 
AIO_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_AI_GëPubAâr
(
AUDIO_DEV
 
AudioDevId
, 
AIO_ATTR_S
 *
p°Aâr
);

33 
HI_S32
 
HI_MPI_AI_E«bÀ
(
AUDIO_DEV
 
AudioDevId
);

34 
HI_S32
 
HI_MPI_AI_DißbÀ
(
AUDIO_DEV
 
AudioDevId
);

36 
HI_S32
 
HI_MPI_AI_E«bÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

37 
HI_S32
 
HI_MPI_AI_DißbÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

39 
HI_S32
 
HI_MPI_AI_GëFøme
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_FRAME_S
 *
p°Frm
, 
AEC_FRAME_S
 *
p°AecFrm
, HI_S32 
s32MûliSec
);

40 
HI_S32
 
HI_MPI_AI_Rñó£Føme
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_FRAME_S
 *
p°Frm
, 
AEC_FRAME_S
 *
p°AecFrm
);

42 
HI_S32
 
HI_MPI_AI_SëChnP¨am
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AI_CHN_PARAM_S
 *
p°ChnP¨am
);

43 
HI_S32
 
HI_MPI_AI_GëChnP¨am
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AI_CHN_PARAM_S
 *
p°ChnP¨am
);

45 
HI_S32
 
HI_MPI_AI_E«bÀAec
(
AUDIO_DEV
 
AiDevId
, 
AI_CHN
 
AiChn
, AUDIO_DEV 
AoDevId
, 
AO_CHN
 
AoChn
);

46 
HI_S32
 
HI_MPI_AI_DißbÀAec
(
AUDIO_DEV
 
AiDevId
, 
AI_CHN
 
AiChn
);

48 
HI_S32
 
HI_MPI_AI_E«bÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
, 
AUDIO_RESAMPLE_ATTR_S
 *
p°Aâr
);

49 
HI_S32
 
HI_MPI_AI_DißbÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

51 
HI_S32
 
HI_MPI_AI_E«bÀAƒ
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

52 
HI_S32
 
HI_MPI_AI_DißbÀAƒ
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

54 
HI_S32
 
HI_MPI_AI_SëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 
íTøckMode
);

55 
HI_S32
 
HI_MPI_AI_GëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 *
≥nTøckMode
);

57 
HI_S32
 
HI_MPI_AI_GëFd
(
AUDIO_DEV
 
AudioDevId
, 
AI_CHN
 
AiChn
);

60 #ifde‡
__˝lu•lus


61 #i‡
__˝lu•lus


	@HiSDK/include/mpi_ao.h

16 #i‚de‡
__MPI_AO_H__


17 
	#__MPI_AO_H__


	)

19 
	~"hi_ty≥.h
"

20 
	~"hi_comm⁄.h
"

21 
	~"hi_comm_aio.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_AO_SëPubAâr
(
AUDIO_DEV
 
AudioDevId
, c⁄° 
AIO_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_AO_GëPubAâr
(
AUDIO_DEV
 
AudioDevId
, 
AIO_ATTR_S
 *
p°Aâr
);

33 
HI_S32
 
HI_MPI_AO_E«bÀ
(
AUDIO_DEV
 
AudioDevId
);

34 
HI_S32
 
HI_MPI_AO_DißbÀ
(
AUDIO_DEV
 
AudioDevId
);

36 
HI_S32
 
HI_MPI_AO_E«bÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

37 
HI_S32
 
HI_MPI_AO_DißbÀChn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

39 
HI_S32
 
HI_MPI_AO_SídFøme
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
, c⁄° 
AUDIO_FRAME_S
 *
p°D©a
, HI_S32 
s32MûliSec
);

41 
HI_S32
 
HI_MPI_AO_E«bÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
, 
AUDIO_RESAMPLE_ATTR_S
 *
p°Aâr
);

42 
HI_S32
 
HI_MPI_AO_DißbÀReSmp
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

44 
HI_S32
 
HI_MPI_AO_CÀ¨ChnBuf
(
AUDIO_DEV
 
AudioDevId
 ,
AO_CHN
 
AoChn
);

45 
HI_S32
 
HI_MPI_AO_QuîyChnSèt
(
AUDIO_DEV
 
AudioDevId
 ,
AO_CHN
 
AoChn
, 
AO_CHN_STATE_S
 *
p°Sètus
);

47 
HI_S32
 
HI_MPI_AO_Pau£Chn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

48 
HI_S32
 
HI_MPI_AO_ResumeChn
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

50 
HI_S32
 
HI_MPI_AO_SëVﬁume
(
AUDIO_DEV
 
AudioDevId
, HI_S32 
s32VﬁumeDb
);

51 
HI_S32
 
HI_MPI_AO_GëVﬁume
(
AUDIO_DEV
 
AudioDevId
, HI_S32 *
ps32VﬁumeDb
);

53 
HI_S32
 
HI_MPI_AO_SëMuã
(
AUDIO_DEV
 
AudioDevId
, 
HI_BOOL
 
bE«bÀ
, 
AUDIO_FADE_S
 *
p°Fade
);

54 
HI_S32
 
HI_MPI_AO_GëMuã
(
AUDIO_DEV
 
AudioDevId
, 
HI_BOOL
 *
pbE«bÀ
, 
AUDIO_FADE_S
 *
p°Fade
);

56 
HI_S32
 
HI_MPI_AO_SëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 
íTøckMode
);

57 
HI_S32
 
HI_MPI_AO_GëTøckMode
(
AUDIO_DEV
 
AudioDevId
, 
AUDIO_TRACK_MODE_E
 *
≥nTøckMode
);

59 
HI_S32
 
HI_MPI_AO_GëFd
(
AUDIO_DEV
 
AudioDevId
, 
AO_CHN
 
AoChn
);

62 #ifde‡
__˝lu•lus


63 #i‡
__˝lu•lus


	@HiSDK/include/mpi_hdmi.h

18 #i‚de‡
__MPI_HDMI_H__


19 
	#__MPI_HDMI_H__


	)

21 
	~"hi_comm_hdmi.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


29 
HI_S32
 
HI_MPI_HDMI_Inô
(
HI_HDMI_INIT_PARA_S
 *
p°HdmiP¨a
);

30 
HI_S32
 
HI_MPI_HDMI_DeInô
();

31 
HI_S32
 
HI_MPI_HDMI_O≥n
(
HI_HDMI_ID_E
 
íHdmi
);

32 
HI_S32
 
HI_MPI_HDMI_Clo£
(
HI_HDMI_ID_E
 
íHdmi
);

33 
HI_S32
 
HI_MPI_HDMI_GëSökC≠abûôy
(
HI_HDMI_ID_E
 
íHdmi
,

34 
HI_HDMI_SINK_CAPABILITY_S
 *
p°SökC≠
);

35 
HI_S32
 
HI_MPI_HDMI_SëAâr
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_ATTR_S
 *
p°Aâr
);

36 
HI_S32
 
HI_MPI_HDMI_GëAâr
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_ATTR_S
 *
p°Aâr
);

37 
HI_S32
 
HI_MPI_HDMI_Sèπ
(
HI_HDMI_ID_E
 
íHdmi
);

38 
HI_S32
 
HI_MPI_HDMI_St›
(
HI_HDMI_ID_E
 
íHdmi
);

39 
HI_S32
 
HI_MPI_HDMI_SëAVMuã
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_BOOL
 
bAvMuã
);

40 
HI_S32
 
HI_MPI_HDMI_F‹˚_GëEDID
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_EDID_S
 *
p°EdidD©a
);

43 
HI_S32
 
HI_MPI_HDMI_SëDìpCﬁ‹
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_DEEP_COLOR_E
 
íDìpCﬁ‹
);

44 
HI_S32
 
HI_MPI_HDMI_GëDìpCﬁ‹
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_DEEP_COLOR_E
 *
≥nDìpCﬁ‹
);

46 
HI_S32
 
HI_MPI_HDMI_SëCsc
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_CSC_S
 *
p°Csc
);

47 
HI_S32
 
HI_MPI_HDMI_GëCsc
(
HI_HDMI_ID_E
 
íHdmi
, 
HI_HDMI_CSC_S
 *
p°Csc
);

49 #ifde‡
__˝lu•lus


50 #i‡
__˝lu•lus


	@HiSDK/include/mpi_ive.h

16 #i‚de‡
__MPI_IVE_H__


17 
	#__MPI_IVE_H__


	)

19 
	~"hi_comm_ive.h
"

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


42 
HI_S32
 
HI_MPI_IVE_DMA
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

43 
IVE_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

60 
HI_S32
 
HI_MPI_IVE_FILTER
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

61 
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_FILTER_CTRL_S
 *
p°FûãrCål
,
HI_BOOL
 
bIn°™t
);

79 
HI_S32
 
HI_MPI_IVE_CSC
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

80 
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_CSC_CTRL_S
 *
p°CscCål
,
HI_BOOL
 
bIn°™t
);

97 
HI_S32
 
HI_MPI_IVE_FILTER_AND_CSC
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

98 
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_FILTER_AND_CSC_CTRL_S
 *
p°F…CscCål
,
HI_BOOL
 
bIn°™t
);

117 
HI_S32
 
HI_MPI_IVE_SOBEL
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

118 
IVE_MEM_INFO_S
 *
p°D°H
, IVE_MEM_INFO_S *
p°D°V
, 
IVE_SOBEL_CTRL_S
 *
p°SobñCål
,
HI_BOOL
 
bIn°™t
);

138 
HI_S32
 
HI_MPI_IVE_CANNY
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

139 
IVE_MEM_INFO_S
 *
p°D°Mag
, IVE_MEM_INFO_S *
p°D°Ang
, 
IVE_CANNY_CTRL_S
 *
p°C™nyCål
,
HI_BOOL
 
bIn°™t
);

158 
HI_S32
 
HI_MPI_IVE_DILATE
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

159 
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_DILATE_CTRL_S
 *
p°Dû©eCål
,
HI_BOOL
 
bIn°™t
);

177 
HI_S32
 
HI_MPI_IVE_ERODE
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

178 
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_ERODE_CTRL_S
 *
p°ErodeCål
,
HI_BOOL
 
bIn°™t
);

195 
HI_S32
 
HI_MPI_IVE_THRESH
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

196 
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_THRESH_CTRL_S
 *
p°ThªshCål
,
HI_BOOL
 
bIn°™t
);

215 
HI_S32
 
HI_MPI_IVE_AND
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src1
,

216 
IVE_SRC_INFO_S
 *
p°Src2
,
IVE_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

236 
HI_S32
 
HI_MPI_IVE_SUB
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src1
,

237 
IVE_SRC_INFO_S
 *
p°Src2
,
IVE_MEM_INFO_S
 *
p°D°
, 
IVE_SUB_OUT_FMT_E
 
íOutFmt
,
HI_BOOL
 
bIn°™t
);

256 
HI_S32
 
HI_MPI_IVE_OR
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src1
,

257 
IVE_SRC_INFO_S
 *
p°Src2
,
IVE_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

275 
HI_S32
 
HI_MPI_IVE_INTEG
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

276 
IVE_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

294 
HI_S32
 
HI_MPI_IVE_HIST
(
IVE_HANDLE
 *
pIveH™dÀ
, 
IVE_SRC_INFO_S
 *
p°Src
,

295 
IVE_MEM_INFO_S
 *
p°D°
, 
HI_BOOL
 
bIn°™t
);

309 
HI_S32
 
HI_MPI_IVE_Quîy
(
IVE_HANDLE
 
IveH™dÀ
, 
HI_BOOL
 *
pbFöish
, HI_BOOL 
bBlock
);

312 #ifde‡
__˝lu•lus


313 #i‡
__˝lu•lus


	@HiSDK/include/mpi_pciv.h

18 #i‚de‡
__MPI_PCIV_H__


19 
	#__MPI_PCIV_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_comm_video.h
"

23 
	~"hi_comm_pciv.h
"

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


41 
HI_S32
 
HI_MPI_PCIV_Cª©e
(
PCIV_CHN
 
pcivChn
, 
PCIV_ATTR_S
 *
pPcivAâr
);

52 
HI_S32
 
HI_MPI_PCIV_De°roy
(
PCIV_CHN
 
pcivChn
);

64 
HI_S32
 
HI_MPI_PCIV_SëAâr
(
PCIV_CHN
 
pcivChn
, 
PCIV_ATTR_S
 *
pPcivAâr
);

75 
HI_S32
 
HI_MPI_PCIV_GëAâr
(
PCIV_CHN
 
pcivChn
, 
PCIV_ATTR_S
 *
pPcivAâr
);

87 
HI_S32
 
HI_MPI_PCIV_Sèπ
(
PCIV_CHN
 
pcivChn
);

98 
HI_S32
 
HI_MPI_PCIV_St›
(
PCIV_CHN
 
pcivChn
);

109 
HI_S32
 
HI_MPI_PCIV_DmaTask
(
PCIV_DMA_TASK_S
 *
pTask
);

123 
HI_U32
 
HI_MPI_PCIV_MÆloc
(HI_U32 
u32BlkSize
, HI_U32 
u32BlkC¡
, HI_U32 
u32PhyAddr
[]);

124 
HI_S32
 
HI_MPI_PCIV_Fªe
(
HI_U32
 
u32BlkC¡
, HI_U32 
u32PhyAddr
[]);

126 
HI_U32
 
HI_MPI_PCIV_MÆlocChnBuf„r
(
PCIV_CHN
 
pcivChn
, HI_U32 
u32BlkSize
, HI_U32 
u32BlkC¡
, HI_U32 
u32PhyAddr
[]);

127 
HI_S32
 
HI_MPI_PCIV_FªeChnBuf„r
(
PCIV_CHN
 
pcivChn
, 
HI_U32
 
u32BlkC¡
);

139 
HI_S32
 
HI_MPI_PCIV_GëLoˇlId
(
HI_VOID
);

164 
HI_S32
 
HI_MPI_PCIV_EnumChù
(HI_S32 
s32ChùID
[
PCIV_MAX_CHIPNUM
]);

179 
HI_S32
 
HI_MPI_PCIV_GëBa£Wödow
(HI_S32 
s32ChùId
, 
PCIV_BASEWINDOW_S
 *
pBa£
);

199 
HI_S32
 
HI_MPI_PCIV_WöVbCª©e
(
PCIV_WINVBCFG_S
 *
pCfg
);

215 
HI_S32
 
HI_MPI_PCIV_WöVbDe°roy
(
HI_VOID
);

223 
HI_S32
 
HI_MPI_PCIV_Show
(
PCIV_CHN
 
pcivChn
);

231 
HI_S32
 
HI_MPI_PCIV_Hide
(
PCIV_CHN
 
pcivChn
);

239 
HI_S32
 
HI_MPI_PCIV_GëPªProcCfg
(
PCIV_CHN
 
pcivChn
, 
PCIV_PREPROC_CFG_S
 *
p°Cfg
);

240 
HI_S32
 
HI_MPI_PCIV_SëPªProcCfg
(
PCIV_CHN
 
pcivChn
, 
PCIV_PREPROC_CFG_S
 *
p°Cfg
);

243 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus


	@HiSDK/include/mpi_region.h

17 #i‚de‡
__MPI_REGION_H__


18 
	#__MPI_REGION_H__


	)

20 
	~"hi_comm_ªgi⁄.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
HI_S32
 
HI_MPI_RGN_Cª©e
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
RGN_ATTR_S
 *
p°Regi⁄
);

29 
HI_S32
 
HI_MPI_RGN_De°roy
(
RGN_HANDLE
 
H™dÀ
);

31 
HI_S32
 
HI_MPI_RGN_GëAâr
(
RGN_HANDLE
 
H™dÀ
, 
RGN_ATTR_S
 *
p°Regi⁄
);

32 
HI_S32
 
HI_MPI_RGN_SëAâr
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
RGN_ATTR_S
 *
p°Regi⁄
);

34 
HI_S32
 
HI_MPI_RGN_SëBôM≠
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
BITMAP_S
 *
p°Bôm≠
);

36 
HI_S32
 
HI_MPI_RGN_AâachToChn
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
, c⁄° 
RGN_CHN_ATTR_S
 *
p°ChnAâr
);

37 
HI_S32
 
HI_MPI_RGN_DëachFromChn
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
);

39 
HI_S32
 
HI_MPI_RGN_SëDi•œyAâr
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
, c⁄° 
RGN_CHN_ATTR_S
 *
p°ChnAâr
);

40 
HI_S32
 
HI_MPI_RGN_GëDi•œyAâr
(
RGN_HANDLE
 
H™dÀ
, c⁄° 
MPP_CHN_S
 *
p°Chn
, 
RGN_CHN_ATTR_S
 *
p°ChnAâr
);

42 
HI_S32
 
HI_MPI_RGN_SëAâachFõld
(
RGN_HANDLE
 
H™dÀ
, 
VIDEO_FIELD_E
 
íAâachFõld
);

43 
HI_S32
 
HI_MPI_RGN_GëAâachFõld
(
RGN_HANDLE
 
H™dÀ
, 
VIDEO_FIELD_E
 *
≥nAâachFõld
);

45 
HI_S32
 
HI_MPI_RGN_GëC™vasInfo
(
RGN_HANDLE
 
H™dÀ
, 
RGN_CANVAS_INFO_S
 *
p°C™vasInfo
);

46 
HI_S32
 
HI_MPI_RGN_Upd©eC™vas
(
RGN_HANDLE
 
H™dÀ
);

49 #ifde‡
__˝lu•lus


50 #i‡
__˝lu•lus


	@HiSDK/include/mpi_sys.h

21 #i‚de‡
__MPI_SYS_H__


22 
	#__MPI_SYS_H__


	)

24 
	~"hi_ty≥.h
"

25 
	~"hi_comm⁄.h
"

26 
	~"hi_comm_sys.h
"

28 #ifde‡
__˝lu•lus


29 #i‡
__˝lu•lus


34 
HI_S32
 
HI_MPI_SYS_Inô
();

35 
HI_S32
 
HI_MPI_SYS_Exô
();

37 
HI_S32
 
HI_MPI_SYS_SëC⁄f
(c⁄° 
MPP_SYS_CONF_S
 *
p°SysC⁄f
);

38 
HI_S32
 
HI_MPI_SYS_GëC⁄f
(
MPP_SYS_CONF_S
 *
p°SysC⁄f
);

40 
HI_S32
 
HI_MPI_SYS_Böd
(
MPP_CHN_S
 *
p°SrcChn
, MPP_CHN_S *
p°De°Chn
);

41 
HI_S32
 
HI_MPI_SYS_UnBöd
(
MPP_CHN_S
 *
p°SrcChn
, MPP_CHN_S *
p°De°Chn
);

42 
HI_S32
 
HI_MPI_SYS_GëBödbyDe°
(
MPP_CHN_S
 *
p°De°Chn
, MPP_CHN_S *
p°SrcChn
);

44 
HI_S32
 
HI_MPI_SYS_GëVîsi⁄
(
MPP_VERSION_S
 *
p°Vîsi⁄
);

54 
HI_S32
 
HI_MPI_SYS_GëCurPts
(
HI_U64
 *
pu64CurPts
);

55 
HI_S32
 
HI_MPI_SYS_InôPtsBa£
(
HI_U64
 
u64PtsBa£
);

56 
HI_S32
 
HI_MPI_SYS_SyncPts
(
HI_U64
 
u64PtsBa£
);

59 
HI_S32
 
HI_MPI_SYS_MmzAŒoc
(
HI_U32
 *
pu32PhyAddr
, 
HI_VOID
 **
µVútAddr
,

60 c⁄° 
HI_CHAR
 *
°rMmb
, c⁄° HI_CHAR *
°rZ⁄e
, 
HI_U32
 
u32Lí
);

63 
HI_S32
 
HI_MPI_SYS_MmzAŒoc_Cached
(
HI_U32
 *
pu32PhyAddr
, 
HI_VOID
 **
µVôAddr
,

64 c⁄° 
HI_CHAR
 *
p°rMmb
, c⁄° HI_CHAR *
p°rZ⁄e
, 
HI_U32
 
u32Lí
);

67 
HI_S32
 
HI_MPI_SYS_MmzFªe
(
HI_U32
 
u32PhyAddr
, 
HI_VOID
 *
pVútAddr
);

70 
HI_S32
 
HI_MPI_SYS_MmzFlushCache
(
HI_U32
 
u32PhyAddr
, 
HI_VOID
 *
pVôAddr
, HI_U32 
u32Size
);

76 
HI_VOID
 * 
HI_MPI_SYS_Mm≠
(
HI_U32
 
u32PhyAddr
, HI_U32 
u32Size
);

77 
HI_S32
 
HI_MPI_SYS_Munm≠
(
HI_VOID
* 
pVúAddr
, 
HI_U32
 
u32Size
);

83 
HI_S32
 
HI_MPI_SYS_SëReg
(
HI_U32
 
u32Addr
, HI_U32 
u32VÆue
);

84 
HI_S32
 
HI_MPI_SYS_GëReg
(
HI_U32
 
u32Addr
, HI_U32 *
pu32VÆue
);

86 
HI_S32
 
HI_MPI_SYS_SëMemC⁄f
(
MPP_CHN_S
 *
p°MµChn
,c⁄° 
HI_CHAR
 *
pcMmzName
);

87 
HI_S32
 
HI_MPI_SYS_GëMemC⁄f
(
MPP_CHN_S
 *
p°MµChn
,
HI_CHAR
 *
pcMmzName
);

90 
HI_S32
 
HI_MPI_SYS_Clo£Fd
(
HI_VOID
);

93 #ifde‡
__˝lu•lus


94 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vb.h

16 #i‚de‡
__MPI_VB_H__


17 
	#__MPI_VB_H__


	)

19 
	~"hi_comm_vb.h
"

21 #ifde‡
__˝lu•lus


22 #i‡
__˝lu•lus


27 
VB_POOL
 
HI_MPI_VB_Cª©ePoﬁ
(
HI_U32
 
u32BlkSize
,HI_U32 
u32BlkC¡
,c⁄° 
HI_CHAR
 *
pcMmzName
);

28 
HI_S32
 
HI_MPI_VB_De°royPoﬁ
(
VB_POOL
 
Poﬁ
);

30 
VB_BLK
 
HI_MPI_VB_GëBlock
(
VB_POOL
 
Poﬁ
, 
HI_U32
 
u32BlkSize
,c⁄° 
HI_CHAR
 *
pcMmzName
);

31 
HI_S32
 
HI_MPI_VB_Rñó£Block
(
VB_BLK
 
Block
);

33 
HI_U32
 
HI_MPI_VB_H™dÀ2PhysAddr
(
VB_BLK
 
Block
);

34 
VB_POOL
 
HI_MPI_VB_H™dÀ2PoﬁId
(
VB_BLK
 
Block
);

36 
HI_S32
 
HI_MPI_VB_Inô
(
HI_VOID
);

37 
HI_S32
 
HI_MPI_VB_Exô
(
HI_VOID
);

38 
HI_S32
 
HI_MPI_VB_SëC⁄f
(c⁄° 
VB_CONF_S
 *
p°VbC⁄f
);

39 
HI_S32
 
HI_MPI_VB_GëC⁄f
(
VB_CONF_S
 *
p°VbC⁄f
);

41 
HI_S32
 
HI_MPI_VB_Mm≠Poﬁ
(
VB_POOL
 
Poﬁ
);

42 
HI_S32
 
HI_MPI_VB_Munm≠Poﬁ
(
VB_POOL
 
Poﬁ
);

44 
HI_S32
 
HI_MPI_VB_GëBlkVúAddr
(
VB_POOL
 
Poﬁ
, 
HI_U32
 
u32PhyAddr
, 
HI_VOID
 **
µVúAddr
);

46 
HI_S32
 
HI_MPI_VB_InôModCommPoﬁ
(
VB_UID_E
 
íVbUid
);

47 
HI_S32
 
HI_MPI_VB_ExôModCommPoﬁ
(
VB_UID_E
 
íVbUid
);

49 
HI_S32
 
HI_MPI_VB_SëModPoﬁC⁄f
(
VB_UID_E
 
íVbUid
, c⁄° 
VB_CONF_S
 *
p°VbC⁄f
);

50 
HI_S32
 
HI_MPI_VB_GëModPoﬁC⁄f
(
VB_UID_E
 
íVbUid
, 
VB_CONF_S
 *
p°VbC⁄f
);

53 #ifde‡
__˝lu•lus


54 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vda.h

17 #i‚de‡
__MPI_VDA_H__


18 
	#__MPI_VDA_H__


	)

20 
	~"hi_comm_vda.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
HI_S32
 
HI_MPI_VDA_Cª©eChn
(
VDA_CHN
 
VdaChn
, c⁄° 
VDA_CHN_ATTR_S
 *
p°Aâr
);

29 
HI_S32
 
HI_MPI_VDA_De°royChn
(
VDA_CHN
 
VdaChn
);

31 
HI_S32
 
HI_MPI_VDA_GëChnAâr
(
VDA_CHN
 
VdaChn
, 
VDA_CHN_ATTR_S
 *
p°Aâr
);

32 
HI_S32
 
HI_MPI_VDA_SëChnAâr
(
VDA_CHN
 
VdaChn
, c⁄° 
VDA_CHN_ATTR_S
 *
p°Aâr
);

34 
HI_S32
 
HI_MPI_VDA_SèπRecvPic
(
VDA_CHN
 
VdaChn
);

35 
HI_S32
 
HI_MPI_VDA_St›RecvPic
(
VDA_CHN
 
VdaChn
);

37 
HI_S32
 
HI_MPI_VDA_GëD©a
(
VDA_CHN
 
VdaChn
, 
VDA_DATA_S
 *
p°VdaD©a
, HI_S32 
s32MûliSec
);

38 
HI_S32
 
HI_MPI_VDA_Rñó£D©a
(
VDA_CHN
 
VdaChn
, c⁄° 
VDA_DATA_S
* 
p°VdaD©a
);

40 
HI_S32
 
HI_MPI_VDA_Re£tOdRegi⁄
(
VDA_CHN
 
VdaChn
, HI_S32 
s32RgnIndex
);

42 
HI_S32
 
HI_MPI_VDA_Quîy
(
VDA_CHN
 
VdaChn
, 
VDA_CHN_STAT_S
 *
p°ChnSèt
);

44 
HI_S32
 
HI_MPI_VDA_GëFd
(
VDA_CHN
 
VdaChn
);

46 
HI_S32
 
HI_MPI_VDA_Upd©eRef
(
VDA_CHN
 
VdaChn
, c⁄° 
VIDEO_FRAME_INFO_S
 *
p°RefFøme
);

48 
HI_S32
 
HI_MPI_VDA_SídPic
(
VDA_CHN
 
VdaChn
, c⁄° 
VIDEO_FRAME_INFO_S
 *
p°U£rFøme
, HI_S32 
s32MûliSec
);

51 #ifde‡
__˝lu•lus


52 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vdec.h

16 #i‚de‡ 
__MPI_VDEC_H__


17 
	#__MPI_VDEC_H__


	)

19 
	~"hi_comm⁄.h
"

20 
	~"hi_comm_video.h
"

21 
	~"hi_comm_vdec.h
"

23 #ifde‡
__˝lu•lus


24 #i‡
__˝lu•lus


30 
HI_S32
 
HI_MPI_VDEC_Cª©eChn
(
VDEC_CHN
 
VdChn
, c⁄° 
VDEC_CHN_ATTR_S
 *
p°Aâr
);

31 
HI_S32
 
HI_MPI_VDEC_De°royChn
(
VDEC_CHN
 
VdChn
);

33 
HI_S32
 
HI_MPI_VDEC_GëChnAâr
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_ATTR_S
 *
p°Aâr
);

35 
HI_S32
 
HI_MPI_VDEC_SèπRecvSåóm
(
VDEC_CHN
 
VdChn
);

36 
HI_S32
 
HI_MPI_VDEC_St›RecvSåóm
(
VDEC_CHN
 
VdChn
);

38 
HI_S32
 
HI_MPI_VDEC_Quîy
(
VDEC_CHN
 
VdChn
,
VDEC_CHN_STAT_S
 *
p°Sèt
);

40 
HI_S32
 
HI_MPI_VDEC_GëFd
(
VDEC_CHN
 
VdChn
);

42 
HI_S32
 
HI_MPI_VDEC_Re£tChn
(
VDEC_CHN
 
VdChn
);

44 
HI_S32
 
HI_MPI_VDEC_SëChnP¨am
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_PARAM_S
* 
p°P¨am
);

45 
HI_S32
 
HI_MPI_VDEC_GëChnP¨am
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_PARAM_S
* 
p°P¨am
);

47 
HI_S32
 
HI_MPI_VDEC_SëPrŸocﬁP¨am
(
VDEC_CHN
 
VdChn
,
VDEC_PRTCL_PARAM_S
 *
p°P¨am
);

48 
HI_S32
 
HI_MPI_VDEC_GëPrŸocﬁP¨am
(
VDEC_CHN
 
VdChn
,
VDEC_PRTCL_PARAM_S
 *
p°P¨am
);

51 
HI_S32
 
HI_MPI_VDEC_SídSåóm
(
VDEC_CHN
 
VdChn
, c⁄° 
VDEC_STREAM_S
 *
p°Såóm
, HI_S32 
s32MûliSec
);

53 
HI_S32
 
HI_MPI_VDEC_GëImage
(
VDEC_CHN
 
VdChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
,HI_S32 
s32MûliSec
);

54 
HI_S32
 
HI_MPI_VDEC_Rñó£Image
(
VDEC_CHN
 
VdChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
);

56 
HI_S32
 
HI_MPI_VDEC_GëU£rD©a
(
VDEC_CHN
 
VdChn
, 
VDEC_USERDATA_S
 *
p°U£rD©a
, HI_S32 
s32MûliSec
);

57 
HI_S32
 
HI_MPI_VDEC_Rñó£U£rD©a
(
VDEC_CHN
 
VdChn
, 
VDEC_USERDATA_S
 *
p°U£rD©a
);

59 
HI_S32
 
HI_MPI_VDEC_SëRŸ©e
(
VDEC_CHN
 
VdChn
, 
ROTATE_E
 
íRŸ©e
);

60 
HI_S32
 
HI_MPI_VDEC_GëRŸ©e
(
VDEC_CHN
 
VdChn
, 
ROTATE_E
 *
≥nRŸ©e
);

62 
HI_S32
 
HI_MPI_VDEC_GëChnLuma
(
VDEC_CHN
 
VdChn
, 
VDEC_CHN_LUM_S
 *
p°Luma
);

64 
HI_S32
 
HI_MPI_VDEC_SëU£rPic
(
VDEC_CHN
 
VdChn
, 
VIDEO_FRAME_INFO_S
 *
p°U§Pic
);

65 
HI_S32
 
HI_MPI_VDEC_E«bÀU£rPic
(
VDEC_CHN
 
VdChn
, 
HI_BOOL
 
bIn°™t
);

66 
HI_S32
 
HI_MPI_VDEC_DißbÀU£rPic
(
VDEC_CHN
 
VdChn
);

68 
HI_S32
 
HI_MPI_VDEC_SëDi•œyMode
(
VDEC_CHN
 
VdChn
, 
VIDEO_DISPLAY_MODE_E
 
íDi•œyMode
);

69 
HI_S32
 
HI_MPI_VDEC_GëDi•œyMode
(
VDEC_CHN
 
VdChn
, 
VIDEO_DISPLAY_MODE_E
 *
≥nDi•œyMode
);

71 
HI_S32
 
HI_MPI_VDEC_SëChnVBC¡
(
VDEC_CHN
 
VdChn
, 
HI_U32
 
u32BlkC¡
);

72 
HI_S32
 
HI_MPI_VDEC_GëChnVBC¡
(
VDEC_CHN
 
VdChn
, 
HI_U32
 *
pu32BlkC¡
);

77 #ifde‡
__˝lu•lus


78 #i‡
__˝lu•lus


	@HiSDK/include/mpi_venc.h

15 #i‚de‡
__MPI_VENC_H__


16 
	#__MPI_VENC_H__


	)

18 
	~"hi_comm⁄.h
"

19 
	~"hi_comm_video.h
"

20 
	~"hi_comm_víc.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


28 
HI_S32
 
HI_MPI_VENC_Cª©eChn
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_CHN_ATTR_S
 *
p°Aâr
);

29 
HI_S32
 
HI_MPI_VENC_De°royChn
(
VENC_CHN
 
VeChn
);

31 
HI_S32
 
HI_MPI_VENC_Re£tChn
(
VENC_CHN
 
VeChn
);

33 
HI_S32
 
HI_MPI_VENC_SèπRecvPic
(
VENC_CHN
 
VeChn
);

34 
HI_S32
 
HI_MPI_VENC_SèπRecvPicEx
(
VENC_CHN
 
VeChn
, 
VENC_RECV_PIC_PARAM_S
 *
p°RecvP¨am
);

35 
HI_S32
 
HI_MPI_VENC_St›RecvPic
(
VENC_CHN
 
VeChn
);

37 
HI_S32
 
HI_MPI_VENC_Quîy
(
VENC_CHN
 
VeChn
, 
VENC_CHN_STAT_S
 *
p°Sèt
);

39 
HI_S32
 
HI_MPI_VENC_SëChnAâr
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_CHN_ATTR_S
 *
p°Aâr
);

40 
HI_S32
 
HI_MPI_VENC_GëChnAâr
(
VENC_CHN
 
VeChn
, 
VENC_CHN_ATTR_S
 *
p°Aâr
);

42 
HI_S32
 
HI_MPI_VENC_GëSåóm
(
VENC_CHN
 
VeChn
, 
VENC_STREAM_S
 *
p°Såóm
, HI_S32 
s32MûliSec
);

43 
HI_S32
 
HI_MPI_VENC_Rñó£Såóm
(
VENC_CHN
 
VeChn
, 
VENC_STREAM_S
 *
p°Såóm
);

45 
HI_S32
 
HI_MPI_VENC_In£πU£rD©a
(
VENC_CHN
 
VeChn
, 
HI_U8
 *
pu8D©a
, 
HI_U32
 
u32Lí
);

47 
HI_S32
 
HI_MPI_VENC_SídFøme
(
VENC_CHN
 
VeChn
, 
VIDEO_FRAME_INFO_S
 *
p°Føme
 ,HI_S32 
s32MûliSec
);

49 
HI_S32
 
HI_MPI_VENC_SëMaxSåómC¡
(
VENC_CHN
 
VeChn
, 
HI_U32
 
u32MaxSåmC¡
);

50 
HI_S32
 
HI_MPI_VENC_GëMaxSåómC¡
(
VENC_CHN
 
VeChn
, 
HI_U32
 *
pu32MaxSåmC¡
);

52 
HI_S32
 
HI_MPI_VENC_Reque°IDR
(
VENC_CHN
 
VeChn
,
HI_BOOL
 
bIn°™t
);

54 
HI_S32
 
HI_MPI_VENC_GëFd
(
VENC_CHN
 
VeChn
);

56 
HI_S32
 
HI_MPI_VENC_SëRoiCfg
(
VENC_CHN
 
VeChn
, 
VENC_ROI_CFG_S
 *
p°VícRoiCfg
);

57 
HI_S32
 
HI_MPI_VENC_GëRoiCfg
(
VENC_CHN
 
VeChn
, 
HI_U32
 
u32Index
, 
VENC_ROI_CFG_S
 *
p°VícRoiCfg
);

59 
HI_S32
 
HI_MPI_VENC_SëRoiBgFømeR©e
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_ROIBG_FRAME_RATE_S
 *
p°RoiBgFrmR©e
);

60 
HI_S32
 
HI_MPI_VENC_GëRoiBgFømeR©e
(
VENC_CHN
 
VeChn
, 
VENC_ROIBG_FRAME_RATE_S
 *
p°RoiBgFrmR©e
);

62 
HI_S32
 
HI_MPI_VENC_SëH264Sli˚S∂ô
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_SLICE_SPLIT_S
 *
p°Sli˚S∂ô
);

63 
HI_S32
 
HI_MPI_VENC_GëH264Sli˚S∂ô
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_SLICE_SPLIT_S
 *
p°Sli˚S∂ô
);

65 
HI_S32
 
HI_MPI_VENC_SëH264I¡îPªd
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_INTER_PRED_S
 *
p°H264I¡îPªd
);

66 
HI_S32
 
HI_MPI_VENC_GëH264I¡îPªd
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_INTER_PRED_S
 *
p°H264I¡îPªd
);

68 
HI_S32
 
HI_MPI_VENC_SëH264I¡øPªd
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_INTRA_PRED_S
 *
p°H264I¡îPªd
);

69 
HI_S32
 
HI_MPI_VENC_GëH264I¡øPªd
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_INTRA_PRED_S
 *
p°H264I¡îPªd
);

71 
HI_S32
 
HI_MPI_VENC_SëH264Tøns
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_TRANS_S
 *
p°H264Tøns
);

72 
HI_S32
 
HI_MPI_VENC_GëH264Tøns
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_TRANS_S
 *
p°H264Tøns
);

74 
HI_S32
 
HI_MPI_VENC_SëH264E¡r›y
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_ENTROPY_S
 *
p°H264E¡r›yEnc
);

75 
HI_S32
 
HI_MPI_VENC_GëH264E¡r›y
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_ENTROPY_S
 *
p°H264E¡r›yEnc
);

77 
HI_S32
 
HI_MPI_VENC_SëH264Poc
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_POC_S
 *
p°H264Poc
);

78 
HI_S32
 
HI_MPI_VENC_GëH264Poc
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_POC_S
 *
p°H264Poc
);

80 
HI_S32
 
HI_MPI_VENC_SëH264Dblk
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_DBLK_S
 *
p°H264Dblk
);

81 
HI_S32
 
HI_MPI_VENC_GëH264Dblk
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_DBLK_S
 *
p°H264Dblk
);

83 
HI_S32
 
HI_MPI_VENC_SëH264Vui
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_VUI_S
 *
p°H264Vui
);

84 
HI_S32
 
HI_MPI_VENC_GëH264Vui
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_VUI_S
 *
p°H264Vui
);

86 
HI_S32
 
HI_MPI_VENC_SëJ≥gP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_JPEG_S
 *
p°J≥gP¨am
);

87 
HI_S32
 
HI_MPI_VENC_GëJ≥gP¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_JPEG_S
 *
p°J≥gP¨am
);

89 
HI_S32
 
HI_MPI_VENC_SëM≥g4P¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_MPEG4_S
 *
p°M≥g4P¨am
);

90 
HI_S32
 
HI_MPI_VENC_GëM≥g4P¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_MPEG4_S
 *
p°M≥g4P¨am
);

92 
HI_S32
 
HI_MPI_VENC_SëMj≥gP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_MJPEG_S
 *
p°Mj≥gP¨am
);

93 
HI_S32
 
HI_MPI_VENC_GëMj≥gP¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_MJPEG_S
 *
p°Mj≥gP¨am
);

95 
HI_S32
 
HI_MPI_VENC_SëFømeR©e
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_FRAME_RATE_S
 *
p°FømeR©e
);

96 
HI_S32
 
HI_MPI_VENC_GëFømeR©e
(
VENC_CHN
 
VeChn
, 
VENC_FRAME_RATE_S
 *
p°FømeR©e
);

98 
HI_S32
 
HI_MPI_VENC_GëRcP¨am
(
VENC_CHN
 
VeChn
, 
VENC_RC_PARAM_S
 *
p°RcP¨am
);

99 
HI_S32
 
HI_MPI_VENC_SëRcP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_RC_PARAM_S
 *
p°RcP¨am
);

101 
HI_S32
 
HI_MPI_VENC_SëH264eRefMode
(
VENC_CHN
 
VeChn
, 
VENC_H264_REF_MODE_E
 
íRefMode
);

102 
HI_S32
 
HI_MPI_VENC_GëH264eRefMode
(
VENC_CHN
 
VeChn
, 
VENC_H264_REF_MODE_E
 *
≥nRefMode
);

104 
HI_S32
 
HI_MPI_VENC_SëH264eRefP¨am
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_PARAM_H264_REF_S
 *
p°RefP¨am
);

105 
HI_S32
 
HI_MPI_VENC_GëH264eRefP¨am
(
VENC_CHN
 
VeChn
, 
VENC_PARAM_H264_REF_S
 *
p°RefP¨am
);

107 
HI_S32
 
HI_MPI_VENC_SëCﬁ‹2Gªy
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_COLOR2GREY_S
 *
p°ChnCﬁ‹2Gªy
);

108 
HI_S32
 
HI_MPI_VENC_GëCﬁ‹2Gªy
(
VENC_CHN
 
VeChn
, 
VENC_COLOR2GREY_S
 *
p°ChnCﬁ‹2Gªy
);

110 
HI_S32
 
HI_MPI_VENC_SëCr›
(
VENC_CHN
 
VeChn
, c⁄° 
VENC_CROP_CFG_S
 *
p°Cr›Cfg
);

111 
HI_S32
 
HI_MPI_VENC_GëCr›
(
VENC_CHN
 
VeChn
, 
VENC_CROP_CFG_S
 *
p°Cr›Cfg
);

113 
HI_S32
 
HI_MPI_VENC_SëJ≥gS«pMode
(
VENC_CHN
 
VeChn
, 
VENC_JPEG_SNAP_MODE_E
 
íJ≥gS«pMode
);

114 
HI_S32
 
HI_MPI_VENC_GëJ≥gS«pMode
(
VENC_CHN
 
VeChn
, 
VENC_JPEG_SNAP_MODE_E
 *
≥nJ≥gS«pMode
);

116 
HI_S32
 
HI_MPI_VENC_E«bÀIDR
(
VENC_CHN
 
VeChn
, 
HI_BOOL
 
bE«bÀIDR
);

118 
HI_S32
 
HI_MPI_VENC_SëH264eIdrPicId
–
VENC_CHN
 
VeChn
, 
VENC_H264_IDRPICID_CFG_S
* 
p°H264eIdrPicIdCfg
 );

119 
HI_S32
 
HI_MPI_VENC_GëH264eIdrPicId
–
VENC_CHN
 
VeChn
, 
VENC_H264_IDRPICID_CFG_S
* 
p°H264eIdrPicIdCfg
 );

121 
HI_S32
 
HI_MPI_VENC_GëSåómBufInfo
(
VENC_CHN
 
VeChn
, 
VENC_STREAM_BUF_INFO_S
 *
p°SåómBufInfo
);

123 #ifde‡
__˝lu•lus


124 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vgs.h

15 #i‚de‡
__MPI_VGS_H__


16 
	#__MPI_VGS_H__


	)

18 
	~"hi_comm⁄.h
"

19 
	~"hi_comm_video.h
"

20 
	~"hi_comm_vgs.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


43 
HI_S32
 
HI_MPI_VGS_BegöJob
(
VGS_HANDLE
 *
phH™dÀ
);

62 
HI_S32
 
HI_MPI_VGS_AddSˇÀTask
(
VGS_HANDLE
 
hH™dÀ
,
VGS_TASK_ATTR_S
 *
p°Task
);

80 
HI_S32
 
HI_MPI_VGS_EndJob
(
VGS_HANDLE
 
hH™dÀ
);

97 
HI_S32
 
HI_MPI_VGS_C™˚lJob
(
VGS_HANDLE
 
hH™dÀ
);

101 #ifde‡
__˝lu•lus


102 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vi.h

17 #i‚de‡
__MPI_VI_H__


18 
	#__MPI_VI_H__


	)

20 
	~"hi_comm_vi.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


29 
HI_S32
 
HI_MPI_VI_SëDevAâr
(
VI_DEV
 
ViDev
, c⁄° 
VI_DEV_ATTR_S
 *
p°DevAâr
);

30 
HI_S32
 
HI_MPI_VI_GëDevAâr
(
VI_DEV
 
ViDev
, 
VI_DEV_ATTR_S
 *
p°DevAâr
);

32 
HI_S32
 
HI_MPI_VI_E«bÀDev
(
VI_DEV
 
ViDev
);

33 
HI_S32
 
HI_MPI_VI_DißbÀDev
(
VI_DEV
 
ViDev
);

35 
HI_S32
 
HI_MPI_VI_SëChnAâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_CHN_ATTR_S
 *
p°Aâr
);

36 
HI_S32
 
HI_MPI_VI_GëChnAâr
(
VI_CHN
 
ViChn
, 
VI_CHN_ATTR_S
 *
p°Aâr
);

39 
HI_S32
 
HI_MPI_VI_SëChnMö‹Aâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_CHN_ATTR_S
 *
p°Aâr
);

40 
HI_S32
 
HI_MPI_VI_GëChnMö‹Aâr
(
VI_CHN
 
ViChn
, 
VI_CHN_ATTR_S
 *
p°Aâr
);

41 
HI_S32
 
HI_MPI_VI_CÀ¨ChnMö‹Aâr
(
VI_CHN
 
ViChn
);

43 
HI_S32
 
HI_MPI_VI_E«bÀChn
(
VI_CHN
 
ViChn
);

44 
HI_S32
 
HI_MPI_VI_DißbÀChn
(
VI_CHN
 
ViChn
);

46 
HI_S32
 
HI_MPI_VI_GëFøme
(
VI_CHN
 
ViChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
, HI_S32 
s32MûliSec
);

47 
HI_S32
 
HI_MPI_VI_Rñó£Føme
(
VI_CHN
 
ViChn
, 
VIDEO_FRAME_INFO_S
 *
p°FømeInfo
);

48 
HI_S32
 
HI_MPI_VI_SëFømeDïth
(
VI_CHN
 
ViChn
, 
HI_U32
 
u32Dïth
);

49 
HI_S32
 
HI_MPI_VI_GëFømeDïth
(
VI_CHN
 
ViChn
, 
HI_U32
 *
pu32Dïth
);

51 
HI_S32
 
HI_MPI_VI_SëU£rPic
(
VI_CHN
 
ViChn
, 
VI_USERPIC_ATTR_S
 *
p°U§Pic
);

52 
HI_S32
 
HI_MPI_VI_E«bÀU£rPic
(
VI_CHN
 
ViChn
);

53 
HI_S32
 
HI_MPI_VI_DißbÀU£rPic
(
VI_CHN
 
ViChn
);

56 
HI_S32
 
HI_MPI_VI_E«bÀCasˇde
(
VI_DEV
 
ViDev
);

57 
HI_S32
 
HI_MPI_VI_DißbÀCasˇde
(
VI_DEV
 
ViDev
);

58 
HI_S32
 
HI_MPI_VI_E«bÀCasˇdeChn
(
VI_CHN
 
ViChn
);

59 
HI_S32
 
HI_MPI_VI_DißbÀCasˇdeChn
(
VI_CHN
 
ViChn
);

62 
HI_S32
 
HI_MPI_VI_BödChn
(
VI_CHN
 
ViChn
, c⁄° 
VI_CHN_BIND_ATTR_S
 *
p°ChnBödAâr
);

63 
HI_S32
 
HI_MPI_VI_UnBödChn
(
VI_CHN
 
ViChn
);

64 
HI_S32
 
HI_MPI_VI_GëChnBöd
(
VI_CHN
 
ViChn
, 
VI_CHN_BIND_ATTR_S
 *
p°ChnBödAâr
);

66 
HI_S32
 
HI_MPI_VI_SëDevAârEx
(
VI_DEV
 
ViDev
, c⁄° 
VI_DEV_ATTR_EX_S
 *
p°DevAârEx
);

67 
HI_S32
 
HI_MPI_VI_GëDevAârEx
(
VI_DEV
 
ViDev
, 
VI_DEV_ATTR_EX_S
 *
p°DevAârEx
);

69 
HI_S32
 
HI_MPI_VI_GëFd
(
VI_CHN
 
ViChn
);

71 
HI_S32
 
HI_MPI_VI_Quîy
(
VI_CHN
 
ViChn
, 
VI_CHN_STAT_S
 *
p°Sèt
);

73 
HI_S32
 
HI_MPI_VI_E«bÀChnI¡îru±
(
VI_CHN
 
ViChn
);

74 
HI_S32
 
HI_MPI_VI_DißbÀChnI¡îru±
(
VI_CHN
 
ViChn
);

76 
HI_S32
 
HI_MPI_VI_SëFœshC⁄fig
(
VI_DEV
 
ViDev
, c⁄° 
VI_FLASH_CONFIG_S
 *
p°FœshC⁄fig
);

77 
HI_S32
 
HI_MPI_VI_GëFœshC⁄fig
(
VI_DEV
 
ViDev
, 
VI_FLASH_CONFIG_S
 *
p°FœshC⁄fig
);

78 
HI_S32
 
HI_MPI_VI_TriggîFœsh
(
VI_DEV
 
ViDev
, 
HI_BOOL
 
bE«bÀ
);

80 
HI_S32
 
HI_MPI_VI_SëExtChnAâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

81 
HI_S32
 
HI_MPI_VI_GëExtChnAâr
(
VI_CHN
 
ViChn
, 
VI_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

83 
HI_S32
 
HI_MPI_VI_SëLDCAâr
(
VI_CHN
 
ViChn
, c⁄° 
VI_LDC_ATTR_S
 *
p°LDCAâr
);

84 
HI_S32
 
HI_MPI_VI_GëLDCAâr
(
VI_CHN
 
ViChn
, 
VI_LDC_ATTR_S
 *
p°LDCAâr
);

86 
HI_S32
 
HI_MPI_VI_SëCSCAâr
(
VI_DEV
 
ViDev
, c⁄° 
VI_CSC_ATTR_S
 *
p°CSCAâr
);

87 
HI_S32
 
HI_MPI_VI_GëCSCAâr
(
VI_DEV
 
ViDev
, 
VI_CSC_ATTR_S
 *
p°CSCAâr
);

89 
HI_S32
 
HI_MPI_VI_SëRŸ©e
(
VI_CHN
 
ViChn
, c⁄° 
ROTATE_E
 
íRŸ©e
);

90 
HI_S32
 
HI_MPI_VI_GëRŸ©e
(
VI_CHN
 
ViChn
, 
ROTATE_E
 *
≥nRŸ©e
);

92 
HI_S32
 
HI_MPI_VI_GëChnLuma
(
VI_CHN
 
ViChn
, 
VI_CHN_LUM_S
 *
p°Luma
);

94 
HI_S32
 
HI_MPI_VI_E«bÀBayîDump
(
VI_CHN
 
ViChn
);

95 
HI_S32
 
HI_MPI_VI_DißbÀBayîDump
(
VI_CHN
 
ViChn
);

97 #ifde‡
__˝lu•lus


98 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vo.h

17 #i‚de‡
__MPI_VO_H__


18 
	#__MPI_VO_H__


	)

20 
	~"hi_comm_vo.h
"

22 #ifde‡
__˝lu•lus


23 #i‡
__˝lu•lus


31 
HI_S32
 
HI_MPI_VO_E«bÀ
 (
VO_DEV
 
VoDev
);

32 
HI_S32
 
HI_MPI_VO_DißbÀ
(
VO_DEV
 
VoDev
);

34 
HI_S32
 
HI_MPI_VO_SëPubAâr
(
VO_DEV
 
VoDev
, c⁄° 
VO_PUB_ATTR_S
 *
p°PubAâr
);

35 
HI_S32
 
HI_MPI_VO_GëPubAâr
(
VO_DEV
 
VoDev
, 
VO_PUB_ATTR_S
 *
p°PubAâr
);

37 
HI_S32
 
HI_MPI_VO_Clo£Fd
(
HI_VOID
);

41 
HI_S32
 
HI_MPI_VO_E«bÀVideoLayî
 (
VO_LAYER
 
VoLayî
);

42 
HI_S32
 
HI_MPI_VO_DißbÀVideoLayî
(
VO_LAYER
 
VoLayî
);

44 
HI_S32
 
HI_MPI_VO_SëVideoLayîAâr
(
VO_LAYER
 
VoLayî
, c⁄° 
VO_VIDEO_LAYER_ATTR_S
 *
p°LayîAâr
);

45 
HI_S32
 
HI_MPI_VO_GëVideoLayîAâr
(
VO_LAYER
 
VoLayî
, 
VO_VIDEO_LAYER_ATTR_S
 *
p°LayîAâr
);

47 
HI_S32
 
HI_MPI_VO_BödVideoLayî
(
VO_LAYER
 
VoLayî
, 
VO_DEV
 
VoDev
);

48 
HI_S32
 
HI_MPI_VO_UnBödVideoLayî
(
VO_LAYER
 
VoLayî
, 
VO_DEV
 
VoDev
);

50 
HI_S32
 
HI_MPI_VO_SëVideoLayîPri‹ôy
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32Pri‹ôy
);

51 
HI_S32
 
HI_MPI_VO_GëVideoLayîPri‹ôy
(
VO_LAYER
 
VoLayî
, 
HI_U32
 *
pu32Pri‹ôy
);

53 
HI_S32
 
HI_MPI_VO_SëVideoLayîCSC
(
VO_LAYER
 
VoLayî
, c⁄° 
VO_CSC_S
 *
p°VideoCSC
);

54 
HI_S32
 
HI_MPI_VO_GëVideoLayîCSC
(
VO_LAYER
 
VoLayî
, 
VO_CSC_S
 *
p°VideoCSC
);

56 
HI_S32
 
HI_MPI_VO_SëVideoLayîP¨tôi⁄Mode
(
VO_LAYER
 
VoLayî
, 
VO_PART_MODE_E
 
íP¨tMode
);

57 
HI_S32
 
HI_MPI_VO_GëVideoLayîP¨tôi⁄Mode
(
VO_LAYER
 
VoLayî
, 
VO_PART_MODE_E
 *
≥nP¨tMode
);

59 
HI_S32
 
HI_MPI_VO_SëAârBegö
(
VO_LAYER
 
VoLayî
);

60 
HI_S32
 
HI_MPI_VO_SëAârEnd
 (
VO_LAYER
 
VoLayî
);

62 
HI_S32
 
HI_MPI_VO_SëPœyTﬁî©i⁄
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32Tﬁî©i⁄
);

63 
HI_S32
 
HI_MPI_VO_GëPœyTﬁî©i⁄
(
VO_LAYER
 
VoLayî
, 
HI_U32
 *
pu32Tﬁî©i⁄
);

65 
HI_S32
 
HI_MPI_VO_GëS¸ìnFøme
 (
VO_LAYER
 
VoLayî
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
);

66 
HI_S32
 
HI_MPI_VO_Rñó£S¸ìnFøme
(
VO_LAYER
 
VoLayî
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
);

68 
HI_S32
 
HI_MPI_VO_SëDi•BufLí
(
VO_LAYER
 
VoLayî
, 
HI_U32
 
u32BufLí
);

69 
HI_S32
 
HI_MPI_VO_GëDi•BufLí
(
VO_LAYER
 
VoLayî
, 
HI_U32
 *
pu32BufLí
);

73 
HI_S32
 
HI_MPI_VO_E«bÀChn
 (
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

74 
HI_S32
 
HI_MPI_VO_DißbÀChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

76 
HI_S32
 
HI_MPI_VO_SëChnAâr
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_CHN_ATTR_S
 *
p°ChnAâr
);

77 
HI_S32
 
HI_MPI_VO_GëChnAâr
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_CHN_ATTR_S
 *
p°ChnAâr
);

79 
HI_S32
 
HI_MPI_VO_SëChnDi•Pos
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
POINT_S
 *
p°Di•Pos
);

80 
HI_S32
 
HI_MPI_VO_GëChnDi•Pos
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
POINT_S
 *
p°Di•Pos
);

82 
HI_S32
 
HI_MPI_VO_SëChnFõld
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VIDEO_FIELD_E
 
íFõld
);

83 
HI_S32
 
HI_MPI_VO_GëChnFõld
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VIDEO_FIELD_E
 *
pFõld
);

85 
HI_S32
 
HI_MPI_VO_SëChnFømeR©e
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, HI_S32 
s32ChnFrmR©e
);

86 
HI_S32
 
HI_MPI_VO_GëChnFømeR©e
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, HI_S32 *
ps32ChnFrmR©e
);

88 
HI_S32
 
HI_MPI_VO_GëChnFøme
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VIDEO_FRAME_INFO_S
 *
p°Føme
);

89 
HI_S32
 
HI_MPI_VO_Rñó£ChnFøme
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VIDEO_FRAME_INFO_S
 *
p°Føme
);

91 
HI_S32
 
HI_MPI_VO_Pau£Chn
 (
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

92 
HI_S32
 
HI_MPI_VO_ResumeChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

93 
HI_S32
 
HI_MPI_VO_SãpChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

94 
HI_S32
 
HI_MPI_VO_Re‰eshChn
–
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

96 
HI_S32
 
HI_MPI_VO_ShowChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

97 
HI_S32
 
HI_MPI_VO_HideChn
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
);

99 
HI_S32
 
HI_MPI_VO_SëZoomInWödow
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_ZOOM_ATTR_S
 *
p°ZoomAâr
);

100 
HI_S32
 
HI_MPI_VO_GëZoomInWödow
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_ZOOM_ATTR_S
 *
p°ZoomAâr
);

102 
HI_S32
 
HI_MPI_VO_GëChnPts
 (
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_U64
 *
pu64ChnPts
);

103 
HI_S32
 
HI_MPI_VO_QuîyChnSèt
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_QUERY_STATUS_S
 *
p°Sètus
);

105 
HI_S32
 
HI_MPI_VO_SídFøme
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
, HI_S32 
s32MûliSec
);

107 
HI_S32
 
HI_MPI_VO_CÀ¨ChnBuf„r
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_BOOL
 
bCÃAŒ
);

109 
HI_S32
 
HI_MPI_VO_SëChnB‹dî
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, c⁄° 
VO_BORDER_S
 *
p°B‹dî
);

110 
HI_S32
 
HI_MPI_VO_GëChnB‹dî
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_BORDER_S
 *
p°B‹dî
);

112 
HI_S32
 
HI_MPI_VO_SëChnRe˚iveThªshﬁd
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_U32
 
u32Thªshﬁd
);

113 
HI_S32
 
HI_MPI_VO_GëChnRe˚iveThªshﬁd
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
HI_U32
 *
pu32Thªshﬁd
);

115 
HI_S32
 
HI_MPI_VO_GëChnRegi⁄Luma
(
VO_LAYER
 
VoLayî
, 
VO_CHN
 
VoChn
, 
VO_REGION_INFO_S
 *
p°Regi⁄Info
,

116 
HI_U32
 *
pu32LumaD©a
, 
HI_S32
 
s32MûliSec
);

119 
HI_S32
 
HI_MPI_VO_SëWbcSour˚
(
VO_WBC
 
VoWbc
, c⁄° 
VO_WBC_SOURCE_S
 *
p°WbcSour˚
);

120 
HI_S32
 
HI_MPI_VO_GëWbcSour˚
(
VO_WBC
 
VoWbc
, 
VO_WBC_SOURCE_S
 *
p°WbcSour˚s
);

122 
HI_S32
 
HI_MPI_VO_E«bÀWbc
(
VO_WBC
 
VoWbc
);

123 
HI_S32
 
HI_MPI_VO_DißbÀWbc
(
VO_WBC
 
VoWbc
);

125 
HI_S32
 
HI_MPI_VO_SëWbcAâr
(
VO_WBC
 
VoWbc
, c⁄° 
VO_WBC_ATTR_S
 *
p°WbcAâr
);

126 
HI_S32
 
HI_MPI_VO_GëWbcAâr
(
VO_WBC
 
VoWbc
, 
VO_WBC_ATTR_S
 *
p°WbcAâr
);

128 
HI_S32
 
HI_MPI_VO_SëWbcMode
(
VO_WBC
 
VoWbc
, 
VO_WBC_MODE_E
 
íWbcMode
);

129 
HI_S32
 
HI_MPI_VO_GëWbcMode
(
VO_WBC
 
VoWbc
, 
VO_WBC_MODE_E
 *
≥nWbcMode
);

131 
HI_S32
 
HI_MPI_VO_SëWbcDïth
(
VO_WBC
 
VoWbc
, 
HI_U32
 
u32Dïth
);

132 
HI_S32
 
HI_MPI_VO_GëWbcDïth
(
VO_WBC
 
VoWbc
, 
HI_U32
 *
pu32Dïth
);

134 
HI_S32
 
HI_MPI_VO_GëWbcFøme
(
VO_WBC
 
VoWbc
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
);

135 
HI_S32
 
HI_MPI_VO_Rñó£WbcFøme
(
VO_WBC
 
VoWbc
, 
VIDEO_FRAME_INFO_S
 *
p°VFøme
);

139 
HI_S32
 
HI_MPI_VO_BödGøphicLayî
(
GRAPHIC_LAYER
 
GøphicLayî
, 
VO_DEV
 
VoDev
);

140 
HI_S32
 
HI_MPI_VO_UnBödGøphicLayî
(
GRAPHIC_LAYER
 
GøphicLayî
, 
VO_DEV
 
VoDev
);

142 
HI_S32
 
HI_MPI_VO_SëGøphicLayîCSC
(
GRAPHIC_LAYER
 
GøphicLayî
, c⁄° 
VO_CSC_S
 *
p°CSC
);

143 
HI_S32
 
HI_MPI_VO_GëGøphicLayîCSC
(
GRAPHIC_LAYER
 
GøphicLayî
, 
VO_CSC_S
 *
p°CSC
);

147 
HI_S32
 
HI_MPI_VO_SëCasˇdeAâr
(c⁄° 
VO_CAS_ATTR_S
 *
p°CasAâr
);

148 
HI_S32
 
HI_MPI_VO_GëCasˇdeAâr
(
VO_CAS_ATTR_S
 *
p°CasAâr
);

150 
HI_S32
 
HI_MPI_VO_E«bÀCasˇdeDev
 (
VO_DEV
 
VoCasDev
);

151 
HI_S32
 
HI_MPI_VO_DißbÀCasˇdeDev
(
VO_DEV
 
VoCasDev
);

153 
HI_S32
 
HI_MPI_VO_SëCasˇdeP©ã∫
(
VO_DEV
 
VoCasDev
, 
HI_U32
 
u32P©ã∫
);

154 
HI_S32
 
HI_MPI_VO_GëCasˇdeP©ã∫
(
VO_DEV
 
VoCasDev
, 
HI_U32
 *
pu32P©ã∫
);

156 
HI_S32
 
HI_MPI_VO_BödCasˇdePos
(
HI_U32
 
u32Pos
, 
VO_DEV
 
VoCasDev
, 
VO_CHN
 
VoChn
);

157 
HI_S32
 
HI_MPI_VO_UnBödCasˇdePos
(
HI_U32
 
u32Pos
, 
VO_DEV
 
VoCasDev
, 
VO_CHN
 
VoChn
);

159 
HI_S32
 
HI_MPI_VO_E«bÀCasˇde
 (
HI_VOID
);

160 
HI_S32
 
HI_MPI_VO_DißbÀCasˇde
(
HI_VOID
);

164 
HI_S32
 
HI_MPI_VO_GëVgaP¨am
(
VO_DEV
 
VoDev
, 
VO_VGA_PARAM_S
 *
p°VgaP¨am
);

165 
HI_S32
 
HI_MPI_VO_SëVgaP¨am
(
VO_DEV
 
VoDev
, 
VO_VGA_PARAM_S
 *
p°VgaP¨am
);

166 
HI_S32
 
HI_MPI_VO_SëVgaSh¨≥nP¨am
(
VO_DEV
 
VoDev
, HI_S32 
s32Såígth
);

167 
HI_S32
 
HI_MPI_VO_GëVgaSh¨≥nP¨am
(
VO_DEV
 
VoDev
, HI_S32* 
ps32Såígth
);

170 #ifde‡
__˝lu•lus


171 #i‡
__˝lu•lus


	@HiSDK/include/mpi_vpss.h

18 #i‚de‡
__MPI_VPSS_H__


19 
	#__MPI_VPSS_H__


	)

21 
	~"hi_comm⁄.h
"

22 
	~"hi_comm_video.h
"

23 
	~"hi_comm_vpss.h
"

25 #ifde‡
__˝lu•lus


26 #i‡
__˝lu•lus


32 
HI_S32
 
HI_MPI_VPSS_Cª©eGΩ
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
 *
p°GΩAâr
);

33 
HI_S32
 
HI_MPI_VPSS_De°royGΩ
(
VPSS_GRP
 
VpssGΩ
);

35 
HI_S32
 
HI_MPI_VPSS_SèπGΩ
(
VPSS_GRP
 
VpssGΩ
);

36 
HI_S32
 
HI_MPI_VPSS_St›GΩ
(
VPSS_GRP
 
VpssGΩ
);

38 
HI_S32
 
HI_MPI_VPSS_Re£tGΩ
(
VPSS_GRP
 
VpssGΩ
);

40 
HI_S32
 
HI_MPI_VPSS_E«bÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
s32VpssCh∆
);

41 
HI_S32
 
HI_MPI_VPSS_DißbÀChn
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
s32VpssCh∆
);

43 
HI_S32
 
HI_MPI_VPSS_GëGΩAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
 *
p°GΩAâr
);

44 
HI_S32
 
HI_MPI_VPSS_SëGΩAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_ATTR_S
 *
p°GΩAâr
);

46 
HI_S32
 
HI_MPI_VPSS_E«bÀBackupFøme
(
VPSS_GRP
 
VpssGΩ
);

47 
HI_S32
 
HI_MPI_VPSS_DißbÀBackupFøme
(
VPSS_GRP
 
VpssGΩ
);

50 
HI_S32
 
HI_MPI_VPSS_GëChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_ATTR_S
 *
p°ChnAâr
);

51 
HI_S32
 
HI_MPI_VPSS_SëChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_ATTR_S
 *
p°ChnAâr
);

53 
HI_S32
 
HI_MPI_VPSS_SëChnP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_PARAM_S
 *
p°ChnSpP¨am
);

54 
HI_S32
 
HI_MPI_VPSS_GëChnP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_PARAM_S
 *
p°ChnSpP¨am
);

56 
HI_S32
 
HI_MPI_VPSS_SëGΩP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_PARAM_S
 *
p°VpssP¨am
);

57 
HI_S32
 
HI_MPI_VPSS_GëGΩP¨am
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_GRP_PARAM_S
 *
p°VpssP¨am
);

59 
HI_S32
 
HI_MPI_VPSS_SëGΩCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

60 
HI_S32
 
HI_MPI_VPSS_GëGΩCr›
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CROP_INFO_S
 *
p°Cr›Info
);

62 
HI_S32
 
HI_MPI_VPSS_SëChnMode
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_MODE_S
 *
p°VpssMode
);

63 
HI_S32
 
HI_MPI_VPSS_GëChnMode
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_CHN_MODE_S
 *
p°VpssMode
);

65 
HI_S32
 
HI_MPI_VPSS_SëDïth
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
HI_U32
 
u32Dïth
);

66 
HI_S32
 
HI_MPI_VPSS_GëDïth
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
HI_U32
 *
pu32Dïth
);

68 
HI_S32
 
HI_MPI_VPSS_SídFøme
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
, HI_S32 
s32MûliSec
);

70 
HI_S32
 
HI_MPI_VPSS_GëChnFøme
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
);

71 
HI_S32
 
HI_MPI_VPSS_Rñó£ChnFøme
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
);

73 
HI_S32
 
HI_MPI_VPSS_GëGΩFøme
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
, 
HI_U32
 
u32FømeIndex
);

74 
HI_S32
 
HI_MPI_VPSS_Rñó£GΩFøme
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FRAME_INFO_S
 *
p°VideoFøme
);

76 
HI_S32
 
HI_MPI_VPSS_SëGΩDñay
(
VPSS_GRP
 
VpssGΩ
, 
HI_U32
 
u32Dñay
);

77 
HI_S32
 
HI_MPI_VPSS_GëGΩDñay
(
VPSS_GRP
 
VpssGΩ
, 
HI_U32
 *
pu32Dñay
);

79 
HI_S32
 
HI_MPI_VPSS_SëPªSˇÀ
(
VPSS_GRP
 
VpssGΩ
,
VPSS_PRESCALE_INFO_S
 *
p°PªSˇÀInfo
);

80 
HI_S32
 
HI_MPI_VPSS_GëPªSˇÀ
(
VPSS_GRP
 
VpssGΩ
,
VPSS_PRESCALE_INFO_S
 *
p°PªSˇÀInfo
);

82 
HI_S32
 
HI_MPI_VPSS_SëGΩSizî
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_SIZER_INFO_S
 *
p°VpssSizîInfo
);

83 
HI_S32
 
HI_MPI_VPSS_GëGΩSizî
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_SIZER_INFO_S
 *
p°VpssSizîInfo
);

86 
HI_S32
 
HI_MPI_VPSS_SëGΩFømeR©e
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_FRAME_RATE_S
 *
p°VpssFømeR©e
);

87 
HI_S32
 
HI_MPI_VPSS_GëGΩFømeR©e
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_FRAME_RATE_S
 *
p°VpssFømeR©e
);

90 
HI_S32
 
HI_MPI_VPSS_SëGΩFõld
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FIELD_E
 
íC≠Sñ
);

91 
HI_S32
 
HI_MPI_VPSS_GëGΩFõld
(
VPSS_GRP
 
VpssGΩ
, 
VIDEO_FIELD_E
 *
íC≠Sñ
);

94 
HI_S32
 
HI_MPI_VPSS_SëExtChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

95 
HI_S32
 
HI_MPI_VPSS_GëExtChnAâr
(
VPSS_GRP
 
VpssGΩ
, 
VPSS_CHN
 
VpssChn
, 
VPSS_EXT_CHN_ATTR_S
 *
p°ExtChnAâr
);

97 
HI_S32
 
HI_MPI_VPSS_SëChnOvîœy
(
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
, 
HI_U32
 
u32OvîœyMask
);

98 
HI_S32
 
HI_MPI_VPSS_GëChnOvîœy
(
VPSS_GRP
 
VpssGΩ
,
VPSS_CHN
 
VpssChn
, 
HI_U32
 *
pu32OvîœyMask
);

101 
HI_S32
 
HI_MPI_VPSS_GëRegi⁄Luma
(
VPSS_GRP
 
VpssGΩ
,
VPSS_REGION_INFO_S
 *
p°Regi⁄Info
,

102 
HI_U32
 *
pu32LumaD©a
,
HI_S32
 
s32MûliSec
);

104 #ifde‡
__˝lu•lus


105 #i‡
__˝lu•lus


	@alarm/MotionDetect.c

1 
	~"MŸi⁄Dëe˘.h
"

3 
±hªad_t
 
	ggs_VdaPid
[2];

4 
VDA_MD_PARAM_S
 
	ggs_°MdP¨am
;

9 
	$HiMD_Cª©eVdaChn
(
VDA_CHN
 
VdaChn
)

11 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

12 
VDA_CHN_ATTR_S
 
°VdaChnAâr
;

13 
SIZE_S
 
°Size
;

14 
°Size
.
u32Width
 = 352;

15 
°Size
.
u32Height
 = 288;

16 i‡(
VDA_MAX_WIDTH
 < 
°Size
.
u32Width
 || 
VDA_MAX_HEIGHT
 < stSize.
u32Height
)

18 
	`SAMPLE_PRT
("Picture size invaild!\n");

19  
HI_FAILURE
;

22 
°VdaChnAâr
.
íW‹kMode
 = 
VDA_WORK_MODE_MD
;

23 
°VdaChnAâr
.
u32Width
 = 
°Size
.u32Width;

24 
°VdaChnAâr
.
u32Height
 = 
°Size
.u32Height;

25 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íVdaAlg
 = 
VDA_ALG_REF
;

26 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íMbSize
 = 
VDA_MB_16PIXEL
;

27 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íMbSadBôs
 = 
VDA_MB_SAD_8BIT
;

28 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
íRefMode
 = 
VDA_REF_MODE_DYNAMIC
;

29 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32MdBufNum
 = 8;

30 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32VdaI¡vl
 = 4;

31 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32BgUpSrcWgt
 = 64;

32 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32SadTh
 = 20;

33 
°VdaChnAâr
.
unAâr
.
°MdAâr
.
u32ObjNumMax
 = 64;

35 
s32Rë
 = 
	`HI_MPI_VDA_Cª©eChn
(
VdaChn
, &
°VdaChnAâr
);

36 if(
s32Rë
 !
HI_SUCCESS
)

38 
	`SAMPLE_PRT
("err!\n");

39  
s32Rë
;

41 
	`Prötf
("Create VDA Chn Ok!\n");

42  
s32Rë
;

43 
	}
}

48 
	$HiMD_BödViChn
(
VDA_CHN
 
VdaChn
)

50 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

51 
MPP_CHN_S
 
°SrcChn
, 
°De°Chn
;

52 
°SrcChn
.
íModId
 = 
HI_ID_VPSS
;

53 
°SrcChn
.
s32ChnId
 = 
VPSS_PRE0_CHN
;

54 
°SrcChn
.
s32DevId
 = 0;

56 
°De°Chn
.
íModId
 = 
HI_ID_VDA
;

57 
°De°Chn
.
s32ChnId
 = 
VdaChn
;

58 
°De°Chn
.
s32DevId
 = 0;

59 
s32Rë
 = 
	`HI_MPI_SYS_Böd
(&
°SrcChn
, &
°De°Chn
);

60 if(
s32Rë
 !
HI_SUCCESS
)

62 
	`SAMPLE_PRT
("err!\n");

63  
s32Rë
;

67 
	}
}

72 
HI_S32
 
	$SAMPLE_COMM_VDA_MdPπSad
(
FILE
 *
Â
, 
VDA_DATA_S
 *
p°VdaD©a
)

74 
HI_S32
 
i
, 
j
;

75 
HI_VOID
 *
pAddr
;

77 
	`Ârötf
(
Â
, "====%†=====\n", 
__FUNCTION__
);

78 i‡(
HI_TRUE
 !
p°VdaD©a
->
unD©a
.
°MdD©a
.
bMbSadVÆid
)

80 
	`Ârötf
(
Â
, "bMbSadValid = FALSE.\n");

81  
HI_SUCCESS
;

84 
i
=0; i<
p°VdaD©a
->
u32MbHeight
; i++)

86 
pAddr
 = (
HI_VOID
 *)((
HI_U32
)
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.pAddr

87 + 
i
 * 
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.
u32Såide
);

89 
j
=0; j<
p°VdaD©a
->
u32MbWidth
; j++)

91 
HI_U8
 *
pu8Addr
;

92 
HI_U16
 *
pu16Addr
;

94 if(
VDA_MB_SAD_8BIT
 =
p°VdaD©a
->
unD©a
.
°MdD©a
.
°MbSadD©a
.
íMbSadBôs
)

96 
pu8Addr
 = (
HI_U8
 *)
pAddr
 + 
j
;

98 
	`Ârötf
(
Â
, "%-2d ",*
pu8Addr
);

103 
pu16Addr
 = (
HI_U16
 *)
pAddr
 + 
j
;

105 
	`Ârötf
(
Â
, "%-4d ",*
pu16Addr
);

109 
	`¥ötf
("\n");

112 
	`fÊush
(
Â
);

113  
HI_SUCCESS
;

115 
	}
}

119 
	$HiMD_SèπRevPic
(
VDA_CHN
 
VdaChn
)

121 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

122 
s32Rë
 = 
	`HI_MPI_VDA_SèπRecvPic
(
VdaChn
);

123 if(
s32Rë
 !
HI_SUCCESS
)

125 
	`SAMPLE_PRT
("err!\n");

126  
s32Rë
;

129  
s32Rë
;

130 
	}
}

135 
HI_VOID
 *
	$HiMD_GëResu…Thªad
(
HI_VOID
 *
pd©a
)

137 
HI_S32
 
s32Rë
;

138 
VDA_CHN
 
VdaChn
;

139 
VDA_DATA_S
 
°VdaD©a
;

140 
VDA_MD_PARAM_S
 *
pgs_°MdP¨am
;

141 
HI_S32
 
maxfd
 = 0;

142 
FILE
 *
Â
 = 
°dout
;

143 
HI_S32
 
VdaFd
;

144 
fd_£t
 
ªad_fds
;

145 
timevÆ
 
TimeoutVÆ
;

147 
pgs_°MdP¨am
 = (
VDA_MD_PARAM_S
 *)
pd©a
;

149 
VdaChn
 = 
pgs_°MdP¨am
->VdaChn;

153 
VdaFd
 = 
	`HI_MPI_VDA_GëFd
(
VdaChn
);

154 i‡(
VdaFd
 < 0)

156 
	`SAMPLE_PRT
("HI_MPI_VDA_GetFd failed with %#x!\n",

157 
VdaFd
);

158  
NULL
;

160 i‡(
maxfd
 <
VdaFd
)

162 
maxfd
 = 
VdaFd
;

164 
	`sy°em
("clear");

165 
HI_TRUE
 =
pgs_°MdP¨am
->
bThªadSèπ
)

167 
	`FD_ZERO
(&
ªad_fds
);

168 
	`FD_SET
(
VdaFd
, &
ªad_fds
);

170 
TimeoutVÆ
.
tv_£c
 = 2;

171 
TimeoutVÆ
.
tv_u£c
 = 0;

172 
s32Rë
 = 
	`£À˘
(
maxfd
 + 1, &
ªad_fds
, 
NULL
, NULL, &
TimeoutVÆ
);

173 i‡(
s32Rë
 < 0)

175 
	`SAMPLE_PRT
("select failed!\n");

178 i‡(
s32Rë
 == 0)

180 
	`SAMPLE_PRT
("get vdaÑesultÅime out,ÉxitÅhread\n");

185 i‡(
	`FD_ISSET
(
VdaFd
, &
ªad_fds
))

190 
s32Rë
 = 
	`HI_MPI_VDA_GëD©a
(
VdaChn
, &
°VdaD©a
, -1);

191 if(
s32Rë
 !
HI_SUCCESS
)

193 
	`SAMPLE_PRT
("HI_MPI_VDA_GëD©®Áûed wôh %#x!\n", 
s32Rë
);

194  
NULL
;

199 
	`¥ötf
("\033[0;0H");

200 
	`SAMPLE_COMM_VDA_MdPπSad
(
Â
, &
°VdaD©a
);

206 
s32Rë
 = 
	`HI_MPI_VDA_Rñó£D©a
(
VdaChn
,&
°VdaD©a
);

207 if(
s32Rë
 !
HI_SUCCESS
)

209 
	`SAMPLE_PRT
("HI_MPI_VDA_Rñó£D©®Áûed wôh %#x!\n", 
s32Rë
);

210  
NULL
;

215  
HI_NULL
;

216 
	}
}

220 
	$HiMD_GëResu…
(
VDA_CHN
 
VdaChn
)

222 
gs_°MdP¨am
.
bThªadSèπ
 = 
HI_TRUE
;

223 
gs_°MdP¨am
.
VdaChn
 = VdaChn;

224 
	`±hªad_¸óã
(&
gs_VdaPid
[
SAMPLE_VDA_MD_CHN
],0, 
HiMD_GëResu…Thªad
, (
HI_VOID
 *)&
gs_°MdP¨am
);

226 
	}
}

230 
	$HiMD_Sèπ
()

232 
VDA_CHN
 
VdaChn
 = 0;

234 
	`HiMD_Cª©eVdaChn
(
VdaChn
);

236 
	`HiMD_BödViChn
(
VdaChn
);

238 
	`HiMD_SèπRevPic
(
VdaChn
);

240 
	`HiMD_GëResu…
(
VdaChn
);

242 
	}
}

247 *
	$Hi_MŸi⁄Dëe˘Thªad
(*
¨g
)

249 
	`¶ìp
(10);

250 
	`HiMD_Sèπ
();

253 
	`¶ìp
(10);

255  
NULL
;

256 
	}
}

260 
	$HisiMŸi⁄Dëe˘
()

262 
	`Cª©Thªad
(
Hi_MŸi⁄Dëe˘Thªad
,
NULL
);

264 
	}
}

	@alarm/MotionDetect.h

1 #i‚de‡
__ALARM_H__


2 
	#__ALARM_H___


	)

4 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<±hªad.h
>

10 
	~<uni°d.h
>

11 
	~"ßm∂e_comm.h
"

12 
	~"public.h
"

13 
	~"comm⁄.h
"

15 
	shiVDA_MD_PARAM_S


17 
HI_BOOL
 
bThªadSèπ
;

18 
VDA_CHN
 
VdaChn
;

19 }
	tVDA_MD_PARAM_S
;

20 
	#SAMPLE_VDA_MD_CHN
 0

	)

21 
HisiMŸi⁄Dëe˘
();

23 #ifde‡
__˝lu•lus


	@app/app.c

1 
	~"≠p.h
"

	@app/app.h

1 #i‚de‡
__APP_H__


2 
	#__APP_H___


	)

4 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~"comm⁄.h
"

10 
	~"public.h
"

11 
	~"Sh¨eMem.h
"

16 #ifde‡
__˝lu•lus


	@app/appFuncTable.c

1 
	~"≠pFuncTabÀ.h
"

11 
	$ShmMsg_SëDi•Mode
(*
pRecvD©a
, 
Lí
)

13 
Di•Mode
 = 0;

14 *
buf
 = 
pRecvD©a
;

15 
	`NVR_RódDWORD
(&
buf
, &
Di•Mode
);

16 
	`Prötf
("Mode:0x%08X\n",
Di•Mode
);

17 
	`Hi_DecSèπ
(
Di•Mode
);

18  
SUCCESS
;

19 
	}
}

30 
	$ShmMsg_VdecCålPœy
(*
pRecvD©a
, 
Lí
)

32 
Chn
 = 0;

33 
nWidth
 = 0, 
nHeight
 = 0;

34 *
pbuf
 = (*)
pRecvD©a
;

35 
	`NVR_RódDWORD
(&
pbuf
, &
Chn
);

36 
	`NVR_RódDWORD
(&
pbuf
, &
nWidth
);

37 
	`NVR_RódDWORD
(&
pbuf
, &
nHeight
);

38 
	`Prötf
("Chn:%d,Width:%d,Height:%d\n",
Chn
,
nWidth
,
nHeight
);

39 
	`DecLi°O≥ø_AddChn
(
Chn
, 
nWidth
, 
nHeight
);

40 
	`HisiMŸi⁄Dëe˘
();

41  
SUCCESS
;

42 
	}
}

53 
	$ShmMsg_VdecCålSt›
(*
pRecvD©a
, 
Lí
)

55 
Chn
 = 0;

56 *
pbuf
 = (*)
pRecvD©a
;

57 
	`NVR_RódDWORD
(&
pbuf
, &
Chn
);

58 
	`Prötf
("Chn:%d\n",
Chn
);

59 
	`DecLi°O≥ø_DñChn
(
Chn
);

60  
SUCCESS
;

61 
	}
}

66 
	$RódSåómHódî
(**
pbyBuf
, 
Cmd
 *
pCmdHódî
)

68 
	`NVR_RódWORD
(
pbyBuf
, &
pCmdHódî
->
cmdCode
);

69 
	`NVR_RódWORD
(
pbyBuf
, &
pCmdHódî
->
cmdCål
);

70 
	`NVR_RódWORD
(
pbyBuf
, &
pCmdHódî
->
cmdIndex
);

71 
	`NVR_RódWORD
(
pbyBuf
, &
pCmdHódî
->
wRes
);

72 
	`NVR_RódDWORD
(
pbyBuf
, &
pCmdHódî
->
d©aLí
);

74 
	}
}

76 
AµMaöCfg
 
	gAµMaöCfgTabÀ
[] =

78 {
CMD_VDEC_DISPLAY_MODE
, 
ShmMsg_SëDi•Mode
}

79 ,{
CMD_VDEC_CTRL_PLAY
, 
ShmMsg_VdecCålPœy
}

80 ,{
CMD_VDEC_CTRL_STOP
, 
ShmMsg_VdecCålSt›
}

83 
	$AµFuncSórch
(*
pRecv
, 
Lí
)

85 
i
;

86 
Cmd
 
CmdHódî
;

87 *
pbyBuf
;

88 
pbyBuf
 = 
pRecv
;

89 
	`RódSåómHódî
(&
pbyBuf
, &
CmdHódî
);

90 
	`Prötf
("cmdCode:0x%04X\n", 
CmdHódî
.
cmdCode
);

91 
i
 = 0; i < (
AµMaöCfgTabÀ
)/(AppMainCfgTable[0]); i++)

93 if(
AµMaöCfgTabÀ
[
i
].
cmdCode
 =
CmdHódî
.cmdCode)

95 
AµMaöCfgTabÀ
[
i
].
	`AµFun˘i⁄
(
pbyBuf
, 
Lí
 - 
STREAM_HEADER_LEN
);

100 
	}
}

	@app/appFuncTable.h

1 #i‚de‡
__APP_FUNC_TABLE_H__


2 
	#__APP_FUNC_TABLE_H___


	)

4 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~"dec.h
"

9 
	~"NVR_Såóm.h
"

10 
	~"NvrCmdCode.h
"

11 (*
AµFunc
)(*
	tpRecvD©a
, 
	tLí
);

12 
	sAµMaöCfg
{

13 
cmdCode
;

14 
AµFunc
 
AµFun˘i⁄
;

15 }
	tAµMaöCfg
;

17 
AµFuncSórch
(*
pRecv
, 
Lí
);

18 #ifde‡
__˝lu•lus


	@dec/HiDecList.c

1 
	~"HiDecLi°.h
"

3 
decode_thªad_ch™√l_öfo_t
 
	gdecodeCh™√lLi°
;

8 
	$DecLök_Inô
()

10 
	`INIT_LIST_HEAD
(&
decodeCh™√lLi°
.
li°
);

11  
SUCCESS
;

12 
	}
}

19 
	$DecLök_AddChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

21 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

22 
decode_thªad_ch™√l_öfo_t
 *
pDecodeCh™√l
 = 
NULL
;

23 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

25 if((
tmp
->
ChnNo
 =
DecChnInfo
->ChnNoË&& (tmp->
WöPos
 == DecChnInfo->WinPos))

27 
	`Prötf
("Add Chn Fail!Chnálready Exist\n");

31 
pDecodeCh™√l
 = (
decode_thªad_ch™√l_öfo_t
 *)
	`mÆloc
((decode_thread_channel_info_t));

32 
	`mem£t
(
pDecodeCh™√l
, 0, (
decode_thªad_ch™√l_öfo_t
));

33 
pDecodeCh™√l
->
ChnNo
 = 
DecChnInfo
->ChnNo;

34 
pDecodeCh™√l
->
WöPos
 = 
DecChnInfo
->WinPos;

35 
pDecodeCh™√l
->
nWidth
 = 
DecChnInfo
->nWidth;

36 
pDecodeCh™√l
->
nHeight
 = 
DecChnInfo
->nHeight;

37 
	`°r˝y
(
pDecodeCh™√l
->
Uæ
, 
DecChnInfo
->Url);

38 
	`li°_add
(&(
pDecodeCh™√l
->
li°
), &(
DecChnLi°
->list));

39 
	`HiDec_Rñe£DecResour˚
(
pDecodeCh™√l
->
WöPos
);

40 
	`HiDec_Cª©eSídThªad
(
pDecodeCh™√l
);

42 
	}
}

46 
	$DecLök_DñChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

48 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

49 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

51 if(
tmp
->
WöPos
 =
DecChnInfo
->WinPos)

53 
	`Prötf
("DñÖid:%lu WöPos:%d ok\n",
tmp
->
±hID
,tmp->
WöPos
);

54 
tmp
->
°VdecSíd
.
eCålSöÆ
=
VDEC_CTRL_STOP
;

55 
	`±hªad_joö
(
tmp
->
±hID
, 
HI_NULL
);

56 
	`li°_dñ
(&(
tmp
->
li°
));

57  
HI_SUCCESS
;

60  
HI_SUCCESS
;

61 
	}
}

65 
	$DecLök_DñAŒChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

67 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

68 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

70 
	`Prötf
("Dñ AŒ Ch¿pid:%lu WöPos:%d ok\n",
tmp
->
±hID
,tmp->
WöPos
);

71 
	`li°_dñ
(&(
tmp
->
li°
));

72 
tmp
->
°VdecSíd
.
eCålSöÆ
=
VDEC_CTRL_STOP
;

73 
	`±hªad_joö
(
tmp
->
±hID
, 
HI_NULL
);

75  
HI_SUCCESS
;

76 
	}
}

80 
	$DecLök_Pau£AŒChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

82 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

83 
	`Prötf
("DecLink_PauseAllChn\n");

84 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

86 
	`Prötf
("============Òmp->WöPos:%d\n",
tmp
->
WöPos
);

88 if(
tmp
->
±hID
 != 0)

90 
tmp
->
°VdecSíd
.
eCålSöÆ
=
VDEC_CTRL_STOP
;

91 
	`±hªad_joö
(
tmp
->
±hID
, 
HI_NULL
);

94  
HI_SUCCESS
;

95 
	}
}

99 
	$DecLök_Pau£SögÀChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

101 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

102 
	`Prötf
("DecLökPau£SögÀVõw:%d\n",
DecChnInfo
->
WöPos
);

103 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

105 if(
tmp
->
WöPos
 =
DecChnInfo
->WinPos)

107 
tmp
->
°VdecSíd
.
eCålSöÆ
=
VDEC_CTRL_STOP
;

108 
	`±hªad_joö
(
tmp
->
±hID
, 
HI_NULL
);

111  
HI_SUCCESS
;

112 
	}
}

116 
	$DecLök_RunAŒChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

118 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

119 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

121 
	`Prötf
("võw:%d\n",
tmp
->
WöPos
);

122 
	`HiDec_Cª©eSídThªad
(
tmp
);

124  
HI_SUCCESS
;

125 
	}
}

129 
	$DecLök_RunSögÀChn
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

131 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

132 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

134 if(
tmp
->
WöPos
 =
DecChnInfo
->WinPos)

136 
	`Prötf
("Ru¿võw:%d ok\n", 
tmp
->
WöPos
);

137 
	`HiDec_Cª©eSídThªad
(
tmp
);

141  
HI_SUCCESS
;

142 
	}
}

147 
	$DecLök_GëResﬁuti⁄
(
decode_thªad_ch™√l_öfo_t
 *
DecChnLi°
, 
Decode_ChnInfo
 *
DecChnInfo
)

149 
decode_thªad_ch™√l_öfo_t
 *
tmp
 = 
NULL
;

150 
	`li°_f‹_óch_íåy
(
tmp
, &
DecChnLi°
->
li°
,Üist)

152 if(
tmp
->
WöPos
 =
DecChnInfo
->WinPos)

154 
DecChnInfo
->
nWidth
 = 
tmp
->nWidth;

155 
DecChnInfo
->
nHeight
 = 
tmp
->nHeight;

159  
HI_SUCCESS
;

160 
	}
}

164 
HI_S32
 
	$Hi_DecLökM™age
(
DecLökO≥øTy≥
, 
Decode_ChnInfo
 *
DecChnInfo
)

166 
DecLökO≥øTy≥
)

168 
DEC_LIST_OPERA_TYPE_ADD
:

170 
	`Prötf
("Add WöPos:%d\n",
DecChnInfo
->
WöPos
);

171 
	`DecLök_AddChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

174 
DEC_LIST_OPERA_TYPE_DEL
:

176 
	`Prötf
("Dñ WöPos:%d\n",
DecChnInfo
->
WöPos
);

177 
	`DecLök_DñChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

180 
DEC_LIST_OPERA_TYPE_DEL_ALL
:

182 
	`Prötf
("Dñ AŒ WöPos:%d\n",
DecChnInfo
->
WöPos
);

183 
	`DecLök_DñAŒChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

186 
DEC_LIST_OPERA_TYPE_PAUSE_ALL
:

188 
	`Prötf
("Pause All WinPos\n");

189 
	`DecLök_Pau£AŒChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

192 
DEC_LIST_OPERA_TYPE_RUN_ALL
:

194 
	`Prötf
("Run All WinPos\n");

195 
	`DecLök_RunAŒChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

198 
DEC_LIST_OPERA_TYPE_RUN
:

200 
	`Prötf
("Run Single WinPos\n");

201 
	`DecLök_RunSögÀChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

204 
DEC_LIST_OPERA_TYPE_PAUSE
:

206 
	`Prötf
("Pause Single WinPos\n");

207 
	`DecLök_Pau£SögÀChn
(&
decodeCh™√lLi°
,
DecChnInfo
);

209 
DEC_LIST_OPERA_TYPE_GET_RESOLUTION
:

212 
	`DecLök_GëResﬁuti⁄
(&
decodeCh™√lLi°
,
DecChnInfo
);

218  
HI_SUCCESS
;

219 
	}
}

	@dec/HiDecList.h

1 #i‚de‡
__HI_DEC_LIST_H__


2 
	#__HI_DEC_LIST_H__


	)

4 #ifde‡
__˝lu•lus


8 
	~<°dio.h
>

9 
	~"comm⁄.h
"

10 
	~"HiMµDec.h
"

13 
	edec_li°_›îa_ty≥


15 
DEC_LIST_OPERA_TYPE_ADD
 = 0,

16 
DEC_LIST_OPERA_TYPE_DEL
,

17 
DEC_LIST_OPERA_TYPE_DEL_ALL
,

18 
DEC_LIST_OPERA_TYPE_PAUSE
,

19 
DEC_LIST_OPERA_TYPE_PAUSE_ALL
,

20 
DEC_LIST_OPERA_TYPE_RUN
,

21 
DEC_LIST_OPERA_TYPE_RUN_ALL
,

22 
DEC_LIST_OPERA_TYPE_GET_RESOLUTION


23 }
	tdec_li°_›îa_ty≥
;

25 
HI_S32
 
Hi_DecLökM™age
(
DecLökO≥øTy≥
, 
Decode_ChnInfo
 *
DecChnInfo
);

26 
DecLök_Inô
();

28 #ifde‡
__˝lu•lus


	@dec/HiDecUsrPic.c

1 
	~"HiDecU§Pic.h
"

3 
	gg_TŸÆChn
;

4 
	$GëCurTŸÆChn
(
TŸÆChn
)

6 
g_TŸÆChn
 = 
TŸÆChn
;

7 
	}
}

11 
HI_VOID
 
	$hi_vpss_RódFøme
(
FILE
 * 
Â
, 
HI_U8
 * 
pY
, HI_U8 * 
pU
, HI_U8 * 
pV
, 
HI_U32
 
width
, HI_U32 
height
, HI_U32 
°ride
, HI_U32 
°ride2
)

13 
HI_U8
 * 
pD°
;

14 
HI_U32
 
u32Row
;

15 
pD°
 = 
pY
;

16  
u32Row
 = 0; u32Row < 
height
; u32Row++ )

18 
	`‰ód
–
pD°
, 
width
, 1, 
Â
 );

19 
pD°
 +
°ride
;

21 
pD°
 = 
pU
;

22  
u32Row
 = 0; u32Row < 
height
/2; u32Row++ )

24 
	`‰ód
–
pD°
, 
width
/2, 1, 
Â
 );

25 
pD°
 +
°ride2
;

28 
pD°
 = 
pV
;

29  
u32Row
 = 0; u32Row < 
height
/2; u32Row++ )

31 
	`‰ód
–
pD°
, 
width
/2, 1, 
Â
 );

32 
pD°
 +
°ride2
;

34 
	}
}

38 
HI_S32
 
	$hi_vpss_PœnToSemi
(
HI_U8
 *
pY
, 
HI_S32
 
ySåide
,

39 
HI_U8
 *
pU
, 
HI_S32
 
uSåide
,

40 
HI_U8
 *
pV
, 
HI_S32
 
vSåide
,

41 
HI_S32
 
picWidth
, HI_S32 
picHeight
)

43 
HI_S32
 
i
;

44 
HI_U8
* 
pTmpU
, *
±u
;

45 
HI_U8
* 
pTmpV
, *
±v
;

46 
HI_S32
 
s32HafW
 = 
uSåide
 >>1 ;

47 
HI_S32
 
s32HafH
 = 
picHeight
 >>1 ;

48 
HI_S32
 
s32Size
 = 
s32HafW
*
s32HafH
;

50 
pTmpU
 = 
	`mÆloc
–
s32Size
 ); 
±u
 =ÖTmpU;

51 
pTmpV
 = 
	`mÆloc
–
s32Size
 ); 
±v
 =ÖTmpV;

53 
	`mem˝y
(
pTmpU
,
pU
,
s32Size
);

54 
	`mem˝y
(
pTmpV
,
pV
,
s32Size
);

56 
i
 = 0;i<
s32Size
>>1;i++)

58 *
pU
++ = *
pTmpV
++;

59 *
pU
++ = *
pTmpU
++;

62 
i
 = 0;i<
s32Size
>>1;i++)

64 *
pV
++ = *
pTmpV
++;

65 *
pV
++ = *
pTmpU
++;

68 
	`‰ì
–
±u
 );

69 
	`‰ì
–
±v
 );

71  
HI_SUCCESS
;

72 
	}
}

76 
HI_S32
 
	$hi_vpss_GëFømeFromYUV
(
FILE
 *
pYUVFûe
, 
SIZE_S
 *
°Size
, 
VIDEO_FRAME_INFO_S
 *
p°VFømeInfo
)

78 
HI_U32
 
u32LSåide
;

79 
HI_U32
 
u32CSåide
;

80 
HI_U32
 
u32LumaSize
;

81 
HI_U32
 
u32ChrmSize
;

82 
HI_U32
 
u32Size
;

83 
VB_BLK
 
VbBlk
;

84 
HI_U32
 
u32PhyAddr
;

85 
HI_U8
 *
pVúAddr
;

86 
HI_U32
 
u32BlkC¡
 = 1;

88 
u32LSåide
 = 
°Size
->
u32Width
;

89 
u32CSåide
 = 
°Size
->
u32Width
;

91 
u32LumaSize
 = (
u32LSåide
 * 
°Size
->
u32Height
);

92 
u32ChrmSize
 = (
u32CSåide
 * 
°Size
->
u32Height
) >> 2;

93 
u32Size
 = 
u32LumaSize
 + (
u32ChrmSize
 << 1);

96 
VB_POOL
 
VbPoﬁ
;

97 
VbPoﬁ
 = 
	`HI_MPI_VB_Cª©ePoﬁ
(
u32Size
, 
u32BlkC¡
, 
NULL
);

98 i‡–
VB_INVALID_POOLID
 =
VbPoﬁ
 )

100 
	`Prötf
("create vbÉrr\n");

101  
HI_FAILURE
;

105 
VbBlk
 = 
	`HI_MPI_VB_GëBlock
(
VbPoﬁ
, 
u32Size
, 
NULL
);

106 i‡(
VB_INVALID_HANDLE
 =
VbBlk
)

108 
	`Prötf
("HI_MPI_VB_GëBlockÉº! size:%d\n",
u32Size
);

109  
HI_FAILURE
;

112 
u32PhyAddr
 = 
	`HI_MPI_VB_H™dÀ2PhysAddr
(
VbBlk
);

113 i‡(0 =
u32PhyAddr
)

115 
	`Prötf
("HI_MPI_VB_Handle2PhysAddrÉrr!ÖhyAddr isÇull\n");

116  
HI_FAILURE
;

119 
pVúAddr
 = (
HI_U8
 *Ë
	`HI_MPI_SYS_Mm≠
(
u32PhyAddr
, 
u32Size
);

120 i‡(
NULL
 =
pVúAddr
)

122 
	`Prötf
("HI_MPI_SYS_MmapÉrr! virAddr isÇull\n");

123  
HI_FAILURE
;

126 
p°VFømeInfo
->
u32PoﬁId
 = 
	`HI_MPI_VB_H™dÀ2PoﬁId
(
VbBlk
);

127 i‡(
VB_INVALID_POOLID
 =
p°VFømeInfo
->
u32PoﬁId
)

129 
	`Prötf
("HI_MPI_VB_Handle2PoolIdÉrr!\n");

130  
HI_FAILURE
;

132 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[0] = u32PhyAddr;

133 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[1] =Ö°VFømeInfo->°VFøme.u32PhyAddr[0] + 
u32LumaSize
;

134 
p°VFømeInfo
->
°VFøme
.
u32PhyAddr
[2] =Ö°VFømeInfo->°VFøme.u32PhyAddr[1] + 
u32ChrmSize
;

136 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0] =ÖVirAddr;

137 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1] =Ö°VFømeInfo->°VFøme.pVúAddr[0] + 
u32LumaSize
;

138 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[2] =Ö°VFømeInfo->°VFøme.pVúAddr[1] + 
u32ChrmSize
;

140 
p°VFømeInfo
->
°VFøme
.
u32Width
 = 
°Size
->u32Width;

141 
p°VFømeInfo
->
°VFøme
.
u32Height
 = 
°Size
->u32Height;

142 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0] = 
u32LSåide
;

143 
p°VFømeInfo
->
°VFøme
.
u32Såide
[1] = 
u32CSåide
;

144 
p°VFømeInfo
->
°VFøme
.
u32Såide
[2] = 
u32CSåide
;

145 
p°VFømeInfo
->
°VFøme
.
íPixñF‹m©
 = 
PIXEL_FORMAT_YUV_SEMIPLANAR_420
;

146 
p°VFømeInfo
->
°VFøme
.
u32Fõld
 = 
VIDEO_FIELD_FRAME
;

147 
p°VFømeInfo
->
°VFøme
.
íVideoF‹m©
 = 
VIDEO_FORMAT_LINEAR
;

148 
p°VFømeInfo
->
°VFøme
.
íCom¥essMode
 = 
COMPRESS_MODE_NONE
;

149 
p°VFømeInfo
->
°VFøme
.
u64±s
 = 0;

152 
	`hi_vpss_RódFøme
(
pYUVFûe
, 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0],

153 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1],ÖstVFrameInfo->stVFrame.pVirAddr[2],

154 
p°VFømeInfo
->
°VFøme
.
u32Width
,Ö°VFømeInfo->°VFøme.
u32Height
,

155 
p°VFømeInfo
->
°VFøme
.
u32Såide
[0],ÖstVFrameInfo->stVFrame.u32Stride[1] >> 1 );

158 
	`hi_vpss_PœnToSemi
(
p°VFømeInfo
->
°VFøme
.
pVúAddr
[0],Ö°VFømeInfo->°VFøme.
u32Såide
[0],

159 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[1],Ö°VFømeInfo->°VFøme.
u32Såide
[1],

160 
p°VFømeInfo
->
°VFøme
.
pVúAddr
[2],Ö°VFømeInfo->°VFøme.
u32Såide
[1],

161 
p°VFømeInfo
->
°VFøme
.
u32Width
,Ö°VFømeInfo->°VFøme.
u32Height
);

163 
	`HI_MPI_SYS_Munm≠
(
pVúAddr
, 
u32Size
);

164  
HI_SUCCESS
;

166 
	}
}

170 
HI_S32
 
	$HiDec_GëU§Pic
(
HI_CHAR
 *
pszYuvFûe
, 
VIDEO_FRAME_INFO_S
 *
°Føme
)

172 
FILE
 *
pfd
;

173 
HI_S32
 
s32Rë
;

174 
SIZE_S
 
°Size
;

178 
°Size
.
u32Width
 = 960;

179 
°Size
.
u32Height
 = 576;

182 
pfd
 = 
	`f›í
(
pszYuvFûe
, "rb");

183 i‡(!
pfd
)

185 
	`Prötf
("›í fûê-> %†Áû \n", 
pszYuvFûe
);

186  
HI_FAILURE
;

190 
s32Rë
 = 
	`hi_vpss_GëFømeFromYUV
(
pfd
, &
°Size
, 
°Føme
);

191 if(
s32Rë
 !
HI_SUCCESS
)

193 
	`Prötf
("hi_vpss_GetFrameFromYUVÉrror\n");

194  
HI_FAILURE
;

196 
	`f˛o£
(
pfd
);

197  
HI_SUCCESS
;

198 
	}
}

203 
	$HiDec_SídU§Pic
(
VIDEO_FRAME_INFO_S
 *
°Føme
,
VDEC_CHN_STAT_S
 
°SètSèπ
[
MAX_DISPLAY_NUM
], VDEC_CHN_STAT_S 
°SètEnd
[MAX_DISPLAY_NUM])

205 
i
, 
ªt
;

206 
i
 = 0; i < 
g_TŸÆChn
; i++)

208 
ªt
 = 
	`HI_MPI_VDEC_Quîy
(
i
, &
°SètEnd
[i]);

209 if(
ªt
 =
HI_SUCCESS
)

211 if(
°SètEnd
[
i
].
u32DecodeSåómFømes
 - 
°SètSèπ
[i].u32DecodeStreamFrames != 0)

213 
°SètSèπ
[
i
].
u32DecodeSåómFømes
 = 
°SètEnd
[i].u32DecodeStreamFrames;

217 
ªt
 = 
	`HI_MPI_VPSS_SídFøme
(
i
, 
°Føme
, 0);

218 if(
ªt
 !
HI_SUCCESS
)

220 
	`Prötf
("HI_MPI_VPSS_SídFømêCh¿%dÉº‹ 0x%x\n", 
i
, 
ªt
);

229 
	}
}

232 *
	$Hi_DecU§PicThªad
(*
¨g
)

234 
VIDEO_FRAME_INFO_S
 
°Føme
;

235 
timevÆ
 
tv_°¨t
;

236 
timevÆ
 
tv_íd
;

237 
VDEC_CHN_STAT_S
 
°SètSèπ
[
MAX_DISPLAY_NUM
];

238 
VDEC_CHN_STAT_S
 
°SètEnd
[
MAX_DISPLAY_NUM
];

239 
	`mem£t
(
°SètSèπ
, 0, 
MAX_DISPLAY_NUM
 * (
VDEC_CHN_STAT_S
));

240 
	`mem£t
(
°SètEnd
, 0, 
MAX_DISPLAY_NUM
 * (
VDEC_CHN_STAT_S
));

241 
	`HiDec_GëU§Pic
(
U£rPicName
, &
°Føme
);

242 
	`u¶ìp
(150 * 1000);

243 
	`HiDec_SídU§Pic
(&
°Føme
, 
°SètSèπ
,
°SètEnd
);

244 
	`gëtimeofday
(&
tv_°¨t
, 
NULL
);

247 
	`gëtimeofday
(&
tv_íd
, 
NULL
);

248 if(
tv_íd
.
tv_£c
 - 
tv_°¨t
.tv_sec >= 3)

251 
	`HiDec_SídU§Pic
(&
°Føme
, 
°SètSèπ
, 
°SètEnd
);

253 
tv_°¨t
.
tv_£c
 = 
tv_íd
.tv_sec;

255 
	`u¶ìp
(1000*1000);

257 
	}
}

	@dec/HiDecUsrPic.h

1 #i‚de‡
__HI_DEC_USRPIC_H__


2 
	#__HI_DEC_USRPIC_H__


	)

4 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<mem‹y.h
>

11 
	~<±hªad.h
>

12 
	~"comm⁄.h
"

13 
	~"ßm∂e_comm.h
"

14 
	~"globÆ.h
"

15 
	~"hi_ty≥.h
"

17 
	#U£rPicName
 "U£rPic_960x576.yuv"

	)

20 *
Hi_DecU§PicThªad
(*
¨g
);

21 
GëCurTŸÆChn
(
TŸÆChn
);

23 #ifde‡
__˝lu•lus


	@dec/HiMppDec.c

1 
	~"HiMµDec.h
"

7 
HI_S32
 
	$HiDec_GëPicSize
(
PIC_SIZE_E
 
Resﬁuti⁄
, 
SIZE_S
 *
°Size
)

9 
VIDEO_NORM_E
 
EncodeMode
 = 
VIDEO_ENCODING_MODE_PAL
;

10 
HI_S32
 
s32Rë
;

13 
s32Rë
 = 
	`SAMPLE_COMM_SYS_GëPicSize
(
EncodeMode
, 
Resﬁuti⁄
, 
°Size
);

14 i‡(
HI_SUCCESS
 !=
s32Rë
)

16 
	`Prötf
("getÖicture size failed!\n");

17  
HI_FAILURE
;

19 i‡(
°Size
->
u32Width
 == 704)

21 
°Size
->
u32Width
 = 720;

23 i‡(
°Size
->
u32Width
 == 352)

25 
°Size
->
u32Width
 = 360;

27 i‡(
°Size
->
u32Width
 == 176)

29 
°Size
->
u32Width
 = 180;

31  
HI_SUCCESS
;

32 
	}
}

37 
HI_S32
 
	$HiDec_InôSysAndVB
(
SIZE_S
 
°Size
)

39 
HI_S32
 
s32Rë
;

40 
VB_CONF_S
 
°VbC⁄f
;

41 
	`SAMPLE_COMM_VDEC_Sysc⁄f
(&
°VbC⁄f
, &
°Size
);

42 
s32Rë
 = 
	`SAMPLE_COMM_SYS_Inô
(&
°VbC⁄f
);

43 if(
s32Rë
 !
HI_SUCCESS
)

45 
	`SAMPLE_PRT
("öô sy†Áû f‹ %#x!\n", 
s32Rë
);

46 
	`SAMPLE_COMM_SYS_Exô
();

47  
HI_FAILURE
;

49 
	`SAMPLE_COMM_SYS_MemC⁄fig
();

50  
HI_SUCCESS
;

51 
	}
}

56 
HI_S32
 
	$HiDec_InôCommVB
(
SIZE_S
 
°Size
)

58 
HI_S32
 
s32Rë
;

59 
VB_CONF_S
 
°ModVbC⁄f
;

60 
	`SAMPLE_COMM_VDEC_ModCommPoﬁC⁄f
(&
°ModVbC⁄f
, 
PT_H264
, &
°Size
);

61 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_InôModCommVb
(&
°ModVbC⁄f
);

62 if(
s32Rë
 !
HI_SUCCESS
)

64 
	`SAMPLE_PRT
("öô mod comm⁄ vb faû f‹ %#x!\n", 
s32Rë
);

65 
	`SAMPLE_COMM_SYS_Exô
();

66  
HI_FAILURE
;

68  
HI_SUCCESS
;

69 
	}
}

74 
HI_S32
 
	$HiDec_VdecSèπ
(
HI_S32
 
s32ChnNum
, 
SIZE_S
 
°Size
)

76 
HI_S32
 
s32Rë
;

77 
VDEC_CHN_ATTR_S
 
°VdecChnAâr
[
VDEC_MAX_CHN_NUM
];

78 
	`SAMPLE_COMM_VDEC_ChnAâr
(
s32ChnNum
, 
°VdecChnAâr
, 
PT_H264
,&
°Size
);

79 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_Sèπ
(
s32ChnNum
, 
°VdecChnAâr
);

80 if(
s32Rë
 !
HI_SUCCESS
)

82 
	`SAMPLE_PRT
("°¨àVDEC faû f‹ %#x!\n", 
s32Rë
);

83 
	`SAMPLE_COMM_VDEC_St›
(
s32ChnNum
);

84  
HI_FAILURE
;

86  
HI_SUCCESS
;

87 
	}
}

92 
HI_S32
 
	$HiDec_VpssSèπ
(
HI_S32
 
s32ChnNum
,
SIZE_S
 
°Size
)

94 
HI_S32
 
s32Rë
;

95 
SIZE_S
 
°RŸ©eSize
;

96 
VPSS_GRP_ATTR_S
 
°VpssGΩAâr
[
VDEC_MAX_CHN_NUM
];

97 
°RŸ©eSize
.
u32Width
 = stRŸ©eSize.
u32Height
 = 
	`MAX2
(
°Size
.u32Width, stSize.u32Height);

98 
	`SAMPLE_COMM_VDEC_VpssGΩAâr
(
s32ChnNum
, &
°VpssGΩAâr
[0], &
°RŸ©eSize
);

99 
s32Rë
 = 
	`SAMPLE_COMM_VPSS_Sèπ
(
s32ChnNum
, &
°RŸ©eSize
, 1, &
°VpssGΩAâr
[0]);

100 if(
s32Rë
 !
HI_SUCCESS
)

102 
	`SAMPLE_PRT
("°¨àVPSS faû f‹ %#x!\n", 
s32Rë
);

103 
	`SAMPLE_COMM_VPSS_St›
(
s32ChnNum
, 
VPSS_BSTR_CHN
);

104  
HI_FAILURE
;

106  
HI_SUCCESS
;

107 
	}
}

112 
HI_S32
 
	$HiDec_VoInô
(
HI_VOID
)

114 
HI_S32
 
s32Rë
;

115 
VO_DEV
 
VoDev
 = 0;

116 
VO_PUB_ATTR_S
 
°VoPubAâr
;

117 
HI_S32
 
s32ChnNum
 = 0;

118 
VO_LAYER
 
VoLayî
 = 0;

119 
VO_VIDEO_LAYER_ATTR_S
 
°VoLayîAâr
;

120 
	`SAMPLE_COMM_VDEC_VoAâr
(
s32ChnNum
, 
VoDev
 ,&
°VoPubAâr
, &
°VoLayîAâr
);

121 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπDev
(
VoDev
, &
°VoPubAâr
);

122 if(
s32Rë
 !
HI_SUCCESS
)

124 
	`SAMPLE_PRT
("vde¯böd vps†Áû f‹ %#x!\n", 
s32Rë
);

125 
	`SAMPLE_COMM_VO_St›Dev
(
VoDev
);

126  
HI_FAILURE
;

129 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπLayî
(
VoLayî
, &
°VoLayîAâr
);

130 if(
s32Rë
 !
HI_SUCCESS
)

132 
	`SAMPLE_PRT
("vde¯böd vps†Áû f‹ %#x!\n", 
s32Rë
);

133 
	`SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

134  
HI_FAILURE
;

137  
HI_SUCCESS
;

138 
	}
}

143 
HI_S32
 
	$HiDec_VoSèπAŒChn
(
HI_S32
 
íMode
)

145 
HI_S32
 
s32Rë
;

146 
VO_LAYER
 
VoLayî
 = 0;

147 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπChn
(
VoLayî
, 
íMode
);

148 if(
s32Rë
 !
HI_SUCCESS
)

150 
	`SAMPLE_PRT
("vdec bind vpss fail!!!\n");

151 
	`SAMPLE_COMM_VO_St›Chn
(
VoLayî
, 
íMode
);

152  
HI_FAILURE
;

154  
HI_SUCCESS
;

155 
	}
}

160 
HI_S32
 
	$HiDec_VoSèπFuŒSªí
(
HI_S32
 
íMode
, HI_S32 
s32ChnNum
)

162 
HI_S32
 
s32Rë
;

163 
VO_LAYER
 
VoLayî
 = 0;

164 
s32Rë
 = 
	`SAMPLE_COMM_VO_SèπFuŒSªí
(
VoLayî
, 
íMode
,
s32ChnNum
);

165 if(
s32Rë
 !
HI_SUCCESS
)

167 
	`SAMPLE_PRT
("vde¯böd vps†Áû f‹ %#x!\n", 
s32Rë
);

168 
	`SAMPLE_COMM_VO_St›Chn
(
VoLayî
, 
íMode
);

169  
HI_FAILURE
;

171  
HI_SUCCESS
;

173 
	}
}

177 
HI_S32
 
	$HiDec_VdecBödVpss
(
HI_S32
 
s32ChnNum
)

179 
HI_S32
 
s32Rë
;

180 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_BödVpss
(
s32ChnNum
, s32ChnNum);

181 if(
s32Rë
 !
HI_SUCCESS
)

183 
	`SAMPLE_PRT
("vde¯böd vps†Áû f‹ %#x!\n", 
s32Rë
);

184 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_UnBödVpss
(
s32ChnNum
, s32ChnNum);

185 if(
s32Rë
 !
HI_SUCCESS
)

187 
	`SAMPLE_PRT
("vde¯unböd vps†Áû f‹ %#x!\n", 
s32Rë
);

189  
HI_FAILURE
;

191  
HI_SUCCESS
;

192 
	}
}

197 
HI_S32
 
	$HiDec_VpssBödVo
(
HI_S32
 
s32ChnNum
,
VO_LAYER
 
VoLayî
)

199 
HI_S32
 
s32Rë
;

200 
s32Rë
 = 
	`SAMPLE_COMM_VO_BödVpss
(
VoLayî
, 
s32ChnNum
, s32ChnNum, 
VPSS_BSTR_CHN
);

201 if(
s32Rë
 !
HI_SUCCESS
)

203 
	`SAMPLE_PRT
("vps†böd vÿÁû f‹ %#x!\n", 
s32Rë
);

204 
s32Rë
 = 
	`SAMPLE_COMM_VO_UnBödVpss
(
VoLayî
, 
s32ChnNum
, s32ChnNum, 
VPSS_BSTR_CHN
);

205 if(
s32Rë
 !
HI_SUCCESS
)

207 
	`SAMPLE_PRT
("vps†unböd vÿÁû f‹ %#x!\n", 
s32Rë
);

209  
HI_FAILURE
;

212  
HI_SUCCESS
;

213 
	}
}

218 
HI_S32
 
	$HiDec_QuîyChnInfo
(
Chn
, 
VDEC_CHN_STAT_S
 *
°ChnSèt
)

220  (
	`HI_MPI_VDEC_Quîy
(
Chn
, 
°ChnSèt
));

221 
	}
}

225 
HI_S32
 
	$HiDec_EnChn
(
WöPos
)

227 
HI_S32
 
s32Rë
;

228 
VO_LAYER
 
VoLayî
 = 0;

229 
s32Rë
 = 
	`HI_MPI_VO_E«bÀChn
(
VoLayî
, 
WöPos
);

230 i‡(
s32Rë
 !
HI_SUCCESS
)

232 
	`SAMPLE_PRT
("Áûed wôh %#x!\n", 
s32Rë
);

233  
HI_FAILURE
;

235  
HI_SUCCESS
;

236 
	}
}

241 
HI_S32
 
	$HiDec_SèπDecode
(
HI_S32
 
s32ChnNum
, 
SIZE_S
 
°Size
)

243 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

244 
VO_LAYER
 
VoLayî
 = 0;

248 
s32Rë
 = 
	`HiDec_VdecSèπ
(
s32ChnNum
, 
°Size
);

249 if(
s32Rë
 !
HI_SUCCESS
)

251 
	`Prötf
("HiDec_VdecStart Failed!\n");

252  
HI_FAILURE
;

258 
s32Rë
 = 
	`HiDec_VpssSèπ
(
s32ChnNum
, 
°Size
);

259 if(
s32Rë
 !
HI_SUCCESS
)

261 
	`Prötf
("HiDec_VpssStart Failed!\n");

262  
HI_FAILURE
;

268 
s32Rë
 = 
	`HiDec_VdecBödVpss
(
s32ChnNum
);

269 if(
s32Rë
 !
HI_SUCCESS
)

271 
	`Prötf
("HiDec_VdecBindVpss Failed!\n");

272  
HI_FAILURE
;

278 
s32Rë
 = 
	`HiDec_VpssBödVo
(
s32ChnNum
, 
VoLayî
);

279 if(
s32Rë
 !
HI_SUCCESS
)

281 
	`Prötf
("HiDec_VpssBindVo Failed!\n");

282  
HI_FAILURE
;

284  
s32Rë
;

285 
	}
}

290 
HI_S32
 
	$HiDec_SëSídP¨a
(
VdecThªadP¨am
 *
°VdecSíd
, 
HI_S32
 
ChnNo
, 
WöPos
, 
SIZE_S
 
°Size
)

292 
°VdecSíd
->
s32MûliSec
 = 0;

293 
°VdecSíd
->
s32ChnId
 = 
WöPos
;

294 
°VdecSíd
->
s32I¡îvÆTime
 = 1;

295 
°VdecSíd
->
u64PtsInô
 = 0;

296 
°VdecSíd
->
u64PtsIn¸ó£
 = 0;

297 
°VdecSíd
->
eCålSöÆ
 = 
VDEC_CTRL_START
;

298 
°VdecSíd
->
bLo›Síd
 = 
HI_TRUE
;

299 
°VdecSíd
->
íTy≥
 = 
PT_H264
;

300 
°VdecSíd
->
s32MöBufSize
 = 
°Size
.
u32Width
 * stSize.
u32Height
;

301 i‡(
PT_H264
 =
°VdecSíd
->
íTy≥
 || 
PT_MP4VIDEO
 == stVdecSend->enType)

304 
°VdecSíd
->
s32SåómMode
 = 
VIDEO_MODE_STREAM
;

308 
°VdecSíd
->
s32SåómMode
 = 
VIDEO_MODE_FRAME
;

310  
HI_SUCCESS
;

311 
	}
}

317 *
	$HiDec_SídH264Såóm
(*
pArgs
)

319 
VdecThªadP¨am
 *
p°VdecThªadP¨am
 =(VdecThªadP¨am *)
pArgs
;

320 
FILE
 *
ÂSåm
=
NULL
;

321 *
pu8Buf
 = 
NULL
;

322 
VDEC_STREAM_S
 
°Såóm
;

323 
HI_S32
 
s32Rë
, 
°¨t
 = 0;

324 
HI_S32
 
s32U£dByãs
 = 0, 
s32RódLí
 = 0;

325 
HI_U64
 
u64±s
 = 0;

327 
ÂSåm
 = 
	`myf›í
(
p°VdecThªadP¨am
->
s32ChnId
);

328 if(
ÂSåm
 =
NULL
)

330 
	`¥ötf
("SAMPLE_TEST:ˇn'à›í fûê%†ö síd såómÅhªad:%d\n",
p°VdecThªadP¨am
->
cFûeName
,Ö°VdecThªadP¨am->
s32ChnId
);

331  (
HI_VOID
 *)(
HI_FAILURE
);

334 
pu8Buf
 = 
	`mÆloc
(
p°VdecThªadP¨am
->
s32MöBufSize
);

335 if(
pu8Buf
 =
NULL
)

337 
	`¥ötf
("SAMPLE_TEST:ˇn'àÆlo¯%d i¿£nd såómÅhªad:%d\n", 
p°VdecThªadP¨am
->
s32MöBufSize
,Ö°VdecThªadP¨am->
s32ChnId
);

338 
	`myf˛o£
(
ÂSåm
);

339  (
HI_VOID
 *)(
HI_FAILURE
);

341 
	`fÊush
(
°dout
);

343 
u64±s
 = 
p°VdecThªadP¨am
->
u64PtsInô
;

346 i‡(
p°VdecThªadP¨am
->
eCålSöÆ
 =
VDEC_CTRL_STOP
)

350 i‡(
p°VdecThªadP¨am
->
eCålSöÆ
 =
VDEC_CTRL_PAUSE
)

352 
	`¶ìp
(
	`MIN2
(
p°VdecThªadP¨am
->
s32I¡îvÆTime
,1000));

356 if((
p°VdecThªadP¨am
->
s32SåómMode
==
VIDEO_MODE_STREAM
Ë&& (p°VdecThªadP¨am->
íTy≥
 =
PT_H264
))

358 
s32RódLí
 = 
	`my‰ód
((*)
pu8Buf
, 
p°VdecThªadP¨am
->
s32MöBufSize
, 
ÂSåm
);

359 i‡(0==
s32RódLí
)

361 
	`u¶ìp
(1000*20);

366 
°Såóm
.
u64PTS
 = 
u64±s
;

367 
°Såóm
.
pu8Addr
 = 
pu8Buf
 + 
°¨t
;

368 
°Såóm
.
u32Lí
 = 
s32RódLí
;

369 
°Såóm
.
bEndOfFøme
 = (
p°VdecThªadP¨am
->
s32SåómMode
==
VIDEO_MODE_FRAME
)? 
HI_TRUE
: 
HI_FALSE
;

370 
°Såóm
.
bEndOfSåóm
 = 
HI_FALSE
;

371 
s32Rë
=
	`HI_MPI_VDEC_SídSåóm
(
p°VdecThªadP¨am
->
s32ChnId
, &
°Såóm
,Ö°VdecThªadP¨am->
s32MûliSec
);

372 i‡(
HI_SUCCESS
 !
s32Rë
)

374 
	`u¶ìp
(100);

378 
s32U£dByãs
 = s32U£dByã†+
s32RódLí
 + 
°¨t
;

379 
u64±s
 +
p°VdecThªadP¨am
->
u64PtsIn¸ó£
;

381 
	`u¶ìp
(20000);

385 
	`mem£t
(&
°Såóm
, 0, (
VDEC_STREAM_S
) );

386 
°Såóm
.
bEndOfSåóm
 = 
HI_TRUE
;

387 
	`HI_MPI_VDEC_SídSåóm
(
p°VdecThªadP¨am
->
s32ChnId
, &
°Såóm
, -1);

388 i‡(
pu8Buf
 !
HI_NULL
)

390 
	`‰ì
(
pu8Buf
);

392 
	`myf˛o£
(
ÂSåm
);

394  (
HI_VOID
 *)
HI_SUCCESS
;

398 
	}
}

402 
HI_S32
 
	$HiDec_Cª©eSídThªad
(
decode_thªad_ch™√l_öfo_t
 *
pDecLi°ChnInfo
)

404 
SIZE_S
 
°Size
;

405 
HI_S32
 
s32Rë
;

406 
WöPos
 = 
pDecLi°ChnInfo
->WinPos;

407 
ChnNo
 = 
pDecLi°ChnInfo
->ChnNo;

409 
°Size
.
u32Width
 = 
pDecLi°ChnInfo
->
nWidth
;

410 
°Size
.
u32Height
 = 
pDecLi°ChnInfo
->
nHeight
;

411 
s32Rë
 = 
	`HiDec_EnChn
(
WöPos
);

412 if(
s32Rë
 !
HI_SUCCESS
)

414 
	`Prötf
("HiDec_EnChn fail!\n");

415  
HI_FAILURE
;

417 
	`HiDec_SèπDecode
(
WöPos
, 
°Size
);

418 if(
s32Rë
 !
HI_SUCCESS
)

420 
	`Prötf
("HiDec_StartDecode fail!\n");

421  
HI_FAILURE
;

423 
	`HiDec_SëSídP¨a
(&
pDecLi°ChnInfo
->
°VdecSíd
, 
ChnNo
, 
WöPos
, 
°Size
);

424 
	`±hªad_¸óã
(&
pDecLi°ChnInfo
->
±hID
, 0, 
HiDec_SídH264Såóm
, (
HI_VOID
 *)&pDecLi°ChnInfo->
°VdecSíd
);

425  
HI_SUCCESS
;

426 
	}
}

431 
HI_S32
 
	$HiDec_St›
(
HI_S32
 
s32ChnNum
)

433 
i
;

434 
HI_S32
 
s32Rë
;

435 
VO_LAYER
 
VoLayî
 = 0;

436 
VO_DEV
 
VoDev
 = 0;

437 
i
=0; i<
s32ChnNum
; i++)

439 
s32Rë
 = 
	`HI_MPI_VDEC_De°royChn
(
i
);

440 
s32Rë
 = 
	`SAMPLE_COMM_VO_UnBödVpss
(
VoLayî
, 
i
, i, 
VPSS_BSTR_CHN
);

441 if(
s32Rë
 !
HI_SUCCESS
)

443 
	`SAMPLE_PRT
("vps†unböd vÿÁû f‹ %#x!\n", 
s32Rë
);

444  
HI_FAILURE
;

446 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_UnBödVpss
(
i
, i);

447 if(
s32Rë
 !
HI_SUCCESS
)

449 
	`SAMPLE_PRT
("vde¯unböd vps†Áû f‹ %#x!\n", 
s32Rë
);

450  
HI_FAILURE
;

452 
	`SAMPLE_COMM_VO_St›Chn
(
VoLayî
, 
i
);

453 
	`SAMPLE_COMM_VPSS_St›
(
i
, 
VPSS_BSTR_CHN
);

454 
	`SAMPLE_COMM_VDEC_St›
(
i
);

456 
	`SAMPLE_COMM_VO_St›Layî
(
VoLayî
);

457 
	`SAMPLE_COMM_VO_St›Dev
(
VoDev
);

458 
	`SAMPLE_COMM_SYS_Exô
();

459  
HI_SUCCESS
;

461 
	}
}

466 
	$HiDec_Rñe£DecResour˚
(
WöPos
)

468 
HI_S32
 
s32Rë
;

469 
VO_LAYER
 
VoLayî
 = 0;

471 
s32Rë
 = 
	`SAMPLE_COMM_VO_UnBödVpss
(
VoLayî
, 
WöPos
, WöPos, 
VPSS_BSTR_CHN
);

472 if(
s32Rë
 !
HI_SUCCESS
)

474 
	`SAMPLE_PRT
("vps†unböd vÿÁû f‹ %#x!\n", 
s32Rë
);

475  
HI_FAILURE
;

478 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_UnBödVpss
(
WöPos
, WinPos);

479 if(
s32Rë
 !
HI_SUCCESS
)

481 
	`SAMPLE_PRT
("vde¯unböd vps†Áû f‹ %#x!\n", 
s32Rë
);

482  
HI_FAILURE
;

486 
s32Rë
 = 
	`SAMPLE_COMM_VO_St›Chn
(
VoLayî
, 
WöPos
);

487 if(
s32Rë
 !
HI_SUCCESS
)

489 
	`SAMPLE_PRT
("St› Ch¿Áû f‹ %#x!\n", 
s32Rë
);

490  
HI_FAILURE
;

493 
s32Rë
 = 
	`SAMPLE_COMM_VPSS_St›
(
WöPos
, 
VPSS_BSTR_CHN
);

494 if(
s32Rë
 !
HI_SUCCESS
)

496 
	`SAMPLE_PRT
("St› Vps†Áû f‹ %#x!\n", 
s32Rë
);

497  
HI_FAILURE
;

500 
s32Rë
 = 
	`SAMPLE_COMM_VDEC_St›
(
WöPos
);

501 if(
s32Rë
 !
HI_SUCCESS
)

503 
	`SAMPLE_PRT
("St› Vde¯Áû f‹ %#x!\n", 
s32Rë
);

504  
HI_FAILURE
;

507  
HI_SUCCESS
;

510 
	}
}

515 
HI_VOID
 
	$Hi_DecH™dÀSig
(
HI_S32
 
signo
)

517 if(
SIGINT
 =
signo
 || 
SIGTERM
 == signo)

519 
	`SAMPLE_COMM_SYS_Exô
();

521 
	`exô
(0);

522 
	}
}

526 
	$Hi_DecMµInô
(
HI_VOID
)

528 
HI_S32
 
s32Rë
 = 
HI_SUCCESS
;

529 
SIZE_S
 
°Size
;

534 
s32Rë
 = 
	`HiDec_InôSysAndVB
(
°Size
);

535 if(
s32Rë
 =
HI_FAILURE
)

537 
	`Prötf
("HiDec_InitSysAndVB Failed!\n");

538  
HI_FAILURE
;

544 
s32Rë
 = 
	`HiDec_InôCommVB
(
°Size
);

545 if(
s32Rë
 =
HI_FAILURE
)

547 
	`Prötf
("HiDec_InitCommVB Failed!\n");

548  
HI_FAILURE
;

554 
s32Rë
 = 
	`HiDec_VoInô
();

555 if(
s32Rë
 =
HI_FAILURE
)

557 
	`Prötf
("HiDec_InitVo Failed!\n");

558  
HI_FAILURE
;

560  
HI_SUCCESS
;

561 
	}
}

	@dec/HiMppDec.h

1 #i‚de‡
__HI_MPP_DEC_H__


2 
	#__HI_MPP_DEC_H__


	)

4 #ifde‡
__˝lu•lus


8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<±hªad.h
>

11 
	~<sig«l.h
>

12 
	~<uni°d.h
>

13 
	~<mem‹y.h
>

14 
	~"comm⁄.h
"

15 
	~"ßm∂e_comm.h
"

16 
	~"globÆ.h
"

17 
	~"myli°.h
"

18 
	~"public.h
"

19 
	~"shm_buf.h
"

23 
	sDecode_ChnInfo
{

24 
Uæ
[128];

25 
ChnNo
;

26 
WöPos
;

27 
nWidth
;

28 
nHeight
;

29 }
	tDecode_ChnInfo
;

32 
	sdecode_msg_t


34 
ChnNo
;

35 
SåómNo
;

36 
WöPos
;

37 }
	tdecode_msg_t
;

39 
	sdecode_thªad_ch™√l_öfo_t


41 
Uæ
[128];

42 
RunSètus
;

43 
ChnNo
;

44 
SåómNo
;

45 
WöPos
;

47 
nWidth
;

48 
nHeight
;

49 
WaôIFøme
;

50 
FømeNo
;

51 
RódBegö
;

52 
RódEnd
;

54 
±hªad_t
 
±hID
;

55 
VdecThªadP¨am
 
°VdecSíd
;

57 
kî√l_li°_hód
 
li°
;

58 }
	tdecode_thªad_ch™√l_öfo_t
;

61 
HI_VOID
 
Hi_DecH™dÀSig
(
HI_S32
 
signo
);

62 
Hi_DecMµInô
(
HI_VOID
);

63 
HI_S32
 
HiDec_VoInô
(
HI_VOID
);

64 
HI_S32
 
HiDec_VoSèπAŒChn
(HI_S32 
íMode
);

65 
HI_S32
 
HiDec_VoSèπFuŒSªí
(HI_S32 
íMode
, HI_S32 
s32ChnNum
);

66 
DecLök_Inô
();

67 *
Hi_DecU§PicThªad
(*
¨g
);

68 
HI_S32
 
HiDec_Cª©eSídThªad
(
decode_thªad_ch™√l_öfo_t
 *
pDecLi°ChnInfo
);

69 
HiDec_Rñe£DecResour˚
(
WöPos
);

70 
HI_S32
 
HiDec_St›
(HI_S32 
s32ChnNum
);

71 
HI_S32
 
HiDec_GëPicSize
(
PIC_SIZE_E
 
Resﬁuti⁄
, 
SIZE_S
 *
°Size
);

72 
HI_S32
 
HiDec_EnChn
(
WöPos
);

73 
HI_S32
 
HiDec_SèπDecode
(HI_S32 
s32ChnNum
, 
SIZE_S
 
°Size
);

74 
HI_S32
 
HiDec_QuîyChnInfo
(
Chn
, 
VDEC_CHN_STAT_S
 *
°ChnSèt
);

76 #ifde‡
__˝lu•lus


	@dec/dec.c

1 
	~"dec.h
"

2 
±hªad_muãx_t
 
	gWrôeCfgFûeMuãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

6 
	$GëCfgDi•Num
()

8 
Di•Num
 = 0;

9 
KeyVÆ
[2] = {0};

10 *
Fûe
 = "/config/HiConfig.ini";

11 *
AµName
 = "DispNum";

12 *
KeyName
 = "CurDispNum";

13 
Rë
;

14 
Rë
 = 
	`GëProfûeSåög
(
Fûe
, 
AµName
, 
KeyName
, 
KeyVÆ
);

15 if(
Rë
 !
SUCCESS
)

17 
	`Prötf
("GetProfileString fail!\n");

18  
FAILURE
 ;

20 
Di•Num
 = 
	`©oi
(
KeyVÆ
);

21  
Di•Num
;

22 
	}
}

26 
	$SëCfgDi•Num
(
Di•Num
)

28 *
Fûe
 = "/config/HiConfig.ini";

29 *
AµName
 = "DispNum";

30 *
KeyName
 = "CurDispNum";

31 
OldKeyVÆ
[2] = {0};

32 
NewKeyVÆ
[2] = {0};

33 
Rë
;

35 
	`•rötf
(
NewKeyVÆ
, "%d", 
Di•Num
);

36 
Rë
 = 
	`GëProfûeSåög
(
Fûe
, 
AµName
, 
KeyName
, 
OldKeyVÆ
);

37 if(
Rë
 !
SUCCESS
)

39 
	`Prötf
("GetProfileString fail!\n");

40  
FAILURE
 ;

42 
	`SëProfûeSåög
(
Fûe
, 
KeyName
, 
OldKeyVÆ
,
NewKeyVÆ
);

46 
	}
}

50 
	$Di•NumToDi•Mode
(
Di•Num
)

52 
i
;

53 
Di•Aº
[][2] = {

54 {
VO_MODE_1MUX
, 1},

55 {
VO_MODE_4MUX
, 4},

56 {
VO_MODE_9MUX
, 9},

57 {
VO_MODE_16MUX
, 16},

58 {
VO_MODE_25MUX
, 25},

60 
i
 = 0; i < (
Di•Aº
)/(DispArr[0]); i++ )

62 if(
Di•Aº
[
i
][1] =
Di•Num
)

64  
Di•Aº
[
i
][0];

67  
SUCCESS
;

68 
	}
}

73 
	$Di•ModeToDi•Num
(
Di•Mode
)

75 
i
;

76 
Di•Aº
[][2] = {

77 {
VO_MODE_1MUX
, 1},

78 {
VO_MODE_4MUX
, 4},

79 {
VO_MODE_9MUX
, 9},

80 {
VO_MODE_16MUX
, 16},

81 {
VO_MODE_25MUX
, 25},

83 
i
 = 0; i < (
Di•Aº
)/(DispArr[0]); i++ )

85 if(
Di•Aº
[
i
][0] =
Di•Mode
)

87  
Di•Aº
[
i
][1];

90  
SUCCESS
;

91 
	}
}

93 
	$ChnNumToResﬁuti⁄
(
s32ChnNum
)

95 
Resﬁuti⁄
 = 0;

96 if(
s32ChnNum
 =1Ë
Resﬁuti⁄
 = 
PIC_HD1080
;

97 if(
s32ChnNum
 =4Ë
Resﬁuti⁄
 = 
PIC_HD1080
;

98 if(
s32ChnNum
 =9Ë
Resﬁuti⁄
 = 
PIC_HD720
;

99 if(
s32ChnNum
 =16Ë
Resﬁuti⁄
 = 
PIC_D1
;

100  
Resﬁuti⁄
;

101 
	}
}

105 
	$Rñe£DecRes
(
OldDi•Num
, 
NewDi•Num
)

107 
i
;

109 
OldResﬁuti⁄
, 
NewResﬁuti⁄
;

110 
	`Prötf
("OldDi•Num:%d, NewDi•Num:%d\n", 
OldDi•Num
, 
NewDi•Num
);

111 
OldResﬁuti⁄
 = 
	`ChnNumToResﬁuti⁄
(
OldDi•Num
);

112 
NewResﬁuti⁄
 = 
	`ChnNumToResﬁuti⁄
(
NewDi•Num
);

113 
	`Prötf
("OldResﬁuti⁄:%d, NewResﬁuti⁄:%d\n", 
OldResﬁuti⁄
, 
NewResﬁuti⁄
);

114 if(
NewResﬁuti⁄
 !
OldResﬁuti⁄
)

116 
i
 = 0; i < 
OldDi•Num
; i++)

118 
	`HiDec_Rñe£DecResour˚
(
i
);

121 if(
OldDi•Num
 > 
NewDi•Num
)

123 
i
 = 0; i < 
OldDi•Num
; i++)

125 
	`HiDec_Rñe£DecResour˚
(
i
);

128  
SUCCESS
;

129 
	}
}

133 
	$DecLi°O≥ø_AddChn
(
Chn
, 
nWidth
, 
nHeight
)

135 
Decode_ChnInfo
 
DecChnInfo
;

136 
Li°O≥øTy≥
 = 
DEC_LIST_OPERA_TYPE_ADD
;

137 
DecChnInfo
.
WöPos

Chn
;

138 
DecChnInfo
.
nWidth
 =ÇWidth;

139 
DecChnInfo
.
nHeight
 =ÇHeight;

140 
	`Hi_DecLökM™age
(
Li°O≥øTy≥
, &
DecChnInfo
);

141 
	}
}

146 
	$DecLi°O≥ø_DñChn
(
Chn
)

148 
Decode_ChnInfo
 
DecChnInfo
;

149 
Li°O≥øTy≥
 = 
DEC_LIST_OPERA_TYPE_DEL
;

150 
DecChnInfo
.
WöPos

Chn
;

151 
	`Hi_DecLökM™age
(
Li°O≥øTy≥
, &
DecChnInfo
);

152 
	}
}

157 
	$DecLi°O≥ø_GëResﬁuti⁄
(
Chn
, *
nWidth
, *
nHeight
)

159 
Decode_ChnInfo
 
DecChnInfo
;

160 
	`mem£t
(&
DecChnInfo
, 0, (DecChnInfo));

161 
Li°O≥øTy≥
 = 
DEC_LIST_OPERA_TYPE_GET_RESOLUTION
;

162 
DecChnInfo
.
WöPos

Chn
;

163 
	`Hi_DecLökM™age
(
Li°O≥øTy≥
, &
DecChnInfo
);

166 
	}
}

171 
	$Hi_DecSèπAŒChn
(
HI_S32
 
s32ChnNum
)

173 
i
;

174 
HI_S32
 
s32Rë
;

175 
Resﬁuti⁄
 = 0;

176 
SIZE_S
 
°Size
;

177 
VDEC_CHN_STAT_S
 
°ChnSèt
;

178 
w
,
h
;

179 
Resﬁuti⁄
 = 
	`ChnNumToResﬁuti⁄
(
s32ChnNum
);

180 
s32Rë
 = 
	`HiDec_GëPicSize
(
Resﬁuti⁄
, &
°Size
);

181 if(
s32Rë
 !
HI_SUCCESS
)

183 
	`Prötf
("HiDec_GetPicSize fail!\n");

184  
HI_FAILURE
;

186 
i
 = 0; i < 
s32ChnNum
; i++)

188 
s32Rë
 = 
	`HiDec_QuîyChnInfo
(
i
, &
°ChnSèt
);

189 if(
s32Rë
 !
HI_SUCCESS
)

191 
s32Rë
 = 
	`HiDec_EnChn
(
i
);

192 if(
s32Rë
 !
HI_SUCCESS
)

194 
	`Prötf
("HiDec_EnChn fail!\n");

195  
HI_FAILURE
;

197 
w
 = 0;

198 
h
 = 0;

199 
	`DecLi°O≥ø_GëResﬁuti⁄
(
i
,&
w
,&
h
);

201 if((
w
 !0Ë&& (
h
 != 0))

203 
°Size
.
u32Width
 = 
w
;

204 
°Size
.
u32Height
 = 
h
;

206 
s32Rë
 = 
	`HiDec_SèπDecode
(
i
, 
°Size
);

207 if(
s32Rë
 !
HI_SUCCESS
)

209 
	`Prötf
("HiDec_StartDecode fail!\n");

210  
HI_FAILURE
;

215 
	`Prötf
("SAMPLE_COMM_VO_SèπChn%d OK!\n",
i
);

218  
HI_SUCCESS
;

219 
	}
}

224 
	$Hi_DecSèπ
(
Di•Mode
)

227 
OldDi•Num
, 
NewDi•Num
;

228 if(
Di•Mode
 >= 3)

230 
	`Prötf
("DispMode Error!\n");

231  
FAILURE
;

233 
OldDi•Num
 = 
	`GëCfgDi•Num
();

234 
NewDi•Num
 = 
	`Di•ModeToDi•Num
(
Di•Mode
);

235 
	`Prötf
("Old:%d, New:%d\n",
OldDi•Num
, 
NewDi•Num
);

236 
	`±hªad_muãx_lock
(&
WrôeCfgFûeMuãx
);

237 
	`SëCfgDi•Num
(
NewDi•Num
);

238 
	`±hªad_muãx_u∆ock
(&
WrôeCfgFûeMuãx
);

239 
	`Rñe£DecRes
(
OldDi•Num
, 
NewDi•Num
);

241 
	`HiDec_VoSèπAŒChn
(
Di•Mode
);

242 
	`GëCurTŸÆChn
(
NewDi•Num
);

243 
	`Hi_DecSèπAŒChn
(
NewDi•Num
);

245 
	}
}

250 
	$HisiDecodeInô
()

252 
Di•Mode
 = 0;

253 
Di•Num
 = 1;

254 
	`±hªad_muãx_öô
(&
WrôeCfgFûeMuãx
, 
NULL
);

256 
	`sig«l
(
SIGINT
, 
Hi_DecH™dÀSig
);

257 
	`sig«l
(
SIGTERM
, 
Hi_DecH™dÀSig
);

258 
	`DecLök_Inô
();

259 
	`Cª©Thªad
(
Hi_DecU§PicThªad
, 
NULL
);

260 
	`Hi_DecMµInô
();

261 
Di•Num
 = 
	`GëCfgDi•Num
();

262 
Di•Mode
 = 
	`Di•NumToDi•Mode
(
Di•Num
);

263 
	`öôaûize_ªcõve_buf
(
Di•Num
);

264 
	`HiDec_VoSèπAŒChn
(
Di•Mode
);

265 
	`GëCurTŸÆChn
(
Di•Num
);

266 
	`Hi_DecSèπAŒChn
(
Di•Num
);

268 
	`¶ìp
(3);

271 
	`Hi_DecSèπ
(0);

272 
	`¶ìp
(5);

273 
	`Hi_DecSèπ
(1);

274 
	`¶ìp
(5);

275 
	`Hi_DecSèπ
(2);

276 
	`¶ìp
(5);

280 
	}
}

	@dec/dec.h

1 #i‚de‡
__DEC_H__


2 
	#__DEC_H__


	)

4 #ifde‡
__˝lu•lus


8 
	~<°dio.h
>

9 
	~<±hªad.h
>

10 
	~<uni°d.h
>

11 
	~<mem‹y.h
>

12 
	~<°dlib.h
>

13 
	~<±hªad.h
>

14 
	~"hi_comm_video.h
"

15 
	~"comm⁄.h
"

16 
	~"globÆ.h
"

17 
	~"HiMµDec.h
"

18 
	~"HiDecU§Pic.h
"

19 
	~"CfgFûeO≥ø.h
"

20 
	~"HiDecLi°.h
"

23 
	#MAX_DECODE_THREAD_NUM
 1

24 
	#CUR_DISP_NUM
 4

25 

	)

26 
	sdecode_dev_ch™√l_öfo_t


28 
isU£d
;

29 
±hªad_muãx_t
 
muãx
;

30 
±hªad_t
 
thªadId
;

31 
runFœg
;

33 
ch™√lNo
;

34 
°ªamNo
;

35 
võwPos
;

36 }
	tdecode_dev_ch™√l_öfo_t
;

39 
Hi_DecSèπ
(
NewDi•Mode
);

40 
HisiDecodeInô
();

41 
DecLi°O≥ø_AddChn
(
Chn
, 
nWidth
, 
nHeight
);

42 
DecLi°O≥ø_DñChn
(
Chn
);

43 
DecLi°O≥ø_GëResﬁuti⁄
(
Chn
, *
nWidth
, *
nHeight
);

45 #ifde‡
__˝lu•lus


	@include/NvrCmdCode.h

1 #i‚de‡
__NVR_CMD_CODE_H__


2 
	#__NVR_CMD_CODE_H___


	)

4 #ifde‡
__˝lu•lus


9 
	#CMD_VDEC_SERVER_BASE
 0x01A0

	)

10 
	#CMD_VDEC_CTRL_PLAY
 (
CMD_VDEC_SERVER_BASE
 + 0x01)

11 
	#CMD_VDEC_CTRL_STOP
 (
CMD_VDEC_SERVER_BASE
 + 0x02)

12 

	)

14 
	#CMD_VDEC_BASE
 0x01B0

	)

15 
	#CMD_VDEC_DISPLAY_MODE
 (
CMD_VDEC_BASE
 + 0x01)

16 

	)

20 #ifde‡
__˝lu•lus


	@include/common.h

1 #i‚de‡
__COMMON_H__


2 
	#__COMMON_H__


	)

4 #ifde‡
__˝lu•lus


8 
	#Prötf
(
fmt
...)\

10 
	`¥ötf
("Fûe:%†- Func:%s(Ë- Löe:%d - Info:", 
__FILE__
,
__FUNCTION__
, 
__LINE__
);\

11 
	`¥ötf
(
fmt
);\

12 }0)

	)

14 
	#cdr_öt64_to
(
vÆue
) \

15 
vÆue
 = ( (((value) & (0xffull << 56)) >> 56) \

16 | (((
vÆue
) & (0xffull << 48)) >> 40) \

17 | (((
vÆue
) & (0xffull << 40)) >> 24) \

18 | (((
vÆue
) & (0xffull << 32)) >> 8) \

19 | (((
vÆue
) & (0xffull << 24)) << 8) \

20 | (((
vÆue
) & (0xffull << 16)) << 24) \

21 | (((
vÆue
) & (0xffull << 8)) << 40) \

22 | (((
vÆue
Ë& 0xffuŒË<< 56Ë)

	)

25 
	#cdr_öt32_to
(
vÆue
) \

26 
vÆue
 = ( (((value) & (0xfful << 24)) >> 24) \

27 | (((
vÆue
) & (0xfful << 16)) >> 8) \

28 | (((
vÆue
) & (0xfful << 8)) << 8) \

29 | (((
vÆue
Ë& 0xffulË<< 24Ë)

	)

31 
	#cdr_öt16_to
(
vÆue
) \

32 
vÆue
 = ( (((value) & (0xffu << 8)) >> 8) \

33 | (((
vÆue
Ë& 0xffuË<< 8Ë)

	)

35 
	#SUCCESS
 0

	)

36 
	#FAILURE
 -1

	)

38 #ifde‡
__˝lu•lus


	@include/global.h

1 #i‚de‡
__GLOBAL_H__


2 
	#__GLOBAL_H__


	)

4 #ifde‡
__˝lu•lus


8 
	tBYTE
;

9 
	tCHAR
;

10 
	tWORD
;

11 
	tDWORD
;

12 
	tDWORD64
;

14 
	#MAX_DISPLAY_NUM
 25

16 
	#CUR_DISPLAY_1MUX
 1

17 
	#CUR_DISPLAY_4MUX
 4

	)

18 
	#CUR_DISPLAY_9MUX
 9

	)

19 
	#CUR_DISPLAY_16MUX
 16

	)

20 
	#CUR_DISPLAY_25MUX
 25

	)

22 
	#STREAM_HEADER_LEN
 12

	)

23 
	sègCmd


25 
cmdCode
;

26 
cmdCål
;

27 
cmdIndex
;

28 
wRes
;

29 
d©aLí
;

30 }
	tCmd
;

33 #ifde‡
__˝lu•lus


	@include/mylist.h

1 #i‚de‡
__MY_LIST_H__


2 
	#__MY_LIST_H__


	)

20 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

22 
	skî√l_li°_hód
 {

23 
kî√l_li°_hód
 *
	m√xt
, *
	m¥ev
;

31 
	#kî√l_li°_íåy
(
±r
, 
ty≥
, 
membî
) \

32 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

39 
	#li°_f‹_óch
(
pos
, 
hód
) \

40 
pos
 = (
hód
)->
√xt
;Öos != (head); \

41 
pos
 =Öos->
√xt
)

	)

47 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

48 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

49 
pos
 =Öos->
¥ev
)

	)

57 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

58 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head);\

59 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

68 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

69 
pos
 = 
	`kî√l_li°_íåy
((
hód
)->
√xt
,
	`ty≥of
(*pos), 
membî
); \

70 &
pos
->
membî
 !(
hód
); \

71 
pos
 = 
	`kî√l_li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

80 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

81 
pos
 = 
	`kî√l_li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

82 
n
 = 
	`kî√l_li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

83 &
pos
->
membî
 !(
hód
); \

84 
pos
 = 
n
,Ç = 
	`kî√l_li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

87 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

89 
	#LIST_HEAD
(
«me
) \

90 
kî√l_li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

92 
ölöe
 
	$INIT_LIST_HEAD
(
kî√l_li°_hód
 *
li°
)

94 
li°
->
√xt
 =Üist;

95 
li°
->
¥ev
 =Üist;

96 
	}
}

103 
ölöe
 
	$__li°_add
(
kî√l_li°_hód
 *
√w
,

104 
kî√l_li°_hód
 *
¥ev
,

105 
kî√l_li°_hód
 *
√xt
)

107 
√xt
->
¥ev
 = 
√w
;

108 
√w
->
√xt
 =Çext;

109 
√w
->
¥ev
 =Örev;

110 
¥ev
->
√xt
 = 
√w
;

111 
	}
}

121 
ölöe
 
	$li°_add
(
kî√l_li°_hód
 *
√w
, kî√l_li°_hód *
hód
)

123 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

124 
	}
}

134 
ölöe
 
	$li°_add_èû
(
kî√l_li°_hód
 *
√w
, kî√l_li°_hód *
hód
)

136 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

137 
	}
}

146 
ölöe
 
	$__li°_dñ
(
kî√l_li°_hód
 *
¥ev
, kî√l_li°_hód *
√xt
)

148 
√xt
->
¥ev
 =Örev;

149 
¥ev
->
√xt
 =Çext;

150 
	}
}

157 
ölöe
 
	$li°_dñ
(
kî√l_li°_hód
 *
íåy
)

159 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

160 
íåy
->
√xt
 = (*) 0;

161 
íåy
->
¥ev
 = (*) 0;

162 
	}
}

168 
ölöe
 
	$li°_dñ_öô
(
kî√l_li°_hód
 *
íåy
)

170 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

171 
	`INIT_LIST_HEAD
(
íåy
);

172 
	}
}

179 
ölöe
 
	$li°_move
(
kî√l_li°_hód
 *
li°
, kî√l_li°_hód *
hód
)

181 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

182 
	`li°_add
(
li°
, 
hód
);

183 
	}
}

190 
ölöe
 
	$li°_move_èû
(
kî√l_li°_hód
 *
li°
,

191 
kî√l_li°_hód
 *
hód
)

193 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

194 
	`li°_add_èû
(
li°
, 
hód
);

195 
	}
}

201 
ölöe
 
	$li°_em±y
(
kî√l_li°_hód
 *
hód
)

203  
hód
->
√xt
 == head;

204 
	}
}

206 
ölöe
 
	$__li°_•li˚
(
kî√l_li°_hód
 *
li°
,

207 
kî√l_li°_hód
 *
hód
)

209 
kî√l_li°_hód
 *
fú°
 = 
li°
->
√xt
;

210 
kî√l_li°_hód
 *
œ°
 = 
li°
->
¥ev
;

211 
kî√l_li°_hód
 *
©
 = 
hód
->
√xt
;

213 
fú°
->
¥ev
 = 
hód
;

214 
hód
->
√xt
 = 
fú°
;

216 
œ°
->
√xt
 = 
©
;

217 
©
->
¥ev
 = 
œ°
;

218 
	}
}

225 
ölöe
 
	$li°_•li˚
(
kî√l_li°_hód
 *
li°
, kî√l_li°_hód *
hód
)

227 i‡(!
	`li°_em±y
(
li°
))

228 
	`__li°_•li˚
(
li°
, 
hód
);

229 
	}
}

238 
ölöe
 
	$li°_•li˚_öô
(
kî√l_li°_hód
 *
li°
,

239 
kî√l_li°_hód
 *
hód
)

241 i‡(!
	`li°_em±y
(
li°
)) {

242 
	`__li°_•li˚
(
li°
, 
hód
);

243 
	`INIT_LIST_HEAD
(
li°
);

245 
	}
}

	@main/main.c

1 
	~"maö.h
"

2 
	$maö
(
¨gc
, *
¨gv
[])

4 
	`HisiDecodeInô
();

5 
	`HisiFømBuf„r
();

6 
	`Cª©Thªad_GëShrMemP¨a
();

9 
	`¶ìp
(10);

12 
	}
}

	@main/main.h

1 #i‚de‡
__MAIN__H__


2 
	#__MAIN__H__


	)

4 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~"≠p.h
"

10 
	~"dec.h
"

11 
	~"HiAµ.h
"

12 
	~"Sh¨eMem.h
"

13 
	~"HiShm.h
"

14 
	~"MŸi⁄Dëe˘.h
"

16 #ifde‡
__˝lu•lus


	@public/CfgFileOpera.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<as£π.h
>

5 
	~<˘y≥.h
>

6 
	~<î∫o.h
>

7 
	~<±hªad.h
>

9 
	#KEYVALLEN
 256

	)

14 *
	$l_åim
(* 
szOuçut
, c⁄° *
szI≈ut
)

16 
	`as£π
(
szI≈ut
 !
NULL
);

17 
	`as£π
(
szOuçut
 !
NULL
);

18 
	`as£π
(
szOuçut
 !
szI≈ut
);

19 *
szI≈ut
 !'\0' && 
	`is•a˚
(*szInput))

21 ++
szI≈ut
;

23  
	`°r˝y
(
szOuçut
, 
szI≈ut
);

24 
	}
}

27 *
	$r_åim
(*
szOuçut
, c⁄° *
szI≈ut
)

29 *
p
 = 
NULL
;

30 
	`as£π
(
szI≈ut
 !
NULL
);

31 
	`as£π
(
szOuçut
 !
NULL
);

32 
	`as£π
(
szOuçut
 !
szI≈ut
);

33 
	`°r˝y
(
szOuçut
, 
szI≈ut
);

34 
p
 = 
szOuçut
 + 
	`°æí
(szOuçutË- 1;Ö >szOuçuà&& 
	`is•a˚
(*p); --p);

35 *(++
p
) = '\0';

36  
szOuçut
;

37 
	}
}

41 * 
	$a_åim
(* 
szOuçut
, c⁄° * 
szI≈ut
)

43 *
p
 = 
NULL
;

44 
	`as£π
(
szI≈ut
 !
NULL
);

45 
	`as£π
(
szOuçut
 !
NULL
);

46 
	`l_åim
(
szOuçut
, 
szI≈ut
);

47 
p
 = 
szOuçut
 + 
	`°æí
(szOuçutË- 1;∞>szOuçuà&& 
	`is•a˚
(*p); --p);

48 *(++
p
) = '\0';

49  
szOuçut
;

50 
	}
}

53 
	$GëProfûeSåög
(*
¥ofûe
, *
AµName
, *
KeyName
, *
KeyVÆ
 )

55 
≠≤ame
[32],
key«me
[32];

56 *
buf
,*
c
;

57 
buf_i
[
KEYVALLEN
], 
buf_o
[KEYVALLEN];

58 
FILE
 *
Â
;

59 
found
=0;

60 if–(
Â
=
	`f›í
–
¥ofûe
,"r" ))==
NULL
 )

62 
	`¥ötf
–"›ífûê[%s]Éº‹ [%s]\n",
¥ofûe
,
	`°ªº‹
(
î∫o
) );

65 
	`f£ek
–
Â
, 0, 
SEEK_SET
 );

66 
	`mem£t
–
≠≤ame
, 0, (appname) );

67 
	`•rötf
–
≠≤ame
,"[%s]", 
AµName
 );

69  !
	`„of
(
Â
Ë&& 
	`fgës
–
buf_i
, 
KEYVALLEN
, f∞)!=
NULL
 )

71 
	`l_åim
(
buf_o
, 
buf_i
);

72 if–
	`°æí
(
buf_o
) <= 0 )

74 
buf
 = 
NULL
;

75 
buf
 = 
buf_o
;

77 if–
found
 == 0 )

79 if–
buf
[0] != '[' )

83 i‡–
	`°∫cmp
(
buf
,
≠≤ame
,
	`°æí
(appname))==0 )

85 
found
 = 1;

90 if–
found
 == 1 )

92 if–
buf
[0] == '#' )

96 i‡–
buf
[0] == '[' )

102 if–(
c
 = (*)
	`°rchr
(
buf
, '=')Ë=
NULL
 )

104 
	`mem£t
–
key«me
, 0, (keyname) );

106 
	`ssˇnf
–
buf
, "%[^=|^ |^\t]", 
key«me
 );

107 if–
	`°rcmp
(
key«me
, 
KeyName
) == 0 )

109 
	`ssˇnf
–++
c
, "%[^\n]", 
KeyVÆ
 );

110 *
KeyVÆ_o
 = (*)
	`mÆloc
(
	`°æí
(
KeyVÆ
) + 1);

111 if(
KeyVÆ_o
 !
NULL
)

113 
	`mem£t
(
KeyVÆ_o
, 0, (
	`°æí
(
KeyVÆ
) + 1));

114 
	`a_åim
(
KeyVÆ_o
, 
KeyVÆ
);

115 if(
KeyVÆ_o
 && 
	`°æí
(KeyVal_o) > 0)

117 
	`°r˝y
(
KeyVÆ
, 
KeyVÆ_o
);

119 
	`‰ì
(
KeyVÆ_o
);

120 
KeyVÆ_o
 = 
NULL
;

122 
found
 = 2;

132 
	`f˛o£
(
Â
);

133 if–
found
 == 2 )

137 
	}
}

139 
±hªad_muãx_t
 
	gWrôeCfgMuãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

140 
	$SëProfûeSåög
(*
¥ofûe
, *
KeyName
, *
OldKeyVÆ
, *
NewKeyVÆ
)

142 
buf
[128];

143 
	`¥ötf
("======OOOOOO:%s, =======NNNNNNN:%s\n",
OldKeyVÆ
, 
NewKeyVÆ
);

144 
	`•rötf
(
buf
,"£d -ò's/%†%s/%†%s/' %s", 
KeyName
, 
OldKeyVÆ
, KeyName, 
NewKeyVÆ
, 
¥ofûe
);

145 
	`¥ötf
("buf:%s\n",
buf
);

146 
	`±hªad_muãx_lock
(&
WrôeCfgMuãx
);

147 
	`sy°em
(
buf
);

148 
	`±hªad_muãx_u∆ock
(&
WrôeCfgMuãx
);

149 
	}
}

	@public/CfgFileOpera.h

1 #i‚de‡
_CFG_FILE_OPERA_H__


2 
	#_CFG_FILE_OPERA_H__


	)

3 #ifde‡
__˝lu•lus


7 
GëProfûeSåög
(*
¥ofûe
, *
AµName
, *
KeyName
, *
KeyVÆ
 );

8 
SëProfûeSåög
(*
¥ofûe
, *
KeyName
, *
OldKeyVÆ
, *
NewKeyVÆ
);

10 #ifde‡
__˝lu•lus


	@public/NVR_Stream.c

1 
	~"NVR_Såóm.h
"

3 
	$NVR_RódBYTE
(** 
pBuf
, * 
pVÆue
)

5 *
pVÆue
 = *(*)(*)(*
pBuf
);

6 *
pBuf
 += ();

7 
	}
}

8 
	$NVR_RódWORD
(** 
pBuf
, * 
pVÆue
)

10 
ãmp
;

11 
ãmp
 = *(*)(*)(*
pBuf
);

12 *
pVÆue
 = 
ãmp
;

13 *
pBuf
 += ();

14 
	}
}

15 
	$NVR_RódDWORD
(** 
pBuf
, * 
pVÆue
)

17 
ãmp
;

18 
ãmp
 = *(*)(*)(*
pBuf
);

19 *
pVÆue
 = *(*)(*)(*
pBuf
);

20 *
pBuf
 += ();

21 
	}
}

22 
	$NVR_RódDWORD64
(** 
pBuf
, * 
pVÆue
)

24 *
pVÆue
 = *(*)(*)(*
pBuf
);

25 *
pBuf
 += ();

26 
	}
}

27 
	$NVR_RódBYTEAºay
(** 
pbyBuf
, * 
pbyD°
, 
wLí
)

29 
	`mem˝y
(
pbyD°
, *
pbyBuf
, 
wLí
);

30 *
pbyBuf
 +
wLí
;

31 
	}
}

33 
	$NVR_WrôeBYTE
(** 
pBuf
, 
vÆue
)

35 *(*)(*)(*
pBuf
Ë
vÆue
;

36 *
pBuf
 += ();

37 
	}
}

38 
	$NVR_WrôeWORD
(** 
pBuf
, 
vÆue
)

40 *(*)(*)(*
pBuf
Ë
vÆue
;

41 *
pBuf
 += ();

42 
	}
}

43 
	$NVR_WrôeDWORD
(** 
pBuf
, 
vÆue
)

45 *(*)(*)(*
pBuf
Ë
vÆue
;

46 *
pBuf
 += ();

47 
	}
}

48 
	$NVR_WrôeDWORD64
(** 
pBuf
, 
vÆue
)

50 *(*)(*)(*
pBuf
Ë
vÆue
;

51 *
pBuf
 += ();

52 
	}
}

53 
	$NVR_WrôeBYTEAºay
(** 
pbyBuf
, c⁄° * 
pbySrc
, 
wLí
)

55 
	`mem˝y
(*
pbyBuf
, 
pbySrc
, 
wLí
);

56 *
pbyBuf
 +
wLí
;

57 
	}
}

58 
	$NVR_WrôeSå
(** 
pbyBuf
, c⁄° 
CHAR
* 
°r
, 
wLí
)

60 i‡(0 =
wLí
)

64 
wC›yLí
 = 
wLí
;

65 
wSåLí
 = ()
	`°æí
(
°r
);

66 i‡(
wSåLí
 < 
wC›yLí
)

68 
wC›yLí
 = 
wSåLí
;

72 --
wC›yLí
;

74 
	`mem˝y
(*
pbyBuf
, 
°r
, 
wC›yLí
);

75 (*
pbyBuf
)[
wC›yLí
] = 0;

76 *
pbyBuf
 +
wLí
;

77 
	}
}

	@public/NVR_Stream.h

1 #i‚de‡
_NVR_STREAM_H_


2 
	#_NVR_STREAM_H_


	)

3 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~<mem‹y.h
>

9 
	~"globÆ.h
"

10 
	~"comm⁄.h
"

12 
NVR_RódBYTE
(** 
pBuf
, * 
pVÆue
);

13 
NVR_RódWORD
(** 
pBuf
, * 
pVÆue
);

14 
NVR_RódDWORD
(** 
pBuf
, * 
pVÆue
);

15 
NVR_RódDWORD64
(** 
pBuf
, * 
pVÆue
);

16 
NVR_RódBYTEAºay
(** 
pbyBuf
, * 
pbyD°
, 
wLí
);

19 
NVR_WrôeBYTE
(** 
pBuf
, 
vÆue
);

20 
NVR_WrôeWORD
(** 
pBuf
, 
vÆue
);

21 
NVR_WrôeDWORD
(** 
pBuf
, 
vÆue
);

22 
NVR_WrôeDWORD64
(** 
pBuf
, 
vÆue
);

23 
NVR_WrôeBYTEAºay
(** 
pbyBuf
, c⁄° * 
pbySrc
, 
wLí
);

25 
NVR_WrôeSå
(** 
pbyBuf
, c⁄° 
CHAR
* 
°r
, 
wLí
);

34 #ifde‡
__˝lu•lus


	@public/public.c

1 
	~"public.h
"

5 
	$Cª©Thªad
(
°hªad
 
func
,* 
∑øm
)

7 
iRë
=0;

8 
±hªad_t
 
thªadID
;

9 
±hªad_©å_t
 
©å
;

10 
	`±hªad_©å_öô
(&
©å
);

11 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

12 
iRë
=
	`±hªad_¸óã
(&
thªadID
,&
©å
,
func
,
∑øm
);

13 if(
iRë
 != 0)

15 ()
	`±hªad_©å_de°roy
(&
©å
);

19 
	}
}

24 
	$PrötByã
(*
p
,
Àn
)

26 
i
=1;

27 
i
<
Àn
+1)

29 
	`Ârötf
(
°dout
,"%02X ",()()(((*)
p
)[
i
-1]));

30 i‡(
i
>0&&0==i%24Ë
	`Ârötf
(
°dout
,"\n");

31 
i
++;

33 
	`Ârötf
(
°dout
,"\n");

34 
	}
}

	@public/public.h

1 #i‚de‡
__PUBLIC_H__


2 
	#__PUBLIC_H__


	)

4 #ifde‡
__˝lu•lus


7 
	~<±hªad.h
>

8 
	~<°dio.h
>

9 *(*
	t°hªad
)(*);

10 
PrötByã
(*
p
,
Àn
);

12 
Cª©Thªad
(
°hªad
 
func
,* 
∑øm
);

14 #ifde‡
__˝lu•lus


	@shm/HiShm.c

1 
	~"HiShm.h
"

6 *
	$ShrMem_GëNvrCfgP¨a
(*
¨g
)

8 
ShmLí
 = 
LEN_BUF
;

9 
ªt
;

10 
sBuf
[
LEN_BUF
+1] = {0};

11 
	`shm_öôül
(
SHM_ID_HIFB_CMD
);

14 
ShmLí
 = 
LEN_BUF
;

15 
ªt
 = 
	`ShmRecv
(
SHM_ID_HIFB_CMD
, 
sBuf
, &
ShmLí
);

16 i‡(
ªt
 == 0)

18 
	`u¶ìp
(1000*200);

21 if(
ShmLí
 <= 0)

23 
	`Ârötf
(
°dout
, "need more buffer\n");

26 
	`AµFuncSórch
(
sBuf
, 
ShmLí
);

28  
NULL
;

29 
	}
}

34 
	$Cª©Thªad_GëShrMemP¨a
()

36 
	`Cª©Thªad
(
ShrMem_GëNvrCfgP¨a
,
NULL
);

38 
	}
}

	@shm/HiShm.h

1 #i‚de‡
__HI_SHM_H__


2 
	#__HI_SHM_H_


	)

4 #ifde‡
__˝lu•lus


7 
	~<°dio.h
>

8 
	~<uni°d.h
>

9 
	~"comm⁄.h
"

10 
	~"public.h
"

11 
	~"Sh¨eMem.h
"

12 
	~"≠pFuncTabÀ.h
"

14 
	#LEN_BUF
 256

	)

16 
Cª©Thªad_GëShrMemP¨a
();

18 #ifde‡
__˝lu•lus


	@shm/ShareMem.cpp

5 
	~<°dio.h
>

6 
	~"Sh¨eMem.h
"

7 
	~"shm_öãrÁ˚.h
"

8 
	$ShmRecv
(
id
, *
pD©a
, *
pLí
)

10 
Àn
=*
pLí
;

11 
boﬁ
 
bRë
;

12 
bRë
 = (
	`shm_ª˚ive_‰om_id
(
id
, 
pD©a
, 
Àn
));

13 *
pLí
 = 
Àn
;

14  
bRë
?1:0;

15 
	}
}

	@shm/ShareMem.h

1 #i‚de‡
__SHARE_MEM__H__


2 
	#__SHARE_MEM__H__


	)

4 #ifde‡
__˝lu•lus


9 
	#SHM_ID_SERVER
 1

	)

10 
	#SHM_ID_HIFB_QT
 2

	)

11 
	#SHM_ID_HIFB_VIDEO
 3

	)

12 
	#SHM_ID_HIFB_FB
 4

	)

13 
	#SHM_ID_HIFB_CMD
 4

	)

15 
ShmRecv
(
id
, *
pD©a
, *
pLí
);

16 
shm_öôül
(
ID
);

17 
shm_£nd
(
dID
,*
pD©a
,
Àn
);

18 
byã_¥öt
(*
p
,
Àn
);

20 #ifde‡
__˝lu•lus


	@shm/shm_buf.h

1 #i‚de‡
__SAMPLEBUF__H__


2 
	#__SAMPLEBUF__H__


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


18 
öôaûize_ªcõve_buf
(
nChnNum
);

29 
FILE
 *
myf›í
(
id
);

30 
FILE
 *
myf›íEx
(
id
, *
URL
);

40 
myf˛o£
(
FILE
* 
fd
);

52 
my‰ód
(*
pBuf
,
Àn
,
FILE
* 
fd
);

54 #ifde‡
__˝lu•lus


55 #i‡
__˝lu•lus


	@shm/shm_interface.h

1 #i‚de‡
_SHM_INTERFACE_H_HEADER


2 
	#_SHM_INTERFACE_H_HEADER


	)

4 #ifde‡
__˝lu•lus


5 #i‡
__˝lu•lus


17 
	#SHM_ID_SERVER
 1

	)

18 
	#SHM_ID_HIFB_QT
 2

	)

19 
	#SHM_ID_HIFB_VIDEO
 3

	)

20 
	#SHM_ID_HIFB_FB
 4

	)

21 
	#SHM_ID_HIFB_CMD
 4

	)

22 
	#SHM_ID_SERVER1
 101

	)

23 
	#SHM_ID_HIFB1_VIDEO
 103

	)

24 
	#SHM_ID_HIFB1_FB
 104

	)

25 
	#SHM_ID_HIFB1_CMD
 104

	)

26 
	#SHM_ID_SERVER2
 201

	)

27 
	#SHM_ID_HIFB2_VIDEO
 203

	)

28 
	#SHM_ID_HIFB2_FB
 204

	)

29 
	#SHM_ID_HIFB2_CMD
 204

	)

30 
	#SHM_ID_SERVER3
 301

	)

31 
	#SHM_ID_HIFB3_VIDEO
 303

	)

32 
	#SHM_ID_HIFB3_FB
 304

	)

33 
	#SHM_ID_HIFB3_CMD
 304

	)

34 
shm_öôül
(
ID
);

46 
shm_£nd
(
dID
,*
pD©a
,
Àn
);

47 
shm_£nd_to_£rvî
(*
pD©a
,
Àn
);

48 
shm_£nd_to_fb_buf
(
dID
,*
pD©a
,
Àn
);

49 
shm_£nd_to_cur_bﬂrd
(
dID
,*
pD©a
,
Àn
);

61 
boﬁ
 
shm_ª˚ive
(*
pD©a
,&
Àn
);

62 
boﬁ
 
shm_ª˚ive_‰om_id
(
id
,*
pD©a
,&
Àn
);

63 
boﬁ
 
shm_ªcv_‰om_fb_buf
(&
dID
,*
pD©a
,&
Àn
);

70 
shm_‰ì
();

79 
shm_gëBﬂrdIndex
();

88 
boﬁ
 
shm_ßveD©a
(
id
,*
pD©a
,
Àn
);

97 
boﬁ
 
shm_lﬂdD©a
(
id
,*
pD©a
,&
Àn
);

99 #ifde‡
__˝lu•lus


100 #i‡
__˝lu•lus


	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

70 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

75 
__löe
,

76 
__c⁄°
 *
__fun˘i⁄
)

77 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

82 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

86 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

105 #ifde‡
__USE_ATFILE


106 
	#AT_FDCWD
 -100

	)

109 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

110 
	#AT_REMOVEDIR
 0x200

	)

112 
	#AT_SYMLINK_FOLLOW
 0x400

	)

113 
	#AT_EACCESS
 0x200

	)

122 
f˙é
 (
__fd
, 
__cmd
, ...);

130 #i‚de‡
__USE_FILE_OFFSET64


131 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

133 #ifde‡
__REDIRECT


134 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

135 
	`__n⁄nuŒ
 ((1));

137 
	#›í
 
›í64


	)

140 #ifde‡
__USE_LARGEFILE64


141 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

144 #ifde‡
__USE_ATFILE


154 #i‚de‡
__USE_FILE_OFFSET64


155 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

156 
	`__n⁄nuŒ
 ((2));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

160 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

162 
	#›í©
 
›í©64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

167 
	`__n⁄nuŒ
 ((2));

176 #i‚de‡
__USE_FILE_OFFSET64


177 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

179 #ifde‡
__REDIRECT


180 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

181 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

183 
	#¸ót
 
¸ót64


	)

186 #ifde‡
__USE_LARGEFILE64


187 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

190 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

191 && !
deföed
 
__USE_POSIX
))

200 
	#F_ULOCK
 0

	)

201 
	#F_LOCK
 1

	)

202 
	#F_TLOCK
 2

	)

203 
	#F_TEST
 3

	)

205 #i‚de‡
__USE_FILE_OFFSET64


206 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

211 
	#lockf
 
lockf64


	)

214 #ifde‡
__USE_LARGEFILE64


215 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

219 #ifde‡
__USE_XOPEN2K


222 #i‚de‡
__USE_FILE_OFFSET64


223 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

224 
__advi£
Ë
__THROW
;

226 #ifde‡
__REDIRECT_NTH


227 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

228 
__off64_t
 
__Àn
, 
__advi£
),

229 
posix_Ádvi£64
);

231 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

236 
__advi£
Ë
__THROW
;

244 #i‚de‡
__USE_FILE_OFFSET64


245 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

249 
__off64_t
 
__Àn
),

250 
posix_ÁŒoˇã64
);

252 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

262 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

263 && 
deföed
 
__va_¨g_∑ck_Àn


264 
	~<bôs/f˙é2.h
>

267 
__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/fb.h

1 #i‚de‡
_LINUX_FB_H


2 
	#_LINUX_FB_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/i2c.h
>

7 
	gdíåy
;

11 
	#FB_MAX
 32

	)

15 
	#FBIOGET_VSCREENINFO
 0x4600

	)

16 
	#FBIOPUT_VSCREENINFO
 0x4601

	)

17 
	#FBIOGET_FSCREENINFO
 0x4602

	)

18 
	#FBIOGETCMAP
 0x4604

	)

19 
	#FBIOPUTCMAP
 0x4605

	)

20 
	#FBIOPAN_DISPLAY
 0x4606

	)

21 
	#FBIO_CURSOR
 
	`_IOWR
('F', 0x08, 
fb_curs‹
)

	)

26 
	#FBIOGET_CON2FBMAP
 0x460F

	)

27 
	#FBIOPUT_CON2FBMAP
 0x4610

	)

28 
	#FBIOBLANK
 0x4611

	)

29 
	#FBIOGET_VBLANK
 
	`_IOR
('F', 0x12, 
fb_vbœnk
)

	)

30 
	#FBIO_ALLOC
 0x4613

	)

31 
	#FBIO_FREE
 0x4614

	)

32 
	#FBIOGET_GLYPH
 0x4615

	)

33 
	#FBIOGET_HWCINFO
 0x4616

	)

34 
	#FBIOPUT_MODEINFO
 0x4617

	)

35 
	#FBIOGET_DISPINFO
 0x4618

	)

36 
	#FBIO_WAITFORVSYNC
 
	`_IOW
('F', 0x20, 
__u32
)

	)

38 
	#FB_TYPE_PACKED_PIXELS
 0

	)

39 
	#FB_TYPE_PLANES
 1

	)

40 
	#FB_TYPE_INTERLEAVED_PLANES
 2

	)

41 
	#FB_TYPE_TEXT
 3

	)

42 
	#FB_TYPE_VGA_PLANES
 4

	)

44 
	#FB_AUX_TEXT_MDA
 0

	)

45 
	#FB_AUX_TEXT_CGA
 1

	)

46 
	#FB_AUX_TEXT_S3_MMIO
 2

	)

47 
	#FB_AUX_TEXT_MGA_STEP16
 3

	)

48 
	#FB_AUX_TEXT_MGA_STEP8
 4

	)

49 
	#FB_AUX_TEXT_SVGA_GROUP
 8

	)

50 
	#FB_AUX_TEXT_SVGA_MASK
 7

	)

51 
	#FB_AUX_TEXT_SVGA_STEP2
 8

	)

52 
	#FB_AUX_TEXT_SVGA_STEP4
 9

	)

53 
	#FB_AUX_TEXT_SVGA_STEP8
 10

	)

54 
	#FB_AUX_TEXT_SVGA_STEP16
 11

	)

55 
	#FB_AUX_TEXT_SVGA_LAST
 15

	)

57 
	#FB_AUX_VGA_PLANES_VGA4
 0

	)

58 
	#FB_AUX_VGA_PLANES_CFB4
 1

	)

59 
	#FB_AUX_VGA_PLANES_CFB8
 2

	)

61 
	#FB_VISUAL_MONO01
 0

	)

62 
	#FB_VISUAL_MONO10
 1

	)

63 
	#FB_VISUAL_TRUECOLOR
 2

	)

64 
	#FB_VISUAL_PSEUDOCOLOR
 3

	)

65 
	#FB_VISUAL_DIRECTCOLOR
 4

	)

66 
	#FB_VISUAL_STATIC_PSEUDOCOLOR
 5

	)

68 
	#FB_ACCEL_NONE
 0

	)

69 
	#FB_ACCEL_ATARIBLITT
 1

	)

70 
	#FB_ACCEL_AMIGABLITT
 2

	)

71 
	#FB_ACCEL_S3_TRIO64
 3

	)

72 
	#FB_ACCEL_NCR_77C32BLT
 4

	)

73 
	#FB_ACCEL_S3_VIRGE
 5

	)

74 
	#FB_ACCEL_ATI_MACH64GX
 6

	)

75 
	#FB_ACCEL_DEC_TGA
 7

	)

76 
	#FB_ACCEL_ATI_MACH64CT
 8

	)

77 
	#FB_ACCEL_ATI_MACH64VT
 9

	)

78 
	#FB_ACCEL_ATI_MACH64GT
 10

	)

79 
	#FB_ACCEL_SUN_CREATOR
 11

	)

80 
	#FB_ACCEL_SUN_CGSIX
 12

	)

81 
	#FB_ACCEL_SUN_LEO
 13

	)

82 
	#FB_ACCEL_IMS_TWINTURBO
 14

	)

83 
	#FB_ACCEL_3DLABS_PERMEDIA2
 15

	)

84 
	#FB_ACCEL_MATROX_MGA2064W
 16

	)

85 
	#FB_ACCEL_MATROX_MGA1064SG
 17

	)

86 
	#FB_ACCEL_MATROX_MGA2164W
 18

	)

87 
	#FB_ACCEL_MATROX_MGA2164W_AGP
 19

	)

88 
	#FB_ACCEL_MATROX_MGAG100
 20

	)

89 
	#FB_ACCEL_MATROX_MGAG200
 21

	)

90 
	#FB_ACCEL_SUN_CG14
 22

	)

91 
	#FB_ACCEL_SUN_BWTWO
 23

	)

92 
	#FB_ACCEL_SUN_CGTHREE
 24

	)

93 
	#FB_ACCEL_SUN_TCX
 25

	)

94 
	#FB_ACCEL_MATROX_MGAG400
 26

	)

95 
	#FB_ACCEL_NV3
 27

	)

96 
	#FB_ACCEL_NV4
 28

	)

97 
	#FB_ACCEL_NV5
 29

	)

98 
	#FB_ACCEL_CT_6555x
 30

	)

99 
	#FB_ACCEL_3DFX_BANSHEE
 31

	)

100 
	#FB_ACCEL_ATI_RAGE128
 32

	)

101 
	#FB_ACCEL_IGS_CYBER2000
 33

	)

102 
	#FB_ACCEL_IGS_CYBER2010
 34

	)

103 
	#FB_ACCEL_IGS_CYBER5000
 35

	)

104 
	#FB_ACCEL_SIS_GLAMOUR
 36

	)

105 
	#FB_ACCEL_3DLABS_PERMEDIA3
 37

	)

106 
	#FB_ACCEL_ATI_RADEON
 38

	)

107 
	#FB_ACCEL_I810
 39

	)

108 
	#FB_ACCEL_SIS_GLAMOUR_2
 40

	)

109 
	#FB_ACCEL_SIS_XABRE
 41

	)

110 
	#FB_ACCEL_I830
 42

	)

111 
	#FB_ACCEL_NV_10
 43

	)

112 
	#FB_ACCEL_NV_20
 44

	)

113 
	#FB_ACCEL_NV_30
 45

	)

114 
	#FB_ACCEL_NV_40
 46

	)

115 
	#FB_ACCEL_XGI_VOLARI_V
 47

	)

116 
	#FB_ACCEL_XGI_VOLARI_Z
 48

	)

117 
	#FB_ACCEL_OMAP1610
 49

	)

118 
	#FB_ACCEL_TRIDENT_TGUI
 50

	)

119 
	#FB_ACCEL_TRIDENT_3DIMAGE
 51

	)

120 
	#FB_ACCEL_TRIDENT_BLADE3D
 52

	)

121 
	#FB_ACCEL_TRIDENT_BLADEXP
 53

	)

122 
	#FB_ACCEL_CIRRUS_ALPINE
 53

	)

123 
	#FB_ACCEL_NEOMAGIC_NM2070
 90

	)

124 
	#FB_ACCEL_NEOMAGIC_NM2090
 91

	)

125 
	#FB_ACCEL_NEOMAGIC_NM2093
 92

	)

126 
	#FB_ACCEL_NEOMAGIC_NM2097
 93

	)

127 
	#FB_ACCEL_NEOMAGIC_NM2160
 94

	)

128 
	#FB_ACCEL_NEOMAGIC_NM2200
 95

	)

129 
	#FB_ACCEL_NEOMAGIC_NM2230
 96

	)

130 
	#FB_ACCEL_NEOMAGIC_NM2360
 97

	)

131 
	#FB_ACCEL_NEOMAGIC_NM2380
 98

	)

132 
	#FB_ACCEL_PXA3XX
 99

	)

134 
	#FB_ACCEL_SAVAGE4
 0x80

	)

135 
	#FB_ACCEL_SAVAGE3D
 0x81

	)

136 
	#FB_ACCEL_SAVAGE3D_MV
 0x82

	)

137 
	#FB_ACCEL_SAVAGE2000
 0x83

	)

138 
	#FB_ACCEL_SAVAGE_MX_MV
 0x84

	)

139 
	#FB_ACCEL_SAVAGE_MX
 0x85

	)

140 
	#FB_ACCEL_SAVAGE_IX_MV
 0x86

	)

141 
	#FB_ACCEL_SAVAGE_IX
 0x87

	)

142 
	#FB_ACCEL_PROSAVAGE_PM
 0x88

	)

143 
	#FB_ACCEL_PROSAVAGE_KM
 0x89

	)

144 
	#FB_ACCEL_S3TWISTER_P
 0x8®

	)

145 
	#FB_ACCEL_S3TWISTER_K
 0x8b

	)

146 
	#FB_ACCEL_SUPERSAVAGE
 0x8¯

	)

147 
	#FB_ACCEL_PROSAVAGE_DDR
 0x8d

	)

148 
	#FB_ACCEL_PROSAVAGE_DDRK
 0x8ê

	)

150 
	sfb_fix_s¸ìnöfo
 {

151 
	mid
[16];

152 
	msmem_°¨t
;

154 
__u32
 
	msmem_Àn
;

155 
__u32
 
	mty≥
;

156 
__u32
 
	mty≥_aux
;

157 
__u32
 
	mvisuÆ
;

158 
__u16
 
	mx∑n°ï
;

159 
__u16
 
	my∑n°ï
;

160 
__u16
 
	mywøp°ï
;

161 
__u32
 
	mlöe_Àngth
;

162 
	mmmio_°¨t
;

164 
__u32
 
	mmmio_Àn
;

165 
__u32
 
	mac˚l
;

167 
__u16
 
	mª£rved
[3];

180 
	sfb_bôfõld
 {

181 
__u32
 
	moff£t
;

182 
__u32
 
	mÀngth
;

183 
__u32
 
	mmsb_right
;

187 
	#FB_NONSTD_HAM
 1

	)

188 
	#FB_NONSTD_REV_PIX_IN_B
 2

	)

190 
	#FB_ACTIVATE_NOW
 0

	)

191 
	#FB_ACTIVATE_NXTOPEN
 1

	)

192 
	#FB_ACTIVATE_TEST
 2

	)

193 
	#FB_ACTIVATE_MASK
 15

	)

195 
	#FB_ACTIVATE_VBL
 16

	)

196 
	#FB_CHANGE_CMAP_VBL
 32

	)

197 
	#FB_ACTIVATE_ALL
 64

	)

198 
	#FB_ACTIVATE_FORCE
 128

	)

199 
	#FB_ACTIVATE_INV_MODE
 256

	)

201 
	#FB_ACCELF_TEXT
 1

	)

203 
	#FB_SYNC_HOR_HIGH_ACT
 1

	)

204 
	#FB_SYNC_VERT_HIGH_ACT
 2

	)

205 
	#FB_SYNC_EXT
 4

	)

206 
	#FB_SYNC_COMP_HIGH_ACT
 8

	)

207 
	#FB_SYNC_BROADCAST
 16

	)

210 
	#FB_SYNC_ON_GREEN
 32

	)

212 
	#FB_VMODE_NONINTERLACED
 0

	)

213 
	#FB_VMODE_INTERLACED
 1

	)

214 
	#FB_VMODE_DOUBLE
 2

	)

215 
	#FB_VMODE_ODD_FLD_FIRST
 4

	)

216 
	#FB_VMODE_MASK
 255

	)

218 
	#FB_VMODE_YWRAP
 256

	)

219 
	#FB_VMODE_SMOOTH_XPAN
 512

	)

220 
	#FB_VMODE_CONUPDATE
 512

	)

225 
	#FB_ROTATE_UR
 0

	)

226 
	#FB_ROTATE_CW
 1

	)

227 
	#FB_ROTATE_UD
 2

	)

228 
	#FB_ROTATE_CCW
 3

	)

230 
	#PICOS2KHZ
(
a
Ë(1000000000UL/◊))

	)

231 
	#KHZ2PICOS
(
a
Ë(1000000000UL/◊))

	)

233 
	sfb_v¨_s¸ìnöfo
 {

234 
__u32
 
	mxªs
;

235 
__u32
 
	myªs
;

236 
__u32
 
	mxªs_vútuÆ
;

237 
__u32
 
	myªs_vútuÆ
;

238 
__u32
 
	mxoff£t
;

239 
__u32
 
	myoff£t
;

241 
__u32
 
	mbôs_≥r_pixñ
;

242 
__u32
 
	mgøysˇÀ
;

244 
fb_bôfõld
 
	mªd
;

245 
fb_bôfõld
 
	mgªí
;

246 
fb_bôfõld
 
	mblue
;

247 
fb_bôfõld
 
	må™•
;

249 
__u32
 
	mn⁄°d
;

251 
__u32
 
	ma˘iv©e
;

253 
__u32
 
	mheight
;

254 
__u32
 
	mwidth
;

256 
__u32
 
	mac˚l_Êags
;

259 
__u32
 
	mpix˛ock
;

260 
__u32
 
	mÀ·_m¨gö
;

261 
__u32
 
	mright_m¨gö
;

262 
__u32
 
	muµî_m¨gö
;

263 
__u32
 
	mlowî_m¨gö
;

264 
__u32
 
	mhsync_Àn
;

265 
__u32
 
	mvsync_Àn
;

266 
__u32
 
	msync
;

267 
__u32
 
	mvmode
;

268 
__u32
 
	mrŸ©e
;

269 
__u32
 
	mª£rved
[5];

272 
	sfb_cm≠
 {

273 
__u32
 
	m°¨t
;

274 
__u32
 
	mÀn
;

275 
__u16
 *
	mªd
;

276 
__u16
 *
	mgªí
;

277 
__u16
 *
	mblue
;

278 
__u16
 *
	må™•
;

281 
	sfb_c⁄2fbm≠
 {

282 
__u32
 
	mc⁄sﬁe
;

283 
__u32
 
	m‰amebuf„r
;

287 
	#VESA_NO_BLANKING
 0

	)

288 
	#VESA_VSYNC_SUSPEND
 1

	)

289 
	#VESA_HSYNC_SUSPEND
 2

	)

290 
	#VESA_POWERDOWN
 3

	)

295 
	mFB_BLANK_UNBLANK
 = 
VESA_NO_BLANKING
,

298 
	mFB_BLANK_NORMAL
 = 
VESA_NO_BLANKING
 + 1,

301 
	mFB_BLANK_VSYNC_SUSPEND
 = 
VESA_VSYNC_SUSPEND
 + 1,

304 
	mFB_BLANK_HSYNC_SUSPEND
 = 
VESA_HSYNC_SUSPEND
 + 1,

307 
	mFB_BLANK_POWERDOWN
 = 
VESA_POWERDOWN
 + 1

310 
	#FB_VBLANK_VBLANKING
 0x001

	)

311 
	#FB_VBLANK_HBLANKING
 0x002

	)

312 
	#FB_VBLANK_HAVE_VBLANK
 0x004

	)

313 
	#FB_VBLANK_HAVE_HBLANK
 0x008

	)

314 
	#FB_VBLANK_HAVE_COUNT
 0x010

	)

315 
	#FB_VBLANK_HAVE_VCOUNT
 0x020

	)

316 
	#FB_VBLANK_HAVE_HCOUNT
 0x040

	)

317 
	#FB_VBLANK_VSYNCING
 0x080

	)

318 
	#FB_VBLANK_HAVE_VSYNC
 0x100

	)

320 
	sfb_vbœnk
 {

321 
__u32
 
	mÊags
;

322 
__u32
 
	mcou¡
;

323 
__u32
 
	mvcou¡
;

324 
__u32
 
	mhcou¡
;

325 
__u32
 
	mª£rved
[4];

329 
	#ROP_COPY
 0

	)

330 
	#ROP_XOR
 1

	)

332 
	sfb_c›y¨ó
 {

333 
__u32
 
	mdx
;

334 
__u32
 
	mdy
;

335 
__u32
 
	mwidth
;

336 
__u32
 
	mheight
;

337 
__u32
 
	msx
;

338 
__u32
 
	msy
;

341 
	sfb_fûÃe˘
 {

342 
__u32
 
	mdx
;

343 
__u32
 
	mdy
;

344 
__u32
 
	mwidth
;

345 
__u32
 
	mheight
;

346 
__u32
 
	mcﬁ‹
;

347 
__u32
 
	mr›
;

350 
	sfb_image
 {

351 
__u32
 
	mdx
;

352 
__u32
 
	mdy
;

353 
__u32
 
	mwidth
;

354 
__u32
 
	mheight
;

355 
__u32
 
	mfg_cﬁ‹
;

356 
__u32
 
	mbg_cﬁ‹
;

357 
__u8
 
	mdïth
;

358 c⁄° *
	md©a
;

359 
fb_cm≠
 
	mcm≠
;

366 
	#FB_CUR_SETIMAGE
 0x01

	)

367 
	#FB_CUR_SETPOS
 0x02

	)

368 
	#FB_CUR_SETHOT
 0x04

	)

369 
	#FB_CUR_SETCMAP
 0x08

	)

370 
	#FB_CUR_SETSHAPE
 0x10

	)

371 
	#FB_CUR_SETSIZE
 0x20

	)

372 
	#FB_CUR_SETALL
 0xFF

	)

374 
	sfbcuΩos
 {

375 
__u16
 
	mx
, 
	my
;

378 
	sfb_curs‹
 {

379 
__u16
 
	m£t
;

380 
__u16
 
	míabÀ
;

381 
__u16
 
	mr›
;

382 c⁄° *
	mmask
;

383 
fbcuΩos
 
	mhŸ
;

384 
fb_image
 
	mimage
;

387 #ifde‡
CONFIG_FB_BACKLIGHT


389 
	#FB_BACKLIGHT_LEVELS
 128

	)

390 
	#FB_BACKLIGHT_MAX
 0xFF

	)

	@/usr/include/linux/fcntl.h

1 #i‚de‡
_LINUX_FCNTL_H


2 
	#_LINUX_FCNTL_H


	)

4 
	~<asm/f˙é.h
>

6 
	#F_SETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 0)

	)

7 
	#F_GETLEASE
 (
F_LINUX_SPECIFIC_BASE
 + 1)

	)

13 
	#F_CANCELLK
 (
F_LINUX_SPECIFIC_BASE
 + 5)

	)

16 
	#F_DUPFD_CLOEXEC
 (
F_LINUX_SPECIFIC_BASE
 + 6)

	)

22 
	#F_NOTIFY
 (
F_LINUX_SPECIFIC_BASE
+2)

	)

27 
	#DN_ACCESS
 0x00000001

	)

28 
	#DN_MODIFY
 0x00000002

	)

29 
	#DN_CREATE
 0x00000004

	)

30 
	#DN_DELETE
 0x00000008

	)

31 
	#DN_RENAME
 0x00000010

	)

32 
	#DN_ATTRIB
 0x00000020

	)

33 
	#DN_MULTISHOT
 0x80000000

	)

35 
	#AT_FDCWD
 -100

	)

38 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

39 
	#AT_REMOVEDIR
 0x200

	)

41 
	#AT_SYMLINK_FOLLOW
 0x400

	)

42 
	#AT_NO_AUTOMOUNT
 0x800

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/blk_ty≥s.h
>

12 
	~<löux/ty≥s.h
>

25 #unde‡
NR_OPEN


26 
	#INR_OPEN_CUR
 1024

	)

27 
	#INR_OPEN_MAX
 4096

	)

29 
	#BLOCK_SIZE_BITS
 10

	)

30 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

32 
	#SEEK_SET
 0

	)

33 
	#SEEK_CUR
 1

	)

34 
	#SEEK_END
 2

	)

35 
	#SEEK_MAX
 
SEEK_END


	)

37 
	sf°rim_ønge
 {

38 
__u64
 
	m°¨t
;

39 
__u64
 
	mÀn
;

40 
__u64
 
	mmöÀn
;

44 
	sfûes_°©_°ru˘
 {

45 
	mƒ_fûes
;

46 
	mƒ_‰ì_fûes
;

47 
	mmax_fûes
;

50 
	söodes_°©_t
 {

51 
	mƒ_öodes
;

52 
	mƒ_unu£d
;

53 
	mdummy
[5];

57 
	#NR_FILE
 8192

	)

59 
	#MAY_EXEC
 1

	)

60 
	#MAY_WRITE
 2

	)

61 
	#MAY_READ
 4

	)

62 
	#MAY_APPEND
 8

	)

63 
	#MAY_ACCESS
 16

	)

64 
	#MAY_OPEN
 32

	)

72 
	#FMODE_READ
 ((
fmode_t
)1)

	)

74 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

76 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

78 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

80 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

82 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

84 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

86 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

89 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

91 
	#FMODE_32BITHASH
 ((
fmode_t
)0x200)

	)

93 
	#FMODE_64BITHASH
 ((
fmode_t
)0x400)

	)

101 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

104 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

162 
	#RW_MASK
 
REQ_WRITE


	)

163 
	#RWA_MASK
 (1 << 
BIO_RW_AHEAD
)

	)

165 
	#READ
 0

	)

166 
	#WRITE
 1

	)

167 
	#READA
 
RWA_MASK


	)

168 
	#SWRITE
 (
WRITE
 | 
READA
)

	)

170 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

171 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

172 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

173 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

174 
	#WRITE_ODIRECT_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
))

	)

175 
	#WRITE_META
 (
WRITE
 | (1 << 
BIO_RW_META
))

	)

176 
	#SWRITE_SYNC_PLUG
 \

177 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

178 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

179 
	#WRITE_BARRIER
 (
WRITE_SYNC
 | (1 << 
BIO_RW_BARRIER
))

	)

181 
	#WRITE_FLUSH
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FLUSH
))

	)

182 
	#WRITE_FUA
 (
WRITE_SYNC
 | (1 << 
BIO_RW_FUA
))

	)

183 
	#WRITE_FLUSH_FUA
 (
WRITE_FLUSH
 | 
WRITE_FUA
)

	)

190 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

191 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

193 
	#SEL_IN
 1

	)

194 
	#SEL_OUT
 2

	)

195 
	#SEL_EX
 4

	)

198 
	#FS_REQUIRES_DEV
 1

	)

199 
	#FS_BINARY_MOUNTDATA
 2

	)

200 
	#FS_HAS_SUBTYPE
 4

	)

201 
	#FS_HAS_NEW_FREEZE
 512

	)

202 
	#FS_REVAL_DOT
 16384

	)

203 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

206 
	#FS_HANDLE_QUOTA
 (1<<16Ë

	)

207 
	#FS_WEAK_REVALIDATE
 (1<<17Ë

	)

214 
	#sb_has_√w_‰ìze
(
sb
Ë((sb)->
s_ty≥
->
fs_Êags
 & 
FS_HAS_NEW_FREEZE
)

	)

219 
	#MS_RDONLY
 1

	)

220 
	#MS_NOSUID
 2

	)

221 
	#MS_NODEV
 4

	)

222 
	#MS_NOEXEC
 8

	)

223 
	#MS_SYNCHRONOUS
 16

	)

224 
	#MS_REMOUNT
 32

	)

225 
	#MS_MANDLOCK
 64

	)

226 
	#MS_DIRSYNC
 128

	)

227 
	#MS_NOATIME
 1024

	)

228 
	#MS_NODIRATIME
 2048

	)

229 
	#MS_BIND
 4096

	)

230 
	#MS_MOVE
 8192

	)

231 
	#MS_REC
 16384

	)

232 
	#MS_VERBOSE
 32768

	)

234 
	#MS_SILENT
 32768

	)

235 
	#MS_POSIXACL
 (1<<16Ë

	)

236 
	#MS_UNBINDABLE
 (1<<17Ë

	)

237 
	#MS_PRIVATE
 (1<<18Ë

	)

238 
	#MS_SLAVE
 (1<<19Ë

	)

239 
	#MS_SHARED
 (1<<20Ë

	)

240 
	#MS_RELATIME
 (1<<21Ë

	)

241 
	#MS_KERNMOUNT
 (1<<22Ë

	)

242 
	#MS_I_VERSION
 (1<<23Ë

	)

243 
	#MS_STRICTATIME
 (1<<24Ë

	)

244 
	#MS_SNAP_STABLE
 (1<<27Ë

	)

245 
	#MS_BORN
 (1<<29)

	)

246 
	#MS_ACTIVE
 (1<<30)

	)

247 
	#MS_NOUSER
 (1<<31)

	)

252 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

257 
	#MS_MGC_VAL
 0xC0ED0000

	)

258 
	#MS_MGC_MSK
 0xffff0000

	)

262 
	#S_SYNC
 1

	)

263 
	#S_NOATIME
 2

	)

264 
	#S_APPEND
 4

	)

265 
	#S_IMMUTABLE
 8

	)

266 
	#S_DEAD
 16

	)

267 
	#S_NOQUOTA
 32

	)

268 
	#S_DIRSYNC
 64

	)

269 
	#S_NOCMTIME
 128

	)

270 
	#S_SWAPFILE
 256

	)

271 
	#S_PRIVATE
 512

	)

272 
	#S_AUTOMOUNT
 2048

	)

273 
	#S_AOP_EXT
 16384

	)

288 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

290 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

291 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

292 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

293 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

294 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

295 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

296 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

297 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

299 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

300 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

301 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

302 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

304 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

305 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

306 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

307 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

308 
	#IS_AUTOMOUNT
(
öode
Ë((öode)->
i_Êags
 & 
S_AUTOMOUNT
)

	)

309 
	#IS_AOP_EXT
(
öode
Ë((öode)->
i_Êags
 & 
S_AOP_EXT
)

	)

314 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

315 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

316 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

317 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

318 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

319 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

320 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

321 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

322 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

323 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

324 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

325 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

327 
	#BLKPG
 
	`_IO
(0x12,105)

	)

331 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

332 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

337 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

338 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

339 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

340 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

341 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

342 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

343 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

344 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

345 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

346 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

347 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

348 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

349 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

351 
	#BMAP_IOCTL
 1

	)

352 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

353 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

354 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

355 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

356 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

358 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

359 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

360 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

361 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

362 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

363 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

364 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

365 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

366 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

371 
	#FS_SECRM_FL
 0x00000001

	)

372 
	#FS_UNRM_FL
 0x00000002

	)

373 
	#FS_COMPR_FL
 0x00000004

	)

374 
	#FS_SYNC_FL
 0x00000008

	)

375 
	#FS_IMMUTABLE_FL
 0x00000010

	)

376 
	#FS_APPEND_FL
 0x00000020

	)

377 
	#FS_NODUMP_FL
 0x00000040

	)

378 
	#FS_NOATIME_FL
 0x00000080

	)

380 
	#FS_DIRTY_FL
 0x00000100

	)

381 
	#FS_COMPRBLK_FL
 0x00000200

	)

382 
	#FS_NOCOMP_FL
 0x00000400

	)

383 
	#FS_ECOMPR_FL
 0x00000800

	)

385 
	#FS_BTREE_FL
 0x00001000

	)

386 
	#FS_INDEX_FL
 0x00001000

	)

387 
	#FS_IMAGIC_FL
 0x00002000

	)

388 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

389 
	#FS_NOTAIL_FL
 0x00008000

	)

390 
	#FS_DIRSYNC_FL
 0x00010000

	)

391 
	#FS_TOPDIR_FL
 0x00020000

	)

392 
	#FS_EXTENT_FL
 0x00080000

	)

393 
	#FS_DIRECTIO_FL
 0x00100000

	)

394 
	#FS_NOCOW_FL
 0x00800000

	)

395 
	#FS_RESERVED_FL
 0x80000000

	)

397 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

398 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

401 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

402 
	#SYNC_FILE_RANGE_WRITE
 2

	)

403 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

10 
	#SI_LOAD_SHIFT
 16

	)

11 
	ssysöfo
 {

12 
	mu±ime
;

13 
	mlﬂds
[3];

14 
	mtŸÆøm
;

15 
	m‰ìøm
;

16 
	msh¨edøm
;

17 
	mbuf„ºam
;

18 
	mtŸÆsw≠
;

19 
	m‰ìsw≠
;

20 
	m¥ocs
;

21 
	m∑d
;

22 
	mtŸÆhigh
;

23 
	m‰ìhigh
;

24 
	mmem_unô
;

25 
	m_f
[20-2*()-()];

29 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

32 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

35 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

36 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

42 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

43 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

46 
	#__FUNCTION__
 (
__func__
)

	)

49 #ifde‡
CONFIG_NUMA


50 
	#NUMA_BUILD
 1

	)

52 
	#NUMA_BUILD
 0

	)

56 #ifde‡
CONFIG_COMPACTION


57 
	#COMPACTION_BUILD
 1

	)

59 
	#COMPACTION_BUILD
 0

	)

63 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


64 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

67 
	gmoduÀ
;

69 
m¨k_h¨dw¨e_unsuµ‹ãd
(c⁄° *
msg
);

70 
m¨k_ãch_¥evõw
(c⁄° *
msg
, 
moduÀ
 *
mod
);

	@/usr/include/linux/poll.h

1 #i‚de‡
_LINUX_POLL_H


2 
	#_LINUX_POLL_H


	)

4 
	~<asm/pﬁl.h
>

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

26 
	#NFDBITS
 
__NFDBITS


	)

28 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

29 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
(fd,fd£ç)

	)

30 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
(fd,fd£ç)

	)

31 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
(fd,fd£ç)

	)

32 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
(fd£ç)

	)

38 
	#ITIMER_REAL
 0

	)

39 
	#ITIMER_VIRTUAL
 1

	)

40 
	#ITIMER_PROF
 2

	)

42 
	sôimî•ec
 {

43 
time•ec
 
	mô_öãrvÆ
;

44 
time•ec
 
	mô_vÆue
;

47 
	sôimîvÆ
 {

48 
timevÆ
 
	mô_öãrvÆ
;

49 
timevÆ
 
	mô_vÆue
;

55 
	#CLOCK_REALTIME
 0

	)

56 
	#CLOCK_MONOTONIC
 1

	)

57 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

58 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

59 
	#CLOCK_MONOTONIC_RAW
 4

	)

60 
	#CLOCK_REALTIME_COARSE
 5

	)

61 
	#CLOCK_MONOTONIC_COARSE
 6

	)

66 
	#CLOCK_SGI_CYCLE
 10

	)

67 
	#MAX_CLOCKS
 16

	)

68 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

69 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

74 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

38 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

39 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

40 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 132640

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

3 
	#RHEL_MAJOR
 6

	)

4 
	#RHEL_MINOR
 5

	)

5 
	#RHEL_RELEASE_VERSION
(
a
,
b
Ë((◊Ë<< 8Ë+ (b))

	)

6 
	#RHEL_RELEASE_CODE
 1541

	)

7 
	#RHEL_RELEASE
 "430"

	)

	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 || deföed 
__LDBL_COMPAT
)

102 #ifde‡
__LDBL_COMPAT


104 #ifde‡
__USE_ISOC99


105 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

106 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

107 #ifde‡
__REDIRECT_NTH


108 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

109 
__∆dbl_√xâow¨df
)

110 
	`__©åibuã__
 ((
__c⁄°__
));

111 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

112 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

114 (
__x
, 
__y
),

115 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #unde‡
__MATHDECL_1


123 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

124 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

125 
¨gs
, 
Æüs
)

	)

126 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

127 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

130 #i‚de‡
_Ml⁄g_doubÀ_


131 
	#_Ml⁄g_doubÀ_
 

	)

133 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

134 #ifde‡
__STDC__


135 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

137 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

139 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

140 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

141 
	~<bôs/m©hˇŒs.h
>

142 #unde‡
_MdoubÀ_


143 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


144 #unde‡
_MdoubÀ_END_NAMESPACE


145 #unde‡
__MATH_PRECNAME


150 #unde‡
__MATHDECL_1


151 #unde‡
__MATHDECL


152 #unde‡
__MATHCALL


155 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


157 
signgam
;

162 #ifde‡
__USE_ISOC99


200 
FP_NAN
,

201 
	#FP_NAN
 
FP_NAN


	)

202 
FP_INFINITE
,

203 
	#FP_INFINITE
 
FP_INFINITE


	)

204 
FP_ZERO
,

205 
	#FP_ZERO
 
FP_ZERO


	)

206 
FP_SUBNORMAL
,

207 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

208 
FP_NORMAL


209 
	#FP_NORMAL
 
FP_NORMAL


	)

213 #ifde‡
__NO_LONG_DOUBLE_MATH


214 
	#Â˛assify
(
x
) \

215 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

217 
	#Â˛assify
(
x
) \

218 ( (
x
) ==  () \

219 ? 
	`__Â˛assifyf
 (
x
) \

220 :  (
x
) ==  () \

221 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

225 #ifde‡
__NO_LONG_DOUBLE_MATH


226 
	#signbô
(
x
) \

227 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

229 
	#signbô
(
x
) \

230 ( (
x
) ==  () \

231 ? 
	`__signbôf
 (
x
) \

232 :  (
x
) ==  () \

233 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

237 #ifde‡
__NO_LONG_DOUBLE_MATH


238 
	#isföôe
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

241 
	#isföôe
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__föôef
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

249 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

253 #ifde‡
__NO_LONG_DOUBLE_MATH


254 
	#i¢™
(
x
) \

255 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

257 
	#i¢™
(
x
) \

258 ( (
x
) ==  () \

259 ? 
	`__i¢™f
 (
x
) \

260 :  (
x
) ==  () \

261 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

265 #ifde‡
__NO_LONG_DOUBLE_MATH


266 
	#isöf
(
x
) \

267 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

269 
	#isöf
(
x
) \

270 ( (
x
) ==  () \

271 ? 
	`__isöff
 (
x
) \

272 :  (
x
) ==  () \

273 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

277 
	#MATH_ERRNO
 1

	)

278 
	#MATH_ERREXCEPT
 2

	)

283 #i‚de‡
__FAST_MATH__


284 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

289 #ifdef 
__USE_MISC


293 
_IEEE_
 = -1,

294 
_SVID_
,

295 
_XOPEN_
,

296 
_POSIX_
,

297 
_ISOC_


298 } 
	t_LIB_VERSION_TYPE
;

303 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

307 #ifde‡
__USE_SVID


313 #ifde‡
__˝lu•lus


314 
__ex˚±i⁄


316 
ex˚±i⁄


319 
ty≥
;

320 *
«me
;

321 
¨g1
;

322 
¨g2
;

323 
ªtvÆ
;

324 
	}
};

326 #ifde‡
__˝lu•lus


327 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

329 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

332 
	#X_TLOSS
 1.41484755040568800000e+16

	)

335 
	#DOMAIN
 1

	)

336 
	#SING
 2

	)

337 
	#OVERFLOW
 3

	)

338 
	#UNDERFLOW
 4

	)

339 
	#TLOSS
 5

	)

340 
	#PLOSS
 6

	)

343 
	#HUGE
 3.40282347e+38F

	)

347 #ifde‡
__USE_XOPEN


349 
	#MAXFLOAT
 3.40282347e+38F

	)

356 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


357 
	#M_E
 2.7182818284590452354

	)

358 
	#M_LOG2E
 1.4426950408889634074

	)

359 
	#M_LOG10E
 0.43429448190325182765

	)

360 
	#M_LN2
 0.69314718055994530942

	)

361 
	#M_LN10
 2.30258509299404568402

	)

362 
	#M_PI
 3.14159265358979323846

	)

363 
	#M_PI_2
 1.57079632679489661923

	)

364 
	#M_PI_4
 0.78539816339744830962

	)

365 
	#M_1_PI
 0.31830988618379067154

	)

366 
	#M_2_PI
 0.63661977236758134308

	)

367 
	#M_2_SQRTPI
 1.12837916709551257390

	)

368 
	#M_SQRT2
 1.41421356237309504880

	)

369 
	#M_SQRT1_2
 0.70710678118654752440

	)

375 #ifde‡
__USE_GNU


376 
	#M_El
 2.7182818284590452353602874713526625L

	)

377 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

378 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

379 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

380 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

381 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

382 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

383 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

384 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

385 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

386 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

387 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

388 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

395 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


396 
	#__NO_MATH_INLINES
 1

	)

399 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

406 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

407 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

408 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

409 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

410 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

411 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

415 #ifde‡
__USE_EXTERN_INLINES


416 
	~<bôs/m©hölöe.h
>

419 #ifde‡
__USE_ISOC99


423 #i‚de‡
isgª©î


424 
	#isgª©î
(
x
, 
y
) \

425 (
__exãnsi⁄__
 \

426 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

427 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

431 #i‚de‡
isgª©îequÆ


432 
	#isgª©îequÆ
(
x
, 
y
) \

433 (
__exãnsi⁄__
 \

434 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

435 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

439 #i‚de‡
i¶ess


440 
	#i¶ess
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

447 #i‚de‡
i¶es£quÆ


448 
	#i¶es£quÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

455 #i‚de‡
i¶essgª©î


456 
	#i¶essgª©î
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

463 #i‚de‡
isun‹dîed


464 
	#isun‹dîed
(
u
, 
v
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

467 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

472 
	g__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

168 #ifde‡
__STDC__


170 
	#°dö
 
°dö


	)

171 
	#°dout
 
°dout


	)

172 
	#°dîr
 
°dîr


	)

175 
__BEGIN_NAMESPACE_STD


177 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

179 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

180 
__END_NAMESPACE_STD


182 #ifde‡
__USE_ATFILE


184 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

185 
__c⁄°
 *
__√w
Ë
__THROW
;

188 
__BEGIN_NAMESPACE_STD


193 #i‚de‡
__USE_FILE_OFFSET64


194 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

196 #ifde‡
__REDIRECT


197 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

199 
	#tmpfûe
 
tmpfûe64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

208 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

209 
__END_NAMESPACE_STD


211 #ifde‡
__USE_MISC


214 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

218 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


226 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

227 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

231 
__BEGIN_NAMESPACE_STD


236 
	`f˛o£
 (
FILE
 *
__°ªam
);

241 
	`fÊush
 (
FILE
 *
__°ªam
);

242 
__END_NAMESPACE_STD


244 #ifde‡
__USE_MISC


251 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

254 #ifde‡
__USE_GNU


261 
	`f˛o£Æl
 ();

265 
__BEGIN_NAMESPACE_STD


266 #i‚de‡
__USE_FILE_OFFSET64


271 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

272 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

277 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

278 
__c⁄°
 *
__ª°ri˘
 
__modes
,

279 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifde‡
__REDIRECT


282 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

283 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

284 
__wur
;

285 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

286 
__c⁄°
 *
__ª°ri˘
 
__modes
,

287 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

288 
__wur
;

290 
	#f›í
 
f›í64


	)

291 
	#‰e›í
 
‰e›í64


	)

294 
__END_NAMESPACE_STD


295 #ifde‡
__USE_LARGEFILE64


296 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

298 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
,

300 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

303 #ifdef 
__USE_POSIX


305 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

308 #ifdef 
__USE_GNU


311 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

312 
__c⁄°
 *
__ª°ri˘
 
__modes
,

313 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

316 #ifde‡
__USE_XOPEN2K8


318 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

319 
__THROW
 
__wur
;

324 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

328 
__BEGIN_NAMESPACE_STD


331 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

335 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

336 
__modes
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifdef 
__USE_BSD


342 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

343 
size_t
 
__size
Ë
__THROW
;

346 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
__BEGIN_NAMESPACE_STD


355 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	$•rötf
 (*
__ª°ri˘
 
__s
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

370 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

371 
_G_va_li°
 
__¨g
);

376 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

378 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

379 
_G_va_li°
 
__¨g
Ë
__THROW
;

380 
__END_NAMESPACE_STD


382 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


383 
__BEGIN_NAMESPACE_C99


385 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

386 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

387 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

389 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

390 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

391 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

392 
__END_NAMESPACE_C99


395 #ifde‡
__USE_GNU


398 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

399 
_G_va_li°
 
__¨g
)

400 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

401 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

402 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

403 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

404 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

405 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

406 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

409 #ifde‡
__USE_XOPEN2K8


416 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

417 
_G_va_li°
 
__¨g
)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

419 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

424 
__BEGIN_NAMESPACE_STD


429 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

430 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

440 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

441 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

442 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

443 #ifde‡
__REDIRECT


447 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

448 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_fsˇnf
Ë
__wur
;

450 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_sˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

453 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

454 
__isoc99_ssˇnf
Ë
__THROW
;

456 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

457 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

458 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

459 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

460 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

461 
	#fsˇnf
 
__isoc99_fsˇnf


	)

462 
	#sˇnf
 
__isoc99_sˇnf


	)

463 
	#ssˇnf
 
__isoc99_ssˇnf


	)

467 
__END_NAMESPACE_STD


469 #ifdef 
__USE_ISOC99


470 
__BEGIN_NAMESPACE_C99


475 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

476 
_G_va_li°
 
__¨g
)

477 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

484 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

489 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

491 #i‡!
deföed
 
__USE_GNU
 \

492 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

493 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

494 #ifde‡
__REDIRECT


498 
	`__REDIRECT
 (
vfsˇnf
,

499 (
FILE
 *
__ª°ri˘
 
__s
,

500 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

501 
__isoc99_vfsˇnf
)

502 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

503 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

504 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

505 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

506 
	`__REDIRECT
 (
vssˇnf
,

507 (
__c⁄°
 *
__ª°ri˘
 
__s
,

508 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

509 
__isoc99_vssˇnf
)

510 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

512 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

513 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

518 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

519 
_G_va_li°
 
__¨g
Ë
__THROW
;

520 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

521 
	#vsˇnf
 
__isoc99_vsˇnf


	)

522 
	#vssˇnf
 
__isoc99_vssˇnf


	)

526 
__END_NAMESPACE_C99


530 
__BEGIN_NAMESPACE_STD


535 
	`fgëc
 (
FILE
 *
__°ªam
);

536 
	`gëc
 (
FILE
 *
__°ªam
);

542 
	`gëch¨
 ();

543 
__END_NAMESPACE_STD


547 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

549 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


554 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

555 
	`gëch¨_u∆ocked
 ();

558 #ifde‡
__USE_MISC


565 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

569 
__BEGIN_NAMESPACE_STD


577 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

578 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

584 
	`putch¨
 (
__c
);

585 
__END_NAMESPACE_STD


589 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

591 #ifde‡
__USE_MISC


598 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

601 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


606 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

607 
	`putch¨_u∆ocked
 (
__c
);

611 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

612 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

614 
	`gëw
 (
FILE
 *
__°ªam
);

617 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

621 
__BEGIN_NAMESPACE_STD


626 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

627 
__wur
;

634 *
	$gës
 (*
__s
Ë
__wur
;

635 
__END_NAMESPACE_STD


637 #ifde‡
__USE_GNU


644 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

649 #ifdef 
__USE_XOPEN2K8


660 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

661 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

662 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

663 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

664 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

665 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

673 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

674 
size_t
 *
__ª°ri˘
 
__n
,

675 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

679 
__BEGIN_NAMESPACE_STD


684 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

690 
	`puts
 (
__c⁄°
 *
__s
);

697 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

704 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

710 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

712 
__END_NAMESPACE_STD


714 #ifde‡
__USE_GNU


721 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

722 
FILE
 *
__ª°ri˘
 
__°ªam
);

725 #ifde‡
__USE_MISC


732 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

734 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
__BEGIN_NAMESPACE_STD


744 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

749 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

754 
	`ªwöd
 (
FILE
 *
__°ªam
);

755 
__END_NAMESPACE_STD


762 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


763 #i‚de‡
__USE_FILE_OFFSET64


768 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

773 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

775 #ifde‡
__REDIRECT


776 
	`__REDIRECT
 (
f£eko
,

777 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

778 
f£eko64
);

779 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

781 
	#f£eko
 
f£eko64


	)

782 
	#·ñlo
 
·ñlo64


	)

787 
__BEGIN_NAMESPACE_STD


788 #i‚de‡
__USE_FILE_OFFSET64


793 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

798 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

800 #ifde‡
__REDIRECT


801 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

802 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

803 
	`__REDIRECT
 (
f£ços
,

804 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

806 
	#fgëpos
 
fgëpos64


	)

807 
	#f£ços
 
f£ços64


	)

810 
__END_NAMESPACE_STD


812 #ifde‡
__USE_LARGEFILE64


813 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

814 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

815 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

816 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

819 
__BEGIN_NAMESPACE_STD


821 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

823 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

825 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

826 
__END_NAMESPACE_STD


828 #ifde‡
__USE_MISC


830 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

831 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 
__BEGIN_NAMESPACE_STD


841 
	`≥º‹
 (
__c⁄°
 *
__s
);

842 
__END_NAMESPACE_STD


848 
	~<bôs/sys_îæi°.h
>

851 #ifdef 
__USE_POSIX


853 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

856 #ifde‡
__USE_MISC


858 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

862 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

863 
deföed
 
__USE_MISC
)

868 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

874 
	`p˛o£
 (
FILE
 *
__°ªam
);

878 #ifdef 
__USE_POSIX


880 *
	$˘îmid
 (*
__s
Ë
__THROW
;

884 #ifde‡
__USE_XOPEN


886 *
	`cu£rid
 (*
__s
);

890 #ifdef 
__USE_GNU


891 
ob°ack
;

894 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

895 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

896 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

897 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

898 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

899 
_G_va_li°
 
__¨gs
)

900 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

904 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


908 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

912 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

915 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


922 
	#__√ed_gë›t


	)

923 
	~<gë›t.h
>

928 #ifde‡
__USE_EXTERN_INLINES


929 
	~<bôs/°dio.h
>

931 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


932 
	~<bôs/°dio2.h
>

934 #ifde‡
__LDBL_COMPAT


935 
	~<bôs/°dio-ldbl.h
>

938 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/poll.h

20 #i‚def 
_SYS_POLL_H


21 
	#_SYS_POLL_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/pﬁl.h
>

27 #ifde‡
__USE_GNU


29 
	~<bôs/sig£t.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

37 
	tnfds_t
;

40 
	spﬁlfd


42 
	mfd
;

43 
	mevíts
;

44 
	mªvíts
;

48 
__BEGIN_DECLS


58 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

60 #ifde‡
__USE_GNU


67 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

68 
__c⁄°
 
time•ec
 *
__timeout
,

69 
__c⁄°
 
__sig£t_t
 *
__ss
);

72 
	g__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

149 #ñi‡
deföed
 
__USE_XOPEN2K


150 
	#S_ISSOCK
(
mode
Ë0

	)

157 #ifdef 
__USE_POSIX199309


158 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

159 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

160 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

166 
	#S_ISUID
 
__S_ISUID


	)

167 
	#S_ISGID
 
__S_ISGID


	)

169 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


171 
	#S_ISVTX
 
__S_ISVTX


	)

174 
	#S_IRUSR
 
__S_IREAD


	)

175 
	#S_IWUSR
 
__S_IWRITE


	)

176 
	#S_IXUSR
 
__S_IEXEC


	)

178 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

180 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


181 
	#S_IREAD
 
S_IRUSR


	)

182 
	#S_IWRITE
 
S_IWUSR


	)

183 
	#S_IEXEC
 
S_IXUSR


	)

186 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

187 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

188 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

190 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

192 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

193 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

194 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

196 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

199 #ifdef 
__USE_BSD


201 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

202 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

203 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

205 
	#S_BLKSIZE
 512

	)

209 #i‚de‡
__USE_FILE_OFFSET64


211 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

212 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

216 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

218 #ifde‡
__REDIRECT_NTH


219 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

220 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

221 
	`__n⁄nuŒ
 ((1, 2));

222 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

223 
	`__n⁄nuŒ
 ((2));

225 
	#°©
 
°©64


	)

226 
	#f°©
 
f°©64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

231 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

232 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

235 #ifde‡
__USE_ATFILE


239 #i‚de‡
__USE_FILE_OFFSET64


240 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

242 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

244 #ifde‡
__REDIRECT_NTH


245 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

246 
°©
 *
__ª°ri˘
 
__buf
,

247 
__Êag
),

248 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

250 
	#f°©©
 
f°©©64


	)

254 #ifde‡
__USE_LARGEFILE64


255 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

256 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

257 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

261 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


262 #i‚de‡
__USE_FILE_OFFSET64


265 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

266 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
l°©
,

270 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

271 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 
	#l°©
 
l°©64


	)

277 #ifde‡
__USE_LARGEFILE64


278 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

279 
°©64
 *
__ª°ri˘
 
__buf
)

280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

286 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_BSD


293 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


299 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

302 #ifde‡
__USE_ATFILE


305 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

306 
__Êag
)

307 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

314 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

316 #ifdef 
__USE_GNU


319 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

323 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

326 #ifde‡
__USE_ATFILE


330 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

331 
__THROW
 
	`__n⁄nuŒ
 ((2));

337 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


338 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1));

341 #ifde‡
__USE_ATFILE


345 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

346 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

352 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 #ifde‡
__USE_ATFILE


359 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

360 
__THROW
 
	`__n⁄nuŒ
 ((2));

363 #ifde‡
__USE_ATFILE


366 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

367 
__c⁄°
 
time•ec
 
__times
[2],

368 
__Êags
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2));

372 #ifde‡
__USE_XOPEN2K8


374 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

392 #i‚de‡
_STAT_VER


393 
	#_STAT_VER
 0

	)

395 #i‚de‡
_MKNOD_VER


396 
	#_MKNOD_VER
 0

	)

400 #i‚de‡
__USE_FILE_OFFSET64


401 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

402 
__THROW
 
	`__n⁄nuŒ
 ((3));

403 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

407 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

408 
°©
 *
__°©_buf
, 
__Êag
)

409 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

411 #ifde‡
__REDIRECT_NTH


412 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

413 
°©
 *
__°©_buf
), 
__fx°©64
)

414 
	`__n⁄nuŒ
 ((3));

415 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__x°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

419 
°©
 *
__°©_buf
), 
__lx°©64
)

420 
	`__n⁄nuŒ
 ((2, 3));

421 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

422 
__c⁄°
 *
__fûíame
,

423 
°©
 *
__°©_buf
, 
__Êag
),

424 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

427 
	#__fx°©
 
__fx°©64


	)

428 
	#__x°©
 
__x°©64


	)

429 
	#__lx°©
 
__lx°©64


	)

433 #ifde‡
__USE_LARGEFILE64


434 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

435 
__THROW
 
	`__n⁄nuŒ
 ((3));

436 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

441 
°©64
 *
__°©_buf
, 
__Êag
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

444 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

445 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

447 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

448 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

449 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

451 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


454 
__exã∫_ölöe
 

455 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

457  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

458 
	}
}

460 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 
__exã∫_ölöe
 

462 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

464  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

465 
	}
}

468 
__exã∫_ölöe
 

469 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

471  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

472 
	}
}

474 #ifde‡
__USE_ATFILE


475 
__exã∫_ölöe
 

476 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

477 
__Êag
))

479  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

480 
	}
}

483 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


484 
__exã∫_ölöe
 

485 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

487  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

488 
	}
}

491 #ifde‡
__USE_ATFILE


492 
__exã∫_ölöe
 

493 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

494 
__dev_t
 
__dev
))

496  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

497 
	}
}

500 #i‡
deföed
 
__USE_LARGEFILE64
 \

501 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

502 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

503 
__exã∫_ölöe
 

504 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

506  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

507 
	}
}

509 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


510 
__exã∫_ölöe
 

511 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

513  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

514 
	}
}

517 
__exã∫_ölöe
 

518 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

520  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

521 
	}
}

523 #ifde‡
__USE_ATFILE


524 
__exã∫_ölöe
 

525 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

526 
__Êag
))

528  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

529 
	}
}

536 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1028 #ifde‡
__REDIRECT_NTH


1029 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1030 
·runˇã64
Ë
__wur
;

1032 
	#·runˇã
 
·runˇã64


	)

1035 #ifde‡
__USE_LARGEFILE64


1036 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1043 || 
deföed
 
__USE_MISC


1047 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1053 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1057 #ifde‡
__USE_MISC


1068 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1073 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1085 
	#F_ULOCK
 0

	)

1086 
	#F_LOCK
 1

	)

1087 
	#F_TLOCK
 2

	)

1088 
	#F_TEST
 3

	)

1090 #i‚de‡
__USE_FILE_OFFSET64


1091 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1093 #ifde‡
__REDIRECT


1094 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1095 
lockf64
Ë
__wur
;

1097 
	#lockf
 
lockf64


	)

1100 #ifde‡
__USE_LARGEFILE64


1101 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1106 #ifde‡
__USE_GNU


1111 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1112 (
__exãnsi⁄__
 \

1113 ({ 
__ªsu…
; \

1114 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1115 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1116 
__ªsu…
; 
	}
}))

	)

1119 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1122 
fd©async
 (
__fûdes
);

1128 #ifdef 
__USE_XOPEN


1130 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1135 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1142 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1143 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1151 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1156 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1157 
	~<bôs/uni°d.h
>

1160 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/fcntl.h

1 
	~<asm-gíîic/f˙é.h
>

	@/usr/include/asm/poll.h

1 
	~<asm-gíîic/pﬁl.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

673 
	m_CS_V6_ENV
,

674 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

675 
	m_CS_V7_ENV


676 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

27 #ifde‡
__USE_GNU


28 
	~<bôs/uio.h
>

34 
	#O_ACCMODE
 0003

	)

35 
	#O_RDONLY
 00

	)

36 
	#O_WRONLY
 01

	)

37 
	#O_RDWR
 02

	)

38 
	#O_CREAT
 0100

	)

39 
	#O_EXCL
 0200

	)

40 
	#O_NOCTTY
 0400

	)

41 
	#O_TRUNC
 01000

	)

42 
	#O_APPEND
 02000

	)

43 
	#O_NONBLOCK
 04000

	)

44 
	#O_NDELAY
 
O_NONBLOCK


	)

45 
	#O_SYNC
 04010000

	)

46 
	#O_FSYNC
 
O_SYNC


	)

47 
	#O_ASYNC
 020000

	)

49 #ifde‡
__USE_XOPEN2K8


50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_CLOEXEC
 02000000

	)

54 #ifde‡
__USE_GNU


55 
	#O_DIRECT
 040000

	)

56 
	#O_NOATIME
 01000000

	)

62 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


63 
	#O_DSYNC
 010000

	)

64 
	#O_RSYNC
 
O_SYNC


	)

67 #ifde‡
__USE_LARGEFILE64


68 #i‡
__WORDSIZE
 == 64

69 
	#O_LARGEFILE
 0

	)

71 
	#O_LARGEFILE
 0100000

	)

76 
	#F_DUPFD
 0

	)

77 
	#F_GETFD
 1

	)

78 
	#F_SETFD
 2

	)

79 
	#F_GETFL
 3

	)

80 
	#F_SETFL
 4

	)

81 #i‡
__WORDSIZE
 == 64

82 
	#F_GETLK
 5

	)

83 
	#F_SETLK
 6

	)

84 
	#F_SETLKW
 7

	)

86 
	#F_GETLK64
 5

	)

87 
	#F_SETLK64
 6

	)

88 
	#F_SETLKW64
 7

	)

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	#F_GETLK
 5

	)

92 
	#F_SETLK
 6

	)

93 
	#F_SETLKW
 7

	)

95 
	#F_GETLK
 
F_GETLK64


	)

96 
	#F_SETLK
 
F_SETLK64


	)

97 
	#F_SETLKW
 
F_SETLKW64


	)

99 
	#F_GETLK64
 12

	)

100 
	#F_SETLK64
 13

	)

101 
	#F_SETLKW64
 14

	)

104 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


105 
	#F_SETOWN
 8

	)

106 
	#F_GETOWN
 9

	)

109 #ifde‡
__USE_GNU


110 
	#F_SETSIG
 10

	)

111 
	#F_GETSIG
 11

	)

112 
	#F_SETOWN_EX
 15

	)

113 
	#F_GETOWN_EX
 16

	)

116 #ifde‡
__USE_GNU


117 
	#F_SETLEASE
 1024

	)

118 
	#F_GETLEASE
 1025

	)

119 
	#F_NOTIFY
 1026

	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#F_DUPFD_CLOEXEC
 1030

	)

127 
	#FD_CLOEXEC
 1

	)

130 
	#F_RDLCK
 0

	)

131 
	#F_WRLCK
 1

	)

132 
	#F_UNLCK
 2

	)

135 
	#F_EXLCK
 4

	)

136 
	#F_SHLCK
 8

	)

138 #ifde‡
__USE_BSD


140 
	#LOCK_SH
 1

	)

141 
	#LOCK_EX
 2

	)

142 
	#LOCK_NB
 4

	)

144 
	#LOCK_UN
 8

	)

147 #ifde‡
__USE_GNU


148 
	#LOCK_MAND
 32

	)

149 
	#LOCK_READ
 64

	)

150 
	#LOCK_WRITE
 128

	)

151 
	#LOCK_RW
 192

	)

154 #ifde‡
__USE_GNU


156 
	#DN_ACCESS
 0x00000001

	)

157 
	#DN_MODIFY
 0x00000002

	)

158 
	#DN_CREATE
 0x00000004

	)

159 
	#DN_DELETE
 0x00000008

	)

160 
	#DN_RENAME
 0x00000010

	)

161 
	#DN_ATTRIB
 0x00000020

	)

162 
	#DN_MULTISHOT
 0x80000000

	)

165 
	sÊock


167 
	ml_ty≥
;

168 
	ml_whí˚
;

169 #i‚de‡
__USE_FILE_OFFSET64


170 
__off_t
 
	ml_°¨t
;

171 
__off_t
 
	ml_Àn
;

173 
__off64_t
 
	ml_°¨t
;

174 
__off64_t
 
	ml_Àn
;

176 
__pid_t
 
	ml_pid
;

179 #ifde‡
__USE_LARGEFILE64


180 
	sÊock64


182 
	ml_ty≥
;

183 
	ml_whí˚
;

184 
__off64_t
 
	ml_°¨t
;

185 
__off64_t
 
	ml_Àn
;

186 
__pid_t
 
	ml_pid
;

190 #ifde‡
__USE_GNU


192 
	e__pid_ty≥


194 
	mF_OWNER_TID
 = 0,

195 
	mF_OWNER_PID
,

196 
	mF_OWNER_PGRP
,

197 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


201 
	sf_ow√r_ex


203 
__pid_ty≥
 
	mty≥
;

204 
__pid_t
 
	mpid
;

210 #ifdef 
__USE_BSD


211 
	#FAPPEND
 
O_APPEND


	)

212 
	#FFSYNC
 
O_FSYNC


	)

213 
	#FASYNC
 
O_ASYNC


	)

214 
	#FNONBLOCK
 
O_NONBLOCK


	)

215 
	#FNDELAY
 
O_NDELAY


	)

219 #ifde‡
__USE_XOPEN2K


220 
	#POSIX_FADV_NORMAL
 0

	)

221 
	#POSIX_FADV_RANDOM
 1

	)

222 
	#POSIX_FADV_SEQUENTIAL
 2

	)

223 
	#POSIX_FADV_WILLNEED
 3

	)

224 
	#POSIX_FADV_DONTNEED
 4

	)

225 
	#POSIX_FADV_NOREUSE
 5

	)

229 #ifde‡
__USE_GNU


231 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

234 
	#SYNC_FILE_RANGE_WRITE
 2

	)

237 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

242 
	#SPLICE_F_MOVE
 1

	)

243 
	#SPLICE_F_NONBLOCK
 2

	)

246 
	#SPLICE_F_MORE
 4

	)

247 
	#SPLICE_F_GIFT
 8

	)

250 
	g__BEGIN_DECLS


252 #ifde‡
__USE_GNU


255 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

256 
__THROW
;

260 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

261 
__Êags
);

265 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

266 
size_t
 
__cou¡
, 
__Êags
);

269 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

270 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

271 
__Êags
);

274 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

275 
__Êags
);

278 #i‚de‡
__USE_FILE_OFFSET64


279 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

281 #ifde‡
__REDIRECT


282 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

283 
__off64_t
 
__Àn
),

284 
ÁŒoˇã64
);

286 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

289 #ifde‡
__USE_LARGEFILE64


290 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
);

295 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 
	#HUGE_VALL
 ((Ë
HUGE_VAL
)

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 
	~<bôs/w‹dsize.h
>

28 #i‡
__WORDSIZE
 =64 || (
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

31 
	tÊﬂt_t
;

32 
	tdoubÀ_t
;

38 
	tÊﬂt_t
;

40 
	tdoubÀ_t
;

45 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

46 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

21 #i‚de‡
_MATH_H


25 
	~<bôs/w‹dsize.h
>

27 #i‚de‡
__exã∫_ölöe


28 
	#__MATH_INLINE
 
__ölöe


	)

30 
	#__MATH_INLINE
 
__exã∫_ölöe


	)

34 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

37 
__MATH_INLINE
 

38 
__NTH
 (
	$__signbôf
 (
__x
))

40 #i‡
__WORDSIZE
 == 32

41 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

42  
__u
.
__i
 < 0;

44 
__m
;

45 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

46  
__m
 & 0x8;

48 
	}
}

49 
__MATH_INLINE
 

50 
__NTH
 (
	$__signbô
 (
__x
))

52 #i‡
__WORDSIZE
 == 32

53 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

54  
__u
.
__i
[1] < 0;

56 
__m
;

57 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

58  
__m
 & 0x80;

60 
	}
}

61 
__MATH_INLINE
 

62 
__NTH
 (
	$__signbôl
 (
__x
))

64 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

65  (
__u
.
__i
[2] & 0x8000) != 0;

66 
	}
}

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/poll.h

19 #i‚de‡
_SYS_POLL_H


26 
	#POLLIN
 0x001

	)

27 
	#POLLPRI
 0x002

	)

28 
	#POLLOUT
 0x004

	)

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


32 
	#POLLRDNORM
 0x040

	)

33 
	#POLLRDBAND
 0x080

	)

34 
	#POLLWRNORM
 0x100

	)

35 
	#POLLWRBAND
 0x200

	)

38 #ifde‡
__USE_GNU


40 
	#POLLMSG
 0x400

	)

41 
	#POLLREMOVE
 0x1000

	)

42 
	#POLLRDHUP
 0x2000

	)

48 
	#POLLERR
 0x008

	)

49 
	#POLLHUP
 0x010

	)

50 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

61 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


62 
	#SA_RESTART
 0x10000000

	)

63 
	#SA_NODEFER
 0x40000000

	)

65 
	#SA_RESETHAND
 0x80000000

	)

67 #ifde‡
__USE_MISC


68 
	#SA_INTERRUPT
 0x20000000

	)

71 
	#SA_NOMASK
 
SA_NODEFER


	)

72 
	#SA_ONESHOT
 
SA_RESETHAND


	)

73 
	#SA_STACK
 
SA_ONSTACK


	)

77 
	#SIG_BLOCK
 0

	)

78 
	#SIG_UNBLOCK
 1

	)

79 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

19 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_STAT_H


24 
	#_BITS_STAT_H
 1

	)

27 
	#_STAT_VER_KERNEL
 0

	)

29 #i‡
__WORDSIZE
 == 32

30 
	#_STAT_VER_SVR4
 2

	)

31 
	#_STAT_VER_LINUX
 3

	)

34 
	#_MKNOD_VER_LINUX
 1

	)

35 
	#_MKNOD_VER_SVR4
 2

	)

36 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‡
__WORDSIZE
 == 32

50 
	m__∑d1
;

52 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‡
__WORDSIZE
 == 32

58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #i‡
__WORDSIZE
 == 64

67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‡
__WORDSIZE
 == 32

71 
	m__∑d2
;

73 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
	m°_˘imí£c
;

105 #i‡
__WORDSIZE
 == 64

106 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #i‡
__WORDSIZE
 == 64

123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #i‡
__WORDSIZE
 == 64

135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

155 
	#°_©ime
 
°_©im
.
tv_£c


	)

156 
	#°_mtime
 
°_mtim
.
tv_£c


	)

157 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

159 
__time_t
 
	m°_©ime
;

160 
	m°_©imí£c
;

161 
__time_t
 
	m°_mtime
;

162 
	m°_mtimí£c
;

163 
__time_t
 
	m°_˘ime
;

164 
	m°_˘imí£c
;

166 #i‡
__WORDSIZE
 == 64

167 
	m__unu£d
[3];

169 
__öo64_t
 
	m°_öo
;

175 
	#_STATBUF_ST_BLKSIZE


	)

176 
	#_STATBUF_ST_RDEV


	)

178 
	#_STATBUF_ST_NSEC


	)

182 
	#__S_IFMT
 0170000

	)

185 
	#__S_IFDIR
 0040000

	)

186 
	#__S_IFCHR
 0020000

	)

187 
	#__S_IFBLK
 0060000

	)

188 
	#__S_IFREG
 0100000

	)

189 
	#__S_IFIFO
 0010000

	)

190 
	#__S_IFLNK
 0120000

	)

191 
	#__S_IFSOCK
 0140000

	)

195 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

196 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

197 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

201 
	#__S_ISUID
 04000

	)

202 
	#__S_ISGID
 02000

	)

203 
	#__S_ISVTX
 01000

	)

204 
	#__S_IREAD
 0400

	)

205 
	#__S_IWRITE
 0200

	)

206 
	#__S_IEXEC
 0100

	)

208 #ifde‡
__USE_ATFILE


209 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

210 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__Àn
))

58  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

59 
	}
}

61 #ifde‡
__USE_GNU


62 
__exã∫_Æways_ölöe
 *

63 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

64 
size_t
 
__Àn
))

66  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

67 
	}
}

76 
__exã∫_Æways_ölöe
 *

77 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

93 
	}
}

95 
__exã∫_Æways_ölöe
 

96 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

99 
	}
}

102 
__exã∫_Æways_ölöe
 *

103 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

105  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

106 
	}
}

108 #ifde‡
__USE_GNU


109 
__exã∫_Æways_ölöe
 *

110 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

112  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

113 
	}
}

117 
__exã∫_Æways_ölöe
 *

118 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

119 
size_t
 
__Àn
))

121  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

122 
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

126 
size_t
 
__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128 
__c⁄°
 *
__§c
,

129 
size_t
 
__n
), 
°≤˝y
);

131 
__exã∫_Æways_ölöe
 *

132 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

137  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

138 
	}
}

141 
__exã∫_Æways_ölöe
 *

142 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

144  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

145 
	}
}

148 
__exã∫_Æways_ölöe
 *

149 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

150 
size_t
 
__Àn
))

152  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

153 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡!
__GNUC_PREREQ
 (4, 1)

313 #ifde‡
__GNUC_RH_RELEASE__


314 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


316 
	#__USE_FORTIFY_LEVEL
 0

	)

317 #ñi‡
_FORTIFY_SOURCE
 > 1

318 
	#__USE_FORTIFY_LEVEL
 2

	)

320 
	#__USE_FORTIFY_LEVEL
 1

	)

323 
	#__USE_FORTIFY_LEVEL
 0

	)

327 
	#__STDC_IEC_559__
 1

	)

328 
	#__STDC_IEC_559_COMPLEX__
 1

	)

331 
	#__STDC_ISO_10646__
 200009L

	)

339 #unde‡
__GNU_LIBRARY__


340 
	#__GNU_LIBRARY__
 6

	)

344 
	#__GLIBC__
 2

	)

345 
	#__GLIBC_MINOR__
 12

	)

347 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

348 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

351 #i‡
deföed
 
__GNUC__
 \

352 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

353 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

354 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

355 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

359 #i‚de‡
__ASSEMBLER__


360 #i‚de‡
_SYS_CDEFS_H


361 
	~<sys/cdefs.h
>

366 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


367 
	#__USE_LARGEFILE
 1

	)

368 
	#__USE_LARGEFILE64
 1

	)

374 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

375 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

376 && 
deföed
 
	g__exã∫_ölöe


377 
	#__USE_EXTERN_INLINES
 1

	)

385 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/blk_types.h

5 #i‚de‡
__LINUX_BLK_TYPES_H


6 
	#__LINUX_BLK_TYPES_H


	)

8 #ifde‡
CONFIG_BLOCK


10 
	~<löux/ty≥s.h
>

15 
	#BIO_UPTODATE
 0

	)

16 
	#BIO_RW_BLOCK
 1

	)

17 
	#BIO_EOF
 2

	)

18 
	#BIO_SEG_VALID
 3

	)

19 
	#BIO_CLONED
 4

	)

20 
	#BIO_BOUNCED
 5

	)

21 
	#BIO_USER_MAPPED
 6

	)

22 
	#BIO_EOPNOTSUPP
 7

	)

23 
	#BIO_CPU_AFFINE
 8

	)

24 
	#BIO_NULL_MAPPED
 9

	)

25 
	#BIO_FS_INTEGRITY
 10

	)

26 
	#BIO_QUIET
 11

	)

27 
	#BIO_MAPPED_INTEGRITY
 12

	)

28 
	#bio_Êagged
(
bio
, 
Êag
Ë((bio)->
bi_Êags
 & (1 << (Êag)))

	)

33 
	#BIO_POOL_BITS
 (4)

	)

34 
	#BIO_POOL_NONE
 ((1UL << 
BIO_POOL_BITS
Ë- 1)

	)

35 
	#BIO_POOL_OFFSET
 (
BITS_PER_LONG
 - 
BIO_POOL_BITS
)

	)

36 
	#BIO_POOL_MASK
 (1UL << 
BIO_POOL_OFFSET
)

	)

37 
	#BIO_POOL_IDX
(
bio
Ë((bio)->
bi_Êags
 >> 
BIO_POOL_OFFSET
)

	)

68 
	ebio_rw_Êags
 {

69 
	mBIO_RW
,

70 
	mBIO_RW_FAILFAST_DEV
,

71 
	mBIO_RW_FAILFAST_TRANSPORT
,

72 
	mBIO_RW_FAILFAST_DRIVER
,

74 
	mBIO_RW_AHEAD
,

75 
	mBIO_RW_BARRIER
,

76 
	mBIO_RW_SYNCIO
,

77 
	mBIO_RW_UNPLUG
,

78 
	mBIO_RW_META
,

79 
	mBIO_RW_DISCARD
,

80 
	mBIO_RW_NOIDLE
,

85 
	mBIO_RW_FLUSH
,

86 
	mBIO_RW_FUA
,

91 
	mBIO_RW_THROTTLED
,

94 
	#BIO_FLUSH
 (1 << 
BIO_RW_FLUSH
)

	)

95 
	#BIO_FUA
 (1 << 
BIO_RW_FUA
)

	)

96 
	#BIO_DISCARD
 (1 << 
BIO_RW_DISCARD
)

	)

99 
	#BIO_NOMERGE_FLAGS
 \

100 ((1 << 
BIO_RW_BARRIER
Ë| 
BIO_FLUSH
 | 
BIO_FUA
)

	)

105 
	erq_Êag_bôs
 {

106 
	m__REQ_WRITE
,

107 
	m__REQ_FAILFAST_DEV
,

108 
	m__REQ_FAILFAST_TRANSPORT
,

109 
	m__REQ_FAILFAST_DRIVER
,

111 
	m__REQ_DISCARD
,

112 
	m__REQ_SORTED
,

113 
	m__REQ_SOFTBARRIER
,

114 
	m__REQ_HARDBARRIER
,

115 
	m__REQ_FUA
,

116 
	m__REQ_NOMERGE
,

117 
	m__REQ_STARTED
,

118 
	m__REQ_DONTPREP
,

119 
	m__REQ_QUEUED
,

120 
	m__REQ_ELVPRIV
,

121 
	m__REQ_FAILED
,

122 
	m__REQ_QUIET
,

123 
	m__REQ_PREEMPT
,

124 
	m__REQ_ORDERED_COLOR
,

125 
	m__REQ_SYNC
,

126 
	m__REQ_ALLOCED
,

127 
	m__REQ_META
,

128 
	m__REQ_COPY_USER
,

129 
	m__REQ_INTEGRITY
,

130 
	m__REQ_NOIDLE
,

131 
	m__REQ_IO_STAT
,

132 
	m__REQ_MIXED_MERGE
,

133 
	m__REQ_FLUSH
,

134 
	m__REQ_FLUSH_SEQ
,

135 
	m__REQ_NR_BITS
,

138 
	#REQ_WRITE
 (1 << 
__REQ_WRITE
)

	)

139 
	#REQ_RW
 
REQ_WRITE


	)

141 
	#REQ_FAILFAST_DEV
 (1 << 
__REQ_FAILFAST_DEV
)

	)

142 
	#REQ_FAILFAST_TRANSPORT
 (1 << 
__REQ_FAILFAST_TRANSPORT
)

	)

143 
	#REQ_FAILFAST_DRIVER
 (1 << 
__REQ_FAILFAST_DRIVER
)

	)

144 
	#REQ_HARDBARRIER
 (1 << 
__REQ_HARDBARRIER
)

	)

146 
	#REQ_SYNC
 (1 << 
__REQ_SYNC
)

	)

147 
	#REQ_RW_SYNC
 
REQ_SYNC


	)

149 
	#REQ_META
 (1 << 
__REQ_META
)

	)

150 
	#REQ_RW_META
 
REQ_META


	)

152 
	#REQ_DISCARD
 (1 << 
__REQ_DISCARD
)

	)

153 
	#REQ_NOIDLE
 (1 << 
__REQ_NOIDLE
)

	)

155 
	#REQ_FAILFAST_MASK
 \

156 (
REQ_FAILFAST_DEV
 | 
REQ_FAILFAST_TRANSPORT
 | 
REQ_FAILFAST_DRIVER
)

	)

157 
	#REQ_COMMON_MASK
 \

158 (
REQ_WRITE
 | 
REQ_FAILFAST_MASK
 | 
REQ_HARDBARRIER
 | 
REQ_SYNC
 | \

159 
REQ_META
 | 
REQ_DISCARD
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

160 
	#REQ_CLONE_MASK
 
REQ_COMMON_MASK


	)

163 
	#REQ_NOMERGE_FLAGS
 \

164 (
REQ_NOMERGE
 | 
REQ_STARTED
 | 
REQ_HARDBARRIER
 | 
REQ_SOFTBARRIER
 | 
REQ_FLUSH
 | 
REQ_FUA
)

	)

166 
	#REQ_SORTED
 (1 << 
__REQ_SORTED
)

	)

167 
	#REQ_SOFTBARRIER
 (1 << 
__REQ_SOFTBARRIER
)

	)

168 
	#REQ_FUA
 (1 << 
__REQ_FUA
)

	)

169 
	#REQ_NOMERGE
 (1 << 
__REQ_NOMERGE
)

	)

170 
	#REQ_STARTED
 (1 << 
__REQ_STARTED
)

	)

171 
	#REQ_DONTPREP
 (1 << 
__REQ_DONTPREP
)

	)

172 
	#REQ_QUEUED
 (1 << 
__REQ_QUEUED
)

	)

173 
	#REQ_ELVPRIV
 (1 << 
__REQ_ELVPRIV
)

	)

174 
	#REQ_FAILED
 (1 << 
__REQ_FAILED
)

	)

175 
	#REQ_QUIET
 (1 << 
__REQ_QUIET
)

	)

176 
	#REQ_PREEMPT
 (1 << 
__REQ_PREEMPT
)

	)

177 
	#REQ_ORDERED_COLOR
 (1 << 
__REQ_ORDERED_COLOR
Ë

	)

178 
	#REQ_ALLOCED
 (1 << 
__REQ_ALLOCED
)

	)

179 
	#REQ_COPY_USER
 (1 << 
__REQ_COPY_USER
)

	)

180 
	#REQ_INTEGRITY
 (1 << 
__REQ_INTEGRITY
)

	)

181 
	#REQ_FLUSH
 (1 << 
__REQ_FLUSH
)

	)

182 
	#REQ_FLUSH_SEQ
 (1 << 
__REQ_FLUSH_SEQ
)

	)

183 
	#REQ_IO_STAT
 (1 << 
__REQ_IO_STAT
)

	)

184 
	#REQ_MIXED_MERGE
 (1 << 
__REQ_MIXED_MERGE
)

	)

186 
	#REQ_WRITE_FLUSH
 (
REQ_WRITE
 | 
REQ_SYNC
 | 
REQ_NOIDLE
 | 
REQ_FLUSH
)

	)

	@/usr/include/linux/i2c.h

26 #i‚de‡
_LINUX_I2C_H


27 
	#_LINUX_I2C_H


	)

29 
	~<löux/ty≥s.h
>

67 
	si2c_msg
 {

68 
__u16
 
	maddr
;

69 
__u16
 
	mÊags
;

70 
	#I2C_M_TEN
 0x0010

	)

71 
	#I2C_M_RD
 0x0001

	)

72 
	#I2C_M_NOSTART
 0x4000

	)

73 
	#I2C_M_REV_DIR_ADDR
 0x2000

	)

74 
	#I2C_M_IGNORE_NAK
 0x1000

	)

75 
	#I2C_M_NO_RD_ACK
 0x0800

	)

76 
	#I2C_M_RECV_LEN
 0x0400

	)

77 
__u16
 
	mÀn
;

78 
__u8
 *
	mbuf
;

83 
	#I2C_FUNC_I2C
 0x00000001

	)

84 
	#I2C_FUNC_10BIT_ADDR
 0x00000002

	)

85 
	#I2C_FUNC_PROTOCOL_MANGLING
 0x00000004

	)

86 
	#I2C_FUNC_SMBUS_PEC
 0x00000008

	)

87 
	#I2C_FUNC_SMBUS_BLOCK_PROC_CALL
 0x00008000

	)

88 
	#I2C_FUNC_SMBUS_QUICK
 0x00010000

	)

89 
	#I2C_FUNC_SMBUS_READ_BYTE
 0x00020000

	)

90 
	#I2C_FUNC_SMBUS_WRITE_BYTE
 0x00040000

	)

91 
	#I2C_FUNC_SMBUS_READ_BYTE_DATA
 0x00080000

	)

92 
	#I2C_FUNC_SMBUS_WRITE_BYTE_DATA
 0x00100000

	)

93 
	#I2C_FUNC_SMBUS_READ_WORD_DATA
 0x00200000

	)

94 
	#I2C_FUNC_SMBUS_WRITE_WORD_DATA
 0x00400000

	)

95 
	#I2C_FUNC_SMBUS_PROC_CALL
 0x00800000

	)

96 
	#I2C_FUNC_SMBUS_READ_BLOCK_DATA
 0x01000000

	)

97 
	#I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 0x02000000

	)

98 
	#I2C_FUNC_SMBUS_READ_I2C_BLOCK
 0x04000000

	)

99 
	#I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
 0x08000000

	)

101 
	#I2C_FUNC_SMBUS_BYTE
 (
I2C_FUNC_SMBUS_READ_BYTE
 | \

102 
I2C_FUNC_SMBUS_WRITE_BYTE
)

	)

103 
	#I2C_FUNC_SMBUS_BYTE_DATA
 (
I2C_FUNC_SMBUS_READ_BYTE_DATA
 | \

104 
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
)

	)

105 
	#I2C_FUNC_SMBUS_WORD_DATA
 (
I2C_FUNC_SMBUS_READ_WORD_DATA
 | \

106 
I2C_FUNC_SMBUS_WRITE_WORD_DATA
)

	)

107 
	#I2C_FUNC_SMBUS_BLOCK_DATA
 (
I2C_FUNC_SMBUS_READ_BLOCK_DATA
 | \

108 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
)

	)

109 
	#I2C_FUNC_SMBUS_I2C_BLOCK
 (
I2C_FUNC_SMBUS_READ_I2C_BLOCK
 | \

110 
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
)

	)

112 
	#I2C_FUNC_SMBUS_EMUL
 (
I2C_FUNC_SMBUS_QUICK
 | \

113 
I2C_FUNC_SMBUS_BYTE
 | \

114 
I2C_FUNC_SMBUS_BYTE_DATA
 | \

115 
I2C_FUNC_SMBUS_WORD_DATA
 | \

116 
I2C_FUNC_SMBUS_PROC_CALL
 | \

117 
I2C_FUNC_SMBUS_WRITE_BLOCK_DATA
 | \

118 
I2C_FUNC_SMBUS_I2C_BLOCK
 | \

119 
I2C_FUNC_SMBUS_PEC
)

	)

124 
	#I2C_SMBUS_BLOCK_MAX
 32

	)

125 
	ui2c_smbus_d©a
 {

126 
__u8
 
	mbyã
;

127 
__u16
 
	mw‹d
;

128 
__u8
 
	mblock
[
I2C_SMBUS_BLOCK_MAX
 + 2];

133 
	#I2C_SMBUS_READ
 1

	)

134 
	#I2C_SMBUS_WRITE
 0

	)

138 
	#I2C_SMBUS_QUICK
 0

	)

139 
	#I2C_SMBUS_BYTE
 1

	)

140 
	#I2C_SMBUS_BYTE_DATA
 2

	)

141 
	#I2C_SMBUS_WORD_DATA
 3

	)

142 
	#I2C_SMBUS_PROC_CALL
 4

	)

143 
	#I2C_SMBUS_BLOCK_DATA
 5

	)

144 
	#I2C_SMBUS_I2C_BLOCK_BROKEN
 6

	)

145 
	#I2C_SMBUS_BLOCK_PROC_CALL
 7

	)

146 
	#I2C_SMBUS_I2C_BLOCK_DATA
 8

	)

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/fcntl.h

1 #i‚de‡
_ASM_GENERIC_FCNTL_H


2 
	#_ASM_GENERIC_FCNTL_H


	)

4 
	~<löux/ty≥s.h
>

8 
	#O_ACCMODE
 00000003

	)

9 
	#O_RDONLY
 00000000

	)

10 
	#O_WRONLY
 00000001

	)

11 
	#O_RDWR
 00000002

	)

12 #i‚de‡
O_CREAT


13 
	#O_CREAT
 00000100

	)

15 #i‚de‡
O_EXCL


16 
	#O_EXCL
 00000200

	)

18 #i‚de‡
O_NOCTTY


19 
	#O_NOCTTY
 00000400

	)

21 #i‚de‡
O_TRUNC


22 
	#O_TRUNC
 00001000

	)

24 #i‚de‡
O_APPEND


25 
	#O_APPEND
 00002000

	)

27 #i‚de‡
O_NONBLOCK


28 
	#O_NONBLOCK
 00004000

	)

30 #i‚de‡
O_SYNC


31 
	#O_SYNC
 00010000

	)

33 #i‚de‡
FASYNC


34 
	#FASYNC
 00020000

	)

36 #i‚de‡
O_DIRECT


37 
	#O_DIRECT
 00040000

	)

39 #i‚de‡
O_LARGEFILE


40 
	#O_LARGEFILE
 00100000

	)

42 #i‚de‡
O_DIRECTORY


43 
	#O_DIRECTORY
 00200000

	)

45 #i‚de‡
O_NOFOLLOW


46 
	#O_NOFOLLOW
 00400000

	)

48 #i‚de‡
O_NOATIME


49 
	#O_NOATIME
 01000000

	)

51 #i‚de‡
O_CLOEXEC


52 
	#O_CLOEXEC
 02000000

	)

54 #i‚de‡
O_NDELAY


55 
	#O_NDELAY
 
O_NONBLOCK


	)

58 
	#F_DUPFD
 0

	)

59 
	#F_GETFD
 1

	)

60 
	#F_SETFD
 2

	)

61 
	#F_GETFL
 3

	)

62 
	#F_SETFL
 4

	)

63 #i‚de‡
F_GETLK


64 
	#F_GETLK
 5

	)

65 
	#F_SETLK
 6

	)

66 
	#F_SETLKW
 7

	)

68 #i‚de‡
F_SETOWN


69 
	#F_SETOWN
 8

	)

70 
	#F_GETOWN
 9

	)

72 #i‚de‡
F_SETSIG


73 
	#F_SETSIG
 10

	)

74 
	#F_GETSIG
 11

	)

77 #i‚de‡
CONFIG_64BIT


78 #i‚de‡
F_GETLK64


79 
	#F_GETLK64
 12

	)

80 
	#F_SETLK64
 13

	)

81 
	#F_SETLKW64
 14

	)

85 #i‚de‡
F_SETOWN_EX


86 
	#F_SETOWN_EX
 15

	)

87 
	#F_GETOWN_EX
 16

	)

90 
	#F_OWNER_TID
 0

	)

91 
	#F_OWNER_PID
 1

	)

92 
	#F_OWNER_PGRP
 2

	)

94 
	sf_ow√r_ex
 {

95 
	mty≥
;

96 
pid_t
 
	mpid
;

100 
	#FD_CLOEXEC
 1

	)

103 #i‚de‡
F_RDLCK


104 
	#F_RDLCK
 0

	)

105 
	#F_WRLCK
 1

	)

106 
	#F_UNLCK
 2

	)

110 #i‚de‡
F_EXLCK


111 
	#F_EXLCK
 4

	)

112 
	#F_SHLCK
 8

	)

116 #i‚de‡
F_INPROGRESS


117 
	#F_INPROGRESS
 16

	)

121 
	#LOCK_SH
 1

	)

122 
	#LOCK_EX
 2

	)

123 
	#LOCK_NB
 4

	)

125 
	#LOCK_UN
 8

	)

127 
	#LOCK_MAND
 32

	)

128 
	#LOCK_READ
 64

	)

129 
	#LOCK_WRITE
 128

	)

130 
	#LOCK_RW
 192

	)

132 
	#F_LINUX_SPECIFIC_BASE
 1024

	)

134 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK


135 #i‚de‡
__ARCH_FLOCK_PAD


136 
	#__ARCH_FLOCK_PAD


	)

139 
	sÊock
 {

140 
	ml_ty≥
;

141 
	ml_whí˚
;

142 
__kî√l_off_t
 
	ml_°¨t
;

143 
__kî√l_off_t
 
	ml_Àn
;

144 
__kî√l_pid_t
 
	ml_pid
;

145 
	m__ARCH_FLOCK_PAD


149 #i‚de‡
CONFIG_64BIT


151 #i‚de‡
HAVE_ARCH_STRUCT_FLOCK64


152 #i‚de‡
__ARCH_FLOCK64_PAD


153 
	#__ARCH_FLOCK64_PAD


	)

156 
	sÊock64
 {

157 
	ml_ty≥
;

158 
	ml_whí˚
;

159 
__kî√l_loff_t
 
	ml_°¨t
;

160 
__kî√l_loff_t
 
	ml_Àn
;

161 
__kî√l_pid_t
 
	ml_pid
;

162 
	m__ARCH_FLOCK64_PAD


	@/usr/include/asm-generic/poll.h

1 #i‚de‡
__ASM_GENERIC_POLL_H


2 
	#__ASM_GENERIC_POLL_H


	)

5 
	#POLLIN
 0x0001

	)

6 
	#POLLPRI
 0x0002

	)

7 
	#POLLOUT
 0x0004

	)

8 
	#POLLERR
 0x0008

	)

9 
	#POLLHUP
 0x0010

	)

10 
	#POLLNVAL
 0x0020

	)

13 
	#POLLRDNORM
 0x0040

	)

14 
	#POLLRDBAND
 0x0080

	)

15 #i‚de‡
POLLWRNORM


16 
	#POLLWRNORM
 0x0100

	)

18 #i‚de‡
POLLWRBAND


19 
	#POLLWRBAND
 0x0200

	)

21 #i‚de‡
POLLMSG


22 
	#POLLMSG
 0x0400

	)

24 #i‚de‡
POLLREMOVE


25 
	#POLLREMOVE
 0x1000

	)

27 #i‚de‡
POLLRDHUP


28 
	#POLLRDHUP
 0x2000

	)

31 
	spﬁlfd
 {

32 
	mfd
;

33 
	mevíts
;

34 
	mªvíts
;

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
f˘

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
f˘

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
f˘

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
¨gs

75 
	#__PMT
(
¨gs
Ë
	)
¨gs

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
˙ame

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 #i‡
__GNUC__
 >= 3

366 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

367 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

369 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

370 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

373 
	~<bôs/w‹dsize.h
>

375 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


376 
	#__LDBL_COMPAT
 1

	)

377 #ifde‡
__REDIRECT


378 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

379 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

380 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

381 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

382 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

384 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

385 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

386 
	#__LDBL_REDIR_DECL
(
«me
) \

387 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

388 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

389 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

390 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

391 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

394 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


395 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
¥Ÿo

396 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
¥Ÿo

397 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

398 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

399 
	#__LDBL_REDIR_DECL
(
«me
)

	)

400 #ifde‡
__REDIRECT


401 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

24 
	#__WCHAR_MAX
 (2147483647)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

64 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

65 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

68 
__exã∫_Æways_ölöe
 
wch¨_t
 *

69 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
))

71 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

73 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

74  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

75 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

77 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

78  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

79 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

81  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

82 
	}
}

85 #ifde‡
__USE_GNU


86 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

87 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

88 
size_t
 
__ns1
Ë
__THROW
;

89 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

90 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

91 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

92 
size_t
 
__n
), 
wmemp˝y
);

93 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

94 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

95 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

96 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

97 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

100 
__exã∫_Æways_ölöe
 
wch¨_t
 *

101 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

102 
size_t
 
__n
))

104 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

106 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

107  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

108 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

110 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

111  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

112 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

114  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

115 
	}
}

119 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

120 
size_t
 
__ns
Ë
__THROW
;

121 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

122 
size_t
 
__n
), 
wmem£t
);

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

124 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

125 
size_t
 
__ns
), 
__wmem£t_chk
)

126 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

129 
__exã∫_Æways_ölöe
 
wch¨_t
 *

130 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

132 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

134 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

135  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

137 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

138  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

139 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

141  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

142 
	}
}

145 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

146 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

147 
size_t
 
__n
Ë
__THROW
;

148 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

149 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

150 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

152 
__exã∫_Æways_ölöe
 
wch¨_t
 *

153 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

155 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

156  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

157  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

158 
	}
}

161 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

163 
size_t
 
__de°Àn
Ë
__THROW
;

164 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

165 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

168 
__exã∫_Æways_ölöe
 
wch¨_t
 *

169 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

171 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

172  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

173  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

174 
	}
}

177 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

178 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

179 
size_t
 
__de°Àn
Ë
__THROW
;

180 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

181 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

182 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

183 
size_t
 
__n
), 
wc¢˝y
);

184 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

185 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

186 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

187 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

188 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

191 
__exã∫_Æways_ölöe
 
wch¨_t
 *

192 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

193 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

224 
size_t
 
__n
))

226 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

228 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

229  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

230 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

231 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

232  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

233 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

235  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

236 
	}
}

239 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

240 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

241 
size_t
 
__de°Àn
Ë
__THROW
;

242 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

243 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

244 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

246 
__exã∫_Æways_ölöe
 
wch¨_t
 *

247 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
))

249 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

250  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

251  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

252 
	}
}

255 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

256 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

257 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

258 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

259 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

260 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

261 
size_t
 
__n
), 
wc¢ˇt
);

263 
__exã∫_Æways_ölöe
 
wch¨_t
 *

264 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__§c
,

265 
size_t
 
__n
))

267 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

268  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

269 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

270  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

271 
	}
}

274 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

275 
__Êag
, 
size_t
 
__s_Àn
,

276 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

277 
__THROW
 ;

279 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

280 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

281 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

282 
sw¥ötf
);

284 #ifde‡
__va_¨g_∑ck


285 
__exã∫_Æways_ölöe
 

286 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

287 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

289 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

290  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

291 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

292 
__fmt
, 
	`__va_¨g_∑ck
 ());

293  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

294 
	}
}

295 #ñi‡!
deföed
 
__˝lu•lus


297 
	#sw¥ötf
(
s
, 
n
, ...) \

298 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

299 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

300 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

301 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

304 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

305 
__Êag
, 
size_t
 
__s_Àn
,

306 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

307 
__gnuc_va_li°
 
__¨g
)

308 
__THROW
 ;

310 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

311 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

312 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

313 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

315 
__exã∫_Æways_ölöe
 

316 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

317 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

319 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

320  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

321 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

322  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

323 
	}
}

326 #i‡
__USE_FORTIFY_LEVEL
 > 1

328 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

329 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

330 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

333 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

335 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

336 
__gnuc_va_li°
 
__≠
);

338 #ifde‡
__va_¨g_∑ck


339 
__exã∫_Æways_ölöe
 

340 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

342  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

343 
	}
}

345 
__exã∫_Æways_ölöe
 

346 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

348  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

349 
	`__va_¨g_∑ck
 ());

350 
	}
}

351 #ñi‡!
deföed
 
__˝lu•lus


352 
	#w¥ötf
(...) \

353 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

354 
	#fw¥ötf
(
°ªam
, ...) \

355 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

358 
__exã∫_Æways_ölöe
 

359 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

361  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

362 
	}
}

364 
__exã∫_Æways_ölöe
 

365 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

366 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

368  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

369 
	}
}

373 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

374 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

375 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

376 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

377 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

378 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

379 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

380 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

381 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

384 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

385 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

387 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

389 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

390  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

391 
__n
, 
__°ªam
);

393 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

394  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

395 
__n
, 
__°ªam
);

397  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

398 
	}
}

400 #ifde‡
__USE_GNU


401 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

402 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

403 
__wur
;

404 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

405 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

406 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

407 
__wur
;

408 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

409 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

410 
__FILE
 *
__ª°ri˘
 
__°ªam
),

411 
__fgëws_u∆ocked_chk
)

412 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

415 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

416 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

418 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

420 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

421  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

422 
__n
, 
__°ªam
);

424 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

425  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

426 
__n
, 
__°ªam
);

428  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

429 
	}
}

433 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

434 
mb°©e_t
 *
__ª°ri˘
 
__p
,

435 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

436 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

437 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

438 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

440 
__exã∫_Æways_ölöe
 
__wur
 
size_t


441 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

442 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

447 
	#__WCHAR_MB_LEN_MAX
 16

	)

448 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


451 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

452  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

453  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

454 
	}
}

457 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

458 
__c⁄°
 **
__ª°ri˘
 
__§c
,

459 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

460 
size_t
 
__d°Àn
Ë
__THROW
;

461 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

462 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

463 
__c⁄°
 **
__ª°ri˘
 
__§c
,

464 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

465 
mb§towcs
);

466 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

467 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

468 
__c⁄°
 **
__ª°ri˘
 
__§c
,

469 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

470 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

471 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

474 
__exã∫_Æways_ölöe
 
size_t


475 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

476 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

478 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

480 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

481  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

485  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

486 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

488  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

489 
	}
}

492 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

493 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

494 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

495 
size_t
 
__d°Àn
Ë
__THROW
;

496 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

497 (*
__ª°ri˘
 
__d°
,

498 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

499 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

500 
wc§tombs
);

501 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

502 (*
__ª°ri˘
 
__d°
,

503 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

504 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

505 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

506 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

508 
__exã∫_Æways_ölöe
 
size_t


509 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

510 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

512 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

514 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

515  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

517 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

518  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

520  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

521 
	}
}

524 #ifde‡
__USE_GNU


525 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

526 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

527 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

528 
size_t
 
__d°Àn
Ë
__THROW
;

529 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

530 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

531 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

532 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

533 
mb¢πowcs
);

534 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

535 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

536 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

537 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

538 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

539 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

542 
__exã∫_Æways_ölöe
 
size_t


543 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

544 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

546 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

548 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

549  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

553  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

554 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

556  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

557 
	}
}

560 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

561 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

562 
size_t
 
__nwc
, size_à
__Àn
,

563 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

564 
__THROW
;

565 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

566 (*
__ª°ri˘
 
__d°
,

567 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

568 
size_t
 
__nwc
, size_à
__Àn
,

569 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

570 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

571 (*
__ª°ri˘
 
__d°
,

572 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

573 
size_t
 
__nwc
, size_à
__Àn
,

574 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

575 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

576 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

578 
__exã∫_Æways_ölöe
 
size_t


579 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

580 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

582 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

584 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

585  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

589  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

590 
	`__bos
 (
__d°
));

592  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

593 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
239
6164
HiApp/HiApp.c
HiApp/HiApp.h
HiSDK/common/loadbmp.c
HiSDK/common/loadbmp.h
HiSDK/common/sample_comm.h
HiSDK/common/sample_comm_audio.c
HiSDK/common/sample_comm_sys.c
HiSDK/common/sample_comm_vda.c
HiSDK/common/sample_comm_vdec.c
HiSDK/common/sample_comm_venc.c
HiSDK/common/sample_comm_vo.c
HiSDK/common/sample_comm_vpss.c
HiSDK/extdrv/gpio_i2c/gpio_i2c.c
HiSDK/extdrv/gpio_i2c/gpio_i2c.h
HiSDK/extdrv/gpio_i2c/gpioi2c.mod.c
HiSDK/extdrv/gpio_i2c/i2c_read.c
HiSDK/extdrv/gpio_i2c/i2c_write.c
HiSDK/extdrv/gpio_i2c/strfunc.c
HiSDK/extdrv/gpio_i2c/strfunc.h
HiSDK/extdrv/i2c/i2c.c
HiSDK/extdrv/i2c/i2c.h
HiSDK/extdrv/i2c/i2c_read.c
HiSDK/extdrv/i2c/i2c_write.c
HiSDK/extdrv/i2c/strfunc.c
HiSDK/extdrv/i2c/strfunc.h
HiSDK/extdrv/tlv320aic31/tlv320aic31.c
HiSDK/extdrv/tlv320aic31/tlv320aic31.h
HiSDK/extdrv/tlv320aic31/tlv320aic31_def.h
HiSDK/extdrv/tlv320aic31/tlv_320aic31.mod.c
HiSDK/include/acodec.h
HiSDK/include/hi_comm_adec.h
HiSDK/include/hi_comm_aenc.h
HiSDK/include/hi_comm_ai.h
HiSDK/include/hi_comm_aio.h
HiSDK/include/hi_comm_ao.h
HiSDK/include/hi_comm_hdmi.h
HiSDK/include/hi_comm_ive.h
HiSDK/include/hi_comm_pciv.h
HiSDK/include/hi_comm_rc.h
HiSDK/include/hi_comm_region.h
HiSDK/include/hi_comm_sys.h
HiSDK/include/hi_comm_vb.h
HiSDK/include/hi_comm_vda.h
HiSDK/include/hi_comm_vdec.h
HiSDK/include/hi_comm_venc.h
HiSDK/include/hi_comm_vgs.h
HiSDK/include/hi_comm_vi.h
HiSDK/include/hi_comm_video.h
HiSDK/include/hi_comm_vo.h
HiSDK/include/hi_comm_vpss.h
HiSDK/include/hi_common.h
HiSDK/include/hi_debug.h
HiSDK/include/hi_defines.h
HiSDK/include/hi_errno.h
HiSDK/include/hi_io.h
HiSDK/include/hi_jpg_type.h
HiSDK/include/hi_math.h
HiSDK/include/hi_mem.h
HiSDK/include/hi_tde_api.h
HiSDK/include/hi_tde_errcode.h
HiSDK/include/hi_tde_type.h
HiSDK/include/hi_type.h
HiSDK/include/hifb.h
HiSDK/include/jpg_decctrl.h
HiSDK/include/jpg_err.h
HiSDK/include/list.h
HiSDK/include/mkp/mod_ext.h
HiSDK/include/mpi_adec.h
HiSDK/include/mpi_aenc.h
HiSDK/include/mpi_ai.h
HiSDK/include/mpi_ao.h
HiSDK/include/mpi_hdmi.h
HiSDK/include/mpi_ive.h
HiSDK/include/mpi_pciv.h
HiSDK/include/mpi_region.h
HiSDK/include/mpi_sys.h
HiSDK/include/mpi_vb.h
HiSDK/include/mpi_vda.h
HiSDK/include/mpi_vdec.h
HiSDK/include/mpi_venc.h
HiSDK/include/mpi_vgs.h
HiSDK/include/mpi_vi.h
HiSDK/include/mpi_vo.h
HiSDK/include/mpi_vpss.h
alarm/MotionDetect.c
alarm/MotionDetect.h
app/app.c
app/app.h
app/appFuncTable.c
app/appFuncTable.h
dec/HiDecList.c
dec/HiDecList.h
dec/HiDecUsrPic.c
dec/HiDecUsrPic.h
dec/HiMppDec.c
dec/HiMppDec.h
dec/dec.c
dec/dec.h
include/NvrCmdCode.h
include/common.h
include/global.h
include/mylist.h
main/main.c
main/main.h
public/CfgFileOpera.c
public/CfgFileOpera.h
public/NVR_Stream.c
public/NVR_Stream.h
public/public.c
public/public.h
shm/HiShm.c
shm/HiShm.h
shm/ShareMem.cpp
shm/ShareMem.h
shm/shm_buf.h
shm/shm_interface.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/errno.h
/usr/include/linux/fb.h
/usr/include/linux/fcntl.h
/usr/include/linux/fs.h
/usr/include/linux/kernel.h
/usr/include/linux/poll.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/poll.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/errno.h
/usr/include/asm/fcntl.h
/usr/include/asm/poll.h
/usr/include/asm/types.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/poll.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/blk_types.h
/usr/include/linux/i2c.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/sched.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/fcntl.h
/usr/include/asm-generic/poll.h
/usr/include/asm-generic/types.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/stddef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
